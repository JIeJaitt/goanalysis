// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/goroutinetrace"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
)

// GoroutineTraceDelete is the builder for deleting a GoroutineTrace entity.
type GoroutineTraceDelete struct {
	config
	hooks    []Hook
	mutation *GoroutineTraceMutation
}

// Where appends a list predicates to the GoroutineTraceDelete builder.
func (gtd *GoroutineTraceDelete) Where(ps ...predicate.GoroutineTrace) *GoroutineTraceDelete {
	gtd.mutation.Where(ps...)
	return gtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gtd *GoroutineTraceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gtd.sqlExec, gtd.mutation, gtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gtd *GoroutineTraceDelete) ExecX(ctx context.Context) int {
	n, err := gtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gtd *GoroutineTraceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(goroutinetrace.Table, sqlgraph.NewFieldSpec(goroutinetrace.FieldID, field.TypeInt64))
	if ps := gtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gtd.mutation.done = true
	return affected, err
}

// GoroutineTraceDeleteOne is the builder for deleting a single GoroutineTrace entity.
type GoroutineTraceDeleteOne struct {
	gtd *GoroutineTraceDelete
}

// Where appends a list predicates to the GoroutineTraceDelete builder.
func (gtdo *GoroutineTraceDeleteOne) Where(ps ...predicate.GoroutineTrace) *GoroutineTraceDeleteOne {
	gtdo.gtd.mutation.Where(ps...)
	return gtdo
}

// Exec executes the deletion query.
func (gtdo *GoroutineTraceDeleteOne) Exec(ctx context.Context) error {
	n, err := gtdo.gtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{goroutinetrace.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gtdo *GoroutineTraceDeleteOne) ExecX(ctx context.Context) {
	if err := gtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
