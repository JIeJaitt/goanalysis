// Code generated by ent, DO NOT EDIT.

package tracedata

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the tracedata type in the database.
	Label = "trace_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGid holds the string denoting the gid field in the database.
	FieldGid = "gid"
	// FieldIndent holds the string denoting the indent field in the database.
	FieldIndent = "indent"
	// FieldParamsCount holds the string denoting the paramscount field in the database.
	FieldParamsCount = "paramsCount"
	// FieldTimeCost holds the string denoting the timecost field in the database.
	FieldTimeCost = "timeCost"
	// FieldParentId holds the string denoting the parentid field in the database.
	FieldParentId = "parentId"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldSeq holds the string denoting the seq field in the database.
	FieldSeq = "seq"
	// Table holds the table name of the tracedata in the database.
	Table = "traceData"
)

// Columns holds all SQL columns for tracedata fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldGid,
	FieldIndent,
	FieldParamsCount,
	FieldTimeCost,
	FieldParentId,
	FieldCreatedAt,
	FieldSeq,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultIndent holds the default value on creation for the "indent" field.
	DefaultIndent int
	// DefaultParamsCount holds the default value on creation for the "paramsCount" field.
	DefaultParamsCount int
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the TraceData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGid orders the results by the gid field.
func ByGid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGid, opts...).ToFunc()
}

// ByIndent orders the results by the indent field.
func ByIndent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndent, opts...).ToFunc()
}

// ByParamsCount orders the results by the paramsCount field.
func ByParamsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParamsCount, opts...).ToFunc()
}

// ByTimeCost orders the results by the timeCost field.
func ByTimeCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeCost, opts...).ToFunc()
}

// ByParentId orders the results by the parentId field.
func ByParentId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentId, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySeq orders the results by the seq field.
func BySeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeq, opts...).ToFunc()
}
