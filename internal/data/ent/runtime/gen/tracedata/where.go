// Code generated by ent, DO NOT EDIT.

package tracedata

import (
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldName, v))
}

// Gid applies equality check predicate on the "gid" field. It's identical to GidEQ.
func Gid(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldGid, v))
}

// Indent applies equality check predicate on the "indent" field. It's identical to IndentEQ.
func Indent(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldIndent, v))
}

// ParamsCount applies equality check predicate on the "paramsCount" field. It's identical to ParamsCountEQ.
func ParamsCount(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldParamsCount, v))
}

// TimeCost applies equality check predicate on the "timeCost" field. It's identical to TimeCostEQ.
func TimeCost(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldTimeCost, v))
}

// ParentId applies equality check predicate on the "parentId" field. It's identical to ParentIdEQ.
func ParentId(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldParentId, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldCreatedAt, v))
}

// Seq applies equality check predicate on the "seq" field. It's identical to SeqEQ.
func Seq(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldSeq, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContainsFold(FieldName, v))
}

// GidEQ applies the EQ predicate on the "gid" field.
func GidEQ(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldGid, v))
}

// GidNEQ applies the NEQ predicate on the "gid" field.
func GidNEQ(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldGid, v))
}

// GidIn applies the In predicate on the "gid" field.
func GidIn(vs ...uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldGid, vs...))
}

// GidNotIn applies the NotIn predicate on the "gid" field.
func GidNotIn(vs ...uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldGid, vs...))
}

// GidGT applies the GT predicate on the "gid" field.
func GidGT(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldGid, v))
}

// GidGTE applies the GTE predicate on the "gid" field.
func GidGTE(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldGid, v))
}

// GidLT applies the LT predicate on the "gid" field.
func GidLT(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldGid, v))
}

// GidLTE applies the LTE predicate on the "gid" field.
func GidLTE(v uint64) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldGid, v))
}

// IndentEQ applies the EQ predicate on the "indent" field.
func IndentEQ(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldIndent, v))
}

// IndentNEQ applies the NEQ predicate on the "indent" field.
func IndentNEQ(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldIndent, v))
}

// IndentIn applies the In predicate on the "indent" field.
func IndentIn(vs ...int) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldIndent, vs...))
}

// IndentNotIn applies the NotIn predicate on the "indent" field.
func IndentNotIn(vs ...int) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldIndent, vs...))
}

// IndentGT applies the GT predicate on the "indent" field.
func IndentGT(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldIndent, v))
}

// IndentGTE applies the GTE predicate on the "indent" field.
func IndentGTE(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldIndent, v))
}

// IndentLT applies the LT predicate on the "indent" field.
func IndentLT(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldIndent, v))
}

// IndentLTE applies the LTE predicate on the "indent" field.
func IndentLTE(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldIndent, v))
}

// ParamsCountEQ applies the EQ predicate on the "paramsCount" field.
func ParamsCountEQ(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldParamsCount, v))
}

// ParamsCountNEQ applies the NEQ predicate on the "paramsCount" field.
func ParamsCountNEQ(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldParamsCount, v))
}

// ParamsCountIn applies the In predicate on the "paramsCount" field.
func ParamsCountIn(vs ...int) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldParamsCount, vs...))
}

// ParamsCountNotIn applies the NotIn predicate on the "paramsCount" field.
func ParamsCountNotIn(vs ...int) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldParamsCount, vs...))
}

// ParamsCountGT applies the GT predicate on the "paramsCount" field.
func ParamsCountGT(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldParamsCount, v))
}

// ParamsCountGTE applies the GTE predicate on the "paramsCount" field.
func ParamsCountGTE(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldParamsCount, v))
}

// ParamsCountLT applies the LT predicate on the "paramsCount" field.
func ParamsCountLT(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldParamsCount, v))
}

// ParamsCountLTE applies the LTE predicate on the "paramsCount" field.
func ParamsCountLTE(v int) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldParamsCount, v))
}

// TimeCostEQ applies the EQ predicate on the "timeCost" field.
func TimeCostEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldTimeCost, v))
}

// TimeCostNEQ applies the NEQ predicate on the "timeCost" field.
func TimeCostNEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldTimeCost, v))
}

// TimeCostIn applies the In predicate on the "timeCost" field.
func TimeCostIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldTimeCost, vs...))
}

// TimeCostNotIn applies the NotIn predicate on the "timeCost" field.
func TimeCostNotIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldTimeCost, vs...))
}

// TimeCostGT applies the GT predicate on the "timeCost" field.
func TimeCostGT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldTimeCost, v))
}

// TimeCostGTE applies the GTE predicate on the "timeCost" field.
func TimeCostGTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldTimeCost, v))
}

// TimeCostLT applies the LT predicate on the "timeCost" field.
func TimeCostLT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldTimeCost, v))
}

// TimeCostLTE applies the LTE predicate on the "timeCost" field.
func TimeCostLTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldTimeCost, v))
}

// TimeCostContains applies the Contains predicate on the "timeCost" field.
func TimeCostContains(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContains(FieldTimeCost, v))
}

// TimeCostHasPrefix applies the HasPrefix predicate on the "timeCost" field.
func TimeCostHasPrefix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasPrefix(FieldTimeCost, v))
}

// TimeCostHasSuffix applies the HasSuffix predicate on the "timeCost" field.
func TimeCostHasSuffix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasSuffix(FieldTimeCost, v))
}

// TimeCostIsNil applies the IsNil predicate on the "timeCost" field.
func TimeCostIsNil() predicate.TraceData {
	return predicate.TraceData(sql.FieldIsNull(FieldTimeCost))
}

// TimeCostNotNil applies the NotNil predicate on the "timeCost" field.
func TimeCostNotNil() predicate.TraceData {
	return predicate.TraceData(sql.FieldNotNull(FieldTimeCost))
}

// TimeCostEqualFold applies the EqualFold predicate on the "timeCost" field.
func TimeCostEqualFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEqualFold(FieldTimeCost, v))
}

// TimeCostContainsFold applies the ContainsFold predicate on the "timeCost" field.
func TimeCostContainsFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContainsFold(FieldTimeCost, v))
}

// ParentIdEQ applies the EQ predicate on the "parentId" field.
func ParentIdEQ(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldParentId, v))
}

// ParentIdNEQ applies the NEQ predicate on the "parentId" field.
func ParentIdNEQ(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldParentId, v))
}

// ParentIdIn applies the In predicate on the "parentId" field.
func ParentIdIn(vs ...int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldParentId, vs...))
}

// ParentIdNotIn applies the NotIn predicate on the "parentId" field.
func ParentIdNotIn(vs ...int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldParentId, vs...))
}

// ParentIdGT applies the GT predicate on the "parentId" field.
func ParentIdGT(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldParentId, v))
}

// ParentIdGTE applies the GTE predicate on the "parentId" field.
func ParentIdGTE(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldParentId, v))
}

// ParentIdLT applies the LT predicate on the "parentId" field.
func ParentIdLT(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldParentId, v))
}

// ParentIdLTE applies the LTE predicate on the "parentId" field.
func ParentIdLTE(v int64) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldParentId, v))
}

// ParentIdIsNil applies the IsNil predicate on the "parentId" field.
func ParentIdIsNil() predicate.TraceData {
	return predicate.TraceData(sql.FieldIsNull(FieldParentId))
}

// ParentIdNotNil applies the NotNil predicate on the "parentId" field.
func ParentIdNotNil() predicate.TraceData {
	return predicate.TraceData(sql.FieldNotNull(FieldParentId))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtContains applies the Contains predicate on the "createdAt" field.
func CreatedAtContains(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContains(FieldCreatedAt, v))
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "createdAt" field.
func CreatedAtHasPrefix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasPrefix(FieldCreatedAt, v))
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "createdAt" field.
func CreatedAtHasSuffix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasSuffix(FieldCreatedAt, v))
}

// CreatedAtEqualFold applies the EqualFold predicate on the "createdAt" field.
func CreatedAtEqualFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEqualFold(FieldCreatedAt, v))
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "createdAt" field.
func CreatedAtContainsFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContainsFold(FieldCreatedAt, v))
}

// SeqEQ applies the EQ predicate on the "seq" field.
func SeqEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEQ(FieldSeq, v))
}

// SeqNEQ applies the NEQ predicate on the "seq" field.
func SeqNEQ(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNEQ(FieldSeq, v))
}

// SeqIn applies the In predicate on the "seq" field.
func SeqIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldIn(FieldSeq, vs...))
}

// SeqNotIn applies the NotIn predicate on the "seq" field.
func SeqNotIn(vs ...string) predicate.TraceData {
	return predicate.TraceData(sql.FieldNotIn(FieldSeq, vs...))
}

// SeqGT applies the GT predicate on the "seq" field.
func SeqGT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGT(FieldSeq, v))
}

// SeqGTE applies the GTE predicate on the "seq" field.
func SeqGTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldGTE(FieldSeq, v))
}

// SeqLT applies the LT predicate on the "seq" field.
func SeqLT(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLT(FieldSeq, v))
}

// SeqLTE applies the LTE predicate on the "seq" field.
func SeqLTE(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldLTE(FieldSeq, v))
}

// SeqContains applies the Contains predicate on the "seq" field.
func SeqContains(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContains(FieldSeq, v))
}

// SeqHasPrefix applies the HasPrefix predicate on the "seq" field.
func SeqHasPrefix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasPrefix(FieldSeq, v))
}

// SeqHasSuffix applies the HasSuffix predicate on the "seq" field.
func SeqHasSuffix(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldHasSuffix(FieldSeq, v))
}

// SeqIsNil applies the IsNil predicate on the "seq" field.
func SeqIsNil() predicate.TraceData {
	return predicate.TraceData(sql.FieldIsNull(FieldSeq))
}

// SeqNotNil applies the NotNil predicate on the "seq" field.
func SeqNotNil() predicate.TraceData {
	return predicate.TraceData(sql.FieldNotNull(FieldSeq))
}

// SeqEqualFold applies the EqualFold predicate on the "seq" field.
func SeqEqualFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldEqualFold(FieldSeq, v))
}

// SeqContainsFold applies the ContainsFold predicate on the "seq" field.
func SeqContainsFold(v string) predicate.TraceData {
	return predicate.TraceData(sql.FieldContainsFold(FieldSeq, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TraceData) predicate.TraceData {
	return predicate.TraceData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TraceData) predicate.TraceData {
	return predicate.TraceData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TraceData) predicate.TraceData {
	return predicate.TraceData(sql.NotPredicates(p))
}
