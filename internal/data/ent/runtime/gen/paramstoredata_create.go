// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/paramstoredata"
)

// ParamStoreDataCreate is the builder for creating a ParamStoreData entity.
type ParamStoreDataCreate struct {
	config
	mutation *ParamStoreDataMutation
	hooks    []Hook
}

// SetTraceId sets the "traceId" field.
func (psdc *ParamStoreDataCreate) SetTraceId(i int64) *ParamStoreDataCreate {
	psdc.mutation.SetTraceId(i)
	return psdc
}

// SetPosition sets the "position" field.
func (psdc *ParamStoreDataCreate) SetPosition(i int) *ParamStoreDataCreate {
	psdc.mutation.SetPosition(i)
	return psdc
}

// SetData sets the "data" field.
func (psdc *ParamStoreDataCreate) SetData(b []byte) *ParamStoreDataCreate {
	psdc.mutation.SetData(b)
	return psdc
}

// SetIsReceiver sets the "isReceiver" field.
func (psdc *ParamStoreDataCreate) SetIsReceiver(b bool) *ParamStoreDataCreate {
	psdc.mutation.SetIsReceiver(b)
	return psdc
}

// SetNillableIsReceiver sets the "isReceiver" field if the given value is not nil.
func (psdc *ParamStoreDataCreate) SetNillableIsReceiver(b *bool) *ParamStoreDataCreate {
	if b != nil {
		psdc.SetIsReceiver(*b)
	}
	return psdc
}

// SetBaseId sets the "baseId" field.
func (psdc *ParamStoreDataCreate) SetBaseId(i int64) *ParamStoreDataCreate {
	psdc.mutation.SetBaseId(i)
	return psdc
}

// SetNillableBaseId sets the "baseId" field if the given value is not nil.
func (psdc *ParamStoreDataCreate) SetNillableBaseId(i *int64) *ParamStoreDataCreate {
	if i != nil {
		psdc.SetBaseId(*i)
	}
	return psdc
}

// SetID sets the "id" field.
func (psdc *ParamStoreDataCreate) SetID(i int64) *ParamStoreDataCreate {
	psdc.mutation.SetID(i)
	return psdc
}

// Mutation returns the ParamStoreDataMutation object of the builder.
func (psdc *ParamStoreDataCreate) Mutation() *ParamStoreDataMutation {
	return psdc.mutation
}

// Save creates the ParamStoreData in the database.
func (psdc *ParamStoreDataCreate) Save(ctx context.Context) (*ParamStoreData, error) {
	psdc.defaults()
	return withHooks(ctx, psdc.sqlSave, psdc.mutation, psdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psdc *ParamStoreDataCreate) SaveX(ctx context.Context) *ParamStoreData {
	v, err := psdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psdc *ParamStoreDataCreate) Exec(ctx context.Context) error {
	_, err := psdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psdc *ParamStoreDataCreate) ExecX(ctx context.Context) {
	if err := psdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psdc *ParamStoreDataCreate) defaults() {
	if _, ok := psdc.mutation.Data(); !ok {
		v := paramstoredata.DefaultData
		psdc.mutation.SetData(v)
	}
	if _, ok := psdc.mutation.IsReceiver(); !ok {
		v := paramstoredata.DefaultIsReceiver
		psdc.mutation.SetIsReceiver(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psdc *ParamStoreDataCreate) check() error {
	if _, ok := psdc.mutation.TraceId(); !ok {
		return &ValidationError{Name: "traceId", err: errors.New(`gen: missing required field "ParamStoreData.traceId"`)}
	}
	if _, ok := psdc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`gen: missing required field "ParamStoreData.position"`)}
	}
	if _, ok := psdc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`gen: missing required field "ParamStoreData.data"`)}
	}
	if _, ok := psdc.mutation.IsReceiver(); !ok {
		return &ValidationError{Name: "isReceiver", err: errors.New(`gen: missing required field "ParamStoreData.isReceiver"`)}
	}
	return nil
}

func (psdc *ParamStoreDataCreate) sqlSave(ctx context.Context) (*ParamStoreData, error) {
	if err := psdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	psdc.mutation.id = &_node.ID
	psdc.mutation.done = true
	return _node, nil
}

func (psdc *ParamStoreDataCreate) createSpec() (*ParamStoreData, *sqlgraph.CreateSpec) {
	var (
		_node = &ParamStoreData{config: psdc.config}
		_spec = sqlgraph.NewCreateSpec(paramstoredata.Table, sqlgraph.NewFieldSpec(paramstoredata.FieldID, field.TypeInt64))
	)
	if id, ok := psdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psdc.mutation.TraceId(); ok {
		_spec.SetField(paramstoredata.FieldTraceId, field.TypeInt64, value)
		_node.TraceId = value
	}
	if value, ok := psdc.mutation.Position(); ok {
		_spec.SetField(paramstoredata.FieldPosition, field.TypeInt, value)
		_node.Position = value
	}
	if value, ok := psdc.mutation.Data(); ok {
		_spec.SetField(paramstoredata.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if value, ok := psdc.mutation.IsReceiver(); ok {
		_spec.SetField(paramstoredata.FieldIsReceiver, field.TypeBool, value)
		_node.IsReceiver = value
	}
	if value, ok := psdc.mutation.BaseId(); ok {
		_spec.SetField(paramstoredata.FieldBaseId, field.TypeInt64, value)
		_node.BaseId = &value
	}
	return _node, _spec
}

// ParamStoreDataCreateBulk is the builder for creating many ParamStoreData entities in bulk.
type ParamStoreDataCreateBulk struct {
	config
	err      error
	builders []*ParamStoreDataCreate
}

// Save creates the ParamStoreData entities in the database.
func (psdcb *ParamStoreDataCreateBulk) Save(ctx context.Context) ([]*ParamStoreData, error) {
	if psdcb.err != nil {
		return nil, psdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(psdcb.builders))
	nodes := make([]*ParamStoreData, len(psdcb.builders))
	mutators := make([]Mutator, len(psdcb.builders))
	for i := range psdcb.builders {
		func(i int, root context.Context) {
			builder := psdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParamStoreDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psdcb *ParamStoreDataCreateBulk) SaveX(ctx context.Context) []*ParamStoreData {
	v, err := psdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psdcb *ParamStoreDataCreateBulk) Exec(ctx context.Context) error {
	_, err := psdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psdcb *ParamStoreDataCreateBulk) ExecX(ctx context.Context) {
	if err := psdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
