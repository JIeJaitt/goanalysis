// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/goroutinetrace"
)

// GoroutineTraceCreate is the builder for creating a GoroutineTrace entity.
type GoroutineTraceCreate struct {
	config
	mutation *GoroutineTraceMutation
	hooks    []Hook
}

// SetOriginGid sets the "originGid" field.
func (gtc *GoroutineTraceCreate) SetOriginGid(u uint64) *GoroutineTraceCreate {
	gtc.mutation.SetOriginGid(u)
	return gtc
}

// SetTimeCost sets the "timeCost" field.
func (gtc *GoroutineTraceCreate) SetTimeCost(s string) *GoroutineTraceCreate {
	gtc.mutation.SetTimeCost(s)
	return gtc
}

// SetNillableTimeCost sets the "timeCost" field if the given value is not nil.
func (gtc *GoroutineTraceCreate) SetNillableTimeCost(s *string) *GoroutineTraceCreate {
	if s != nil {
		gtc.SetTimeCost(*s)
	}
	return gtc
}

// SetCreateTime sets the "createTime" field.
func (gtc *GoroutineTraceCreate) SetCreateTime(s string) *GoroutineTraceCreate {
	gtc.mutation.SetCreateTime(s)
	return gtc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gtc *GoroutineTraceCreate) SetNillableCreateTime(s *string) *GoroutineTraceCreate {
	if s != nil {
		gtc.SetCreateTime(*s)
	}
	return gtc
}

// SetIsFinished sets the "isFinished" field.
func (gtc *GoroutineTraceCreate) SetIsFinished(i int) *GoroutineTraceCreate {
	gtc.mutation.SetIsFinished(i)
	return gtc
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (gtc *GoroutineTraceCreate) SetNillableIsFinished(i *int) *GoroutineTraceCreate {
	if i != nil {
		gtc.SetIsFinished(*i)
	}
	return gtc
}

// SetInitFuncName sets the "initFuncName" field.
func (gtc *GoroutineTraceCreate) SetInitFuncName(s string) *GoroutineTraceCreate {
	gtc.mutation.SetInitFuncName(s)
	return gtc
}

// SetNillableInitFuncName sets the "initFuncName" field if the given value is not nil.
func (gtc *GoroutineTraceCreate) SetNillableInitFuncName(s *string) *GoroutineTraceCreate {
	if s != nil {
		gtc.SetInitFuncName(*s)
	}
	return gtc
}

// SetID sets the "id" field.
func (gtc *GoroutineTraceCreate) SetID(i int64) *GoroutineTraceCreate {
	gtc.mutation.SetID(i)
	return gtc
}

// Mutation returns the GoroutineTraceMutation object of the builder.
func (gtc *GoroutineTraceCreate) Mutation() *GoroutineTraceMutation {
	return gtc.mutation
}

// Save creates the GoroutineTrace in the database.
func (gtc *GoroutineTraceCreate) Save(ctx context.Context) (*GoroutineTrace, error) {
	return withHooks(ctx, gtc.sqlSave, gtc.mutation, gtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gtc *GoroutineTraceCreate) SaveX(ctx context.Context) *GoroutineTrace {
	v, err := gtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtc *GoroutineTraceCreate) Exec(ctx context.Context) error {
	_, err := gtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtc *GoroutineTraceCreate) ExecX(ctx context.Context) {
	if err := gtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtc *GoroutineTraceCreate) check() error {
	if _, ok := gtc.mutation.OriginGid(); !ok {
		return &ValidationError{Name: "originGid", err: errors.New(`gen: missing required field "GoroutineTrace.originGid"`)}
	}
	if v, ok := gtc.mutation.OriginGid(); ok {
		if err := goroutinetrace.OriginGidValidator(v); err != nil {
			return &ValidationError{Name: "originGid", err: fmt.Errorf(`gen: validator failed for field "GoroutineTrace.originGid": %w`, err)}
		}
	}
	if v, ok := gtc.mutation.ID(); ok {
		if err := goroutinetrace.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "GoroutineTrace.id": %w`, err)}
		}
	}
	return nil
}

func (gtc *GoroutineTraceCreate) sqlSave(ctx context.Context) (*GoroutineTrace, error) {
	if err := gtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	gtc.mutation.id = &_node.ID
	gtc.mutation.done = true
	return _node, nil
}

func (gtc *GoroutineTraceCreate) createSpec() (*GoroutineTrace, *sqlgraph.CreateSpec) {
	var (
		_node = &GoroutineTrace{config: gtc.config}
		_spec = sqlgraph.NewCreateSpec(goroutinetrace.Table, sqlgraph.NewFieldSpec(goroutinetrace.FieldID, field.TypeInt64))
	)
	if id, ok := gtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gtc.mutation.OriginGid(); ok {
		_spec.SetField(goroutinetrace.FieldOriginGid, field.TypeUint64, value)
		_node.OriginGid = value
	}
	if value, ok := gtc.mutation.TimeCost(); ok {
		_spec.SetField(goroutinetrace.FieldTimeCost, field.TypeString, value)
		_node.TimeCost = value
	}
	if value, ok := gtc.mutation.CreateTime(); ok {
		_spec.SetField(goroutinetrace.FieldCreateTime, field.TypeString, value)
		_node.CreateTime = value
	}
	if value, ok := gtc.mutation.IsFinished(); ok {
		_spec.SetField(goroutinetrace.FieldIsFinished, field.TypeInt, value)
		_node.IsFinished = value
	}
	if value, ok := gtc.mutation.InitFuncName(); ok {
		_spec.SetField(goroutinetrace.FieldInitFuncName, field.TypeString, value)
		_node.InitFuncName = value
	}
	return _node, _spec
}

// GoroutineTraceCreateBulk is the builder for creating many GoroutineTrace entities in bulk.
type GoroutineTraceCreateBulk struct {
	config
	err      error
	builders []*GoroutineTraceCreate
}

// Save creates the GoroutineTrace entities in the database.
func (gtcb *GoroutineTraceCreateBulk) Save(ctx context.Context) ([]*GoroutineTrace, error) {
	if gtcb.err != nil {
		return nil, gtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gtcb.builders))
	nodes := make([]*GoroutineTrace, len(gtcb.builders))
	mutators := make([]Mutator, len(gtcb.builders))
	for i := range gtcb.builders {
		func(i int, root context.Context) {
			builder := gtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoroutineTraceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gtcb *GoroutineTraceCreateBulk) SaveX(ctx context.Context) []*GoroutineTrace {
	v, err := gtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtcb *GoroutineTraceCreateBulk) Exec(ctx context.Context) error {
	_, err := gtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtcb *GoroutineTraceCreateBulk) ExecX(ctx context.Context) {
	if err := gtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
