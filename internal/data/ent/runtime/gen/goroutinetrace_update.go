// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/goroutinetrace"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
)

// GoroutineTraceUpdate is the builder for updating GoroutineTrace entities.
type GoroutineTraceUpdate struct {
	config
	hooks    []Hook
	mutation *GoroutineTraceMutation
}

// Where appends a list predicates to the GoroutineTraceUpdate builder.
func (gtu *GoroutineTraceUpdate) Where(ps ...predicate.GoroutineTrace) *GoroutineTraceUpdate {
	gtu.mutation.Where(ps...)
	return gtu
}

// SetOriginGid sets the "originGid" field.
func (gtu *GoroutineTraceUpdate) SetOriginGid(u uint64) *GoroutineTraceUpdate {
	gtu.mutation.ResetOriginGid()
	gtu.mutation.SetOriginGid(u)
	return gtu
}

// SetNillableOriginGid sets the "originGid" field if the given value is not nil.
func (gtu *GoroutineTraceUpdate) SetNillableOriginGid(u *uint64) *GoroutineTraceUpdate {
	if u != nil {
		gtu.SetOriginGid(*u)
	}
	return gtu
}

// AddOriginGid adds u to the "originGid" field.
func (gtu *GoroutineTraceUpdate) AddOriginGid(u int64) *GoroutineTraceUpdate {
	gtu.mutation.AddOriginGid(u)
	return gtu
}

// SetTimeCost sets the "timeCost" field.
func (gtu *GoroutineTraceUpdate) SetTimeCost(s string) *GoroutineTraceUpdate {
	gtu.mutation.SetTimeCost(s)
	return gtu
}

// SetNillableTimeCost sets the "timeCost" field if the given value is not nil.
func (gtu *GoroutineTraceUpdate) SetNillableTimeCost(s *string) *GoroutineTraceUpdate {
	if s != nil {
		gtu.SetTimeCost(*s)
	}
	return gtu
}

// ClearTimeCost clears the value of the "timeCost" field.
func (gtu *GoroutineTraceUpdate) ClearTimeCost() *GoroutineTraceUpdate {
	gtu.mutation.ClearTimeCost()
	return gtu
}

// SetCreateTime sets the "createTime" field.
func (gtu *GoroutineTraceUpdate) SetCreateTime(s string) *GoroutineTraceUpdate {
	gtu.mutation.SetCreateTime(s)
	return gtu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gtu *GoroutineTraceUpdate) SetNillableCreateTime(s *string) *GoroutineTraceUpdate {
	if s != nil {
		gtu.SetCreateTime(*s)
	}
	return gtu
}

// ClearCreateTime clears the value of the "createTime" field.
func (gtu *GoroutineTraceUpdate) ClearCreateTime() *GoroutineTraceUpdate {
	gtu.mutation.ClearCreateTime()
	return gtu
}

// SetIsFinished sets the "isFinished" field.
func (gtu *GoroutineTraceUpdate) SetIsFinished(i int) *GoroutineTraceUpdate {
	gtu.mutation.ResetIsFinished()
	gtu.mutation.SetIsFinished(i)
	return gtu
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (gtu *GoroutineTraceUpdate) SetNillableIsFinished(i *int) *GoroutineTraceUpdate {
	if i != nil {
		gtu.SetIsFinished(*i)
	}
	return gtu
}

// AddIsFinished adds i to the "isFinished" field.
func (gtu *GoroutineTraceUpdate) AddIsFinished(i int) *GoroutineTraceUpdate {
	gtu.mutation.AddIsFinished(i)
	return gtu
}

// ClearIsFinished clears the value of the "isFinished" field.
func (gtu *GoroutineTraceUpdate) ClearIsFinished() *GoroutineTraceUpdate {
	gtu.mutation.ClearIsFinished()
	return gtu
}

// SetInitFuncName sets the "initFuncName" field.
func (gtu *GoroutineTraceUpdate) SetInitFuncName(s string) *GoroutineTraceUpdate {
	gtu.mutation.SetInitFuncName(s)
	return gtu
}

// SetNillableInitFuncName sets the "initFuncName" field if the given value is not nil.
func (gtu *GoroutineTraceUpdate) SetNillableInitFuncName(s *string) *GoroutineTraceUpdate {
	if s != nil {
		gtu.SetInitFuncName(*s)
	}
	return gtu
}

// ClearInitFuncName clears the value of the "initFuncName" field.
func (gtu *GoroutineTraceUpdate) ClearInitFuncName() *GoroutineTraceUpdate {
	gtu.mutation.ClearInitFuncName()
	return gtu
}

// Mutation returns the GoroutineTraceMutation object of the builder.
func (gtu *GoroutineTraceUpdate) Mutation() *GoroutineTraceMutation {
	return gtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gtu *GoroutineTraceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gtu.sqlSave, gtu.mutation, gtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gtu *GoroutineTraceUpdate) SaveX(ctx context.Context) int {
	affected, err := gtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gtu *GoroutineTraceUpdate) Exec(ctx context.Context) error {
	_, err := gtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtu *GoroutineTraceUpdate) ExecX(ctx context.Context) {
	if err := gtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtu *GoroutineTraceUpdate) check() error {
	if v, ok := gtu.mutation.OriginGid(); ok {
		if err := goroutinetrace.OriginGidValidator(v); err != nil {
			return &ValidationError{Name: "originGid", err: fmt.Errorf(`gen: validator failed for field "GoroutineTrace.originGid": %w`, err)}
		}
	}
	return nil
}

func (gtu *GoroutineTraceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(goroutinetrace.Table, goroutinetrace.Columns, sqlgraph.NewFieldSpec(goroutinetrace.FieldID, field.TypeInt64))
	if ps := gtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtu.mutation.OriginGid(); ok {
		_spec.SetField(goroutinetrace.FieldOriginGid, field.TypeUint64, value)
	}
	if value, ok := gtu.mutation.AddedOriginGid(); ok {
		_spec.AddField(goroutinetrace.FieldOriginGid, field.TypeUint64, value)
	}
	if value, ok := gtu.mutation.TimeCost(); ok {
		_spec.SetField(goroutinetrace.FieldTimeCost, field.TypeString, value)
	}
	if gtu.mutation.TimeCostCleared() {
		_spec.ClearField(goroutinetrace.FieldTimeCost, field.TypeString)
	}
	if value, ok := gtu.mutation.CreateTime(); ok {
		_spec.SetField(goroutinetrace.FieldCreateTime, field.TypeString, value)
	}
	if gtu.mutation.CreateTimeCleared() {
		_spec.ClearField(goroutinetrace.FieldCreateTime, field.TypeString)
	}
	if value, ok := gtu.mutation.IsFinished(); ok {
		_spec.SetField(goroutinetrace.FieldIsFinished, field.TypeInt, value)
	}
	if value, ok := gtu.mutation.AddedIsFinished(); ok {
		_spec.AddField(goroutinetrace.FieldIsFinished, field.TypeInt, value)
	}
	if gtu.mutation.IsFinishedCleared() {
		_spec.ClearField(goroutinetrace.FieldIsFinished, field.TypeInt)
	}
	if value, ok := gtu.mutation.InitFuncName(); ok {
		_spec.SetField(goroutinetrace.FieldInitFuncName, field.TypeString, value)
	}
	if gtu.mutation.InitFuncNameCleared() {
		_spec.ClearField(goroutinetrace.FieldInitFuncName, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goroutinetrace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gtu.mutation.done = true
	return n, nil
}

// GoroutineTraceUpdateOne is the builder for updating a single GoroutineTrace entity.
type GoroutineTraceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoroutineTraceMutation
}

// SetOriginGid sets the "originGid" field.
func (gtuo *GoroutineTraceUpdateOne) SetOriginGid(u uint64) *GoroutineTraceUpdateOne {
	gtuo.mutation.ResetOriginGid()
	gtuo.mutation.SetOriginGid(u)
	return gtuo
}

// SetNillableOriginGid sets the "originGid" field if the given value is not nil.
func (gtuo *GoroutineTraceUpdateOne) SetNillableOriginGid(u *uint64) *GoroutineTraceUpdateOne {
	if u != nil {
		gtuo.SetOriginGid(*u)
	}
	return gtuo
}

// AddOriginGid adds u to the "originGid" field.
func (gtuo *GoroutineTraceUpdateOne) AddOriginGid(u int64) *GoroutineTraceUpdateOne {
	gtuo.mutation.AddOriginGid(u)
	return gtuo
}

// SetTimeCost sets the "timeCost" field.
func (gtuo *GoroutineTraceUpdateOne) SetTimeCost(s string) *GoroutineTraceUpdateOne {
	gtuo.mutation.SetTimeCost(s)
	return gtuo
}

// SetNillableTimeCost sets the "timeCost" field if the given value is not nil.
func (gtuo *GoroutineTraceUpdateOne) SetNillableTimeCost(s *string) *GoroutineTraceUpdateOne {
	if s != nil {
		gtuo.SetTimeCost(*s)
	}
	return gtuo
}

// ClearTimeCost clears the value of the "timeCost" field.
func (gtuo *GoroutineTraceUpdateOne) ClearTimeCost() *GoroutineTraceUpdateOne {
	gtuo.mutation.ClearTimeCost()
	return gtuo
}

// SetCreateTime sets the "createTime" field.
func (gtuo *GoroutineTraceUpdateOne) SetCreateTime(s string) *GoroutineTraceUpdateOne {
	gtuo.mutation.SetCreateTime(s)
	return gtuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gtuo *GoroutineTraceUpdateOne) SetNillableCreateTime(s *string) *GoroutineTraceUpdateOne {
	if s != nil {
		gtuo.SetCreateTime(*s)
	}
	return gtuo
}

// ClearCreateTime clears the value of the "createTime" field.
func (gtuo *GoroutineTraceUpdateOne) ClearCreateTime() *GoroutineTraceUpdateOne {
	gtuo.mutation.ClearCreateTime()
	return gtuo
}

// SetIsFinished sets the "isFinished" field.
func (gtuo *GoroutineTraceUpdateOne) SetIsFinished(i int) *GoroutineTraceUpdateOne {
	gtuo.mutation.ResetIsFinished()
	gtuo.mutation.SetIsFinished(i)
	return gtuo
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (gtuo *GoroutineTraceUpdateOne) SetNillableIsFinished(i *int) *GoroutineTraceUpdateOne {
	if i != nil {
		gtuo.SetIsFinished(*i)
	}
	return gtuo
}

// AddIsFinished adds i to the "isFinished" field.
func (gtuo *GoroutineTraceUpdateOne) AddIsFinished(i int) *GoroutineTraceUpdateOne {
	gtuo.mutation.AddIsFinished(i)
	return gtuo
}

// ClearIsFinished clears the value of the "isFinished" field.
func (gtuo *GoroutineTraceUpdateOne) ClearIsFinished() *GoroutineTraceUpdateOne {
	gtuo.mutation.ClearIsFinished()
	return gtuo
}

// SetInitFuncName sets the "initFuncName" field.
func (gtuo *GoroutineTraceUpdateOne) SetInitFuncName(s string) *GoroutineTraceUpdateOne {
	gtuo.mutation.SetInitFuncName(s)
	return gtuo
}

// SetNillableInitFuncName sets the "initFuncName" field if the given value is not nil.
func (gtuo *GoroutineTraceUpdateOne) SetNillableInitFuncName(s *string) *GoroutineTraceUpdateOne {
	if s != nil {
		gtuo.SetInitFuncName(*s)
	}
	return gtuo
}

// ClearInitFuncName clears the value of the "initFuncName" field.
func (gtuo *GoroutineTraceUpdateOne) ClearInitFuncName() *GoroutineTraceUpdateOne {
	gtuo.mutation.ClearInitFuncName()
	return gtuo
}

// Mutation returns the GoroutineTraceMutation object of the builder.
func (gtuo *GoroutineTraceUpdateOne) Mutation() *GoroutineTraceMutation {
	return gtuo.mutation
}

// Where appends a list predicates to the GoroutineTraceUpdate builder.
func (gtuo *GoroutineTraceUpdateOne) Where(ps ...predicate.GoroutineTrace) *GoroutineTraceUpdateOne {
	gtuo.mutation.Where(ps...)
	return gtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gtuo *GoroutineTraceUpdateOne) Select(field string, fields ...string) *GoroutineTraceUpdateOne {
	gtuo.fields = append([]string{field}, fields...)
	return gtuo
}

// Save executes the query and returns the updated GoroutineTrace entity.
func (gtuo *GoroutineTraceUpdateOne) Save(ctx context.Context) (*GoroutineTrace, error) {
	return withHooks(ctx, gtuo.sqlSave, gtuo.mutation, gtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gtuo *GoroutineTraceUpdateOne) SaveX(ctx context.Context) *GoroutineTrace {
	node, err := gtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gtuo *GoroutineTraceUpdateOne) Exec(ctx context.Context) error {
	_, err := gtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtuo *GoroutineTraceUpdateOne) ExecX(ctx context.Context) {
	if err := gtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtuo *GoroutineTraceUpdateOne) check() error {
	if v, ok := gtuo.mutation.OriginGid(); ok {
		if err := goroutinetrace.OriginGidValidator(v); err != nil {
			return &ValidationError{Name: "originGid", err: fmt.Errorf(`gen: validator failed for field "GoroutineTrace.originGid": %w`, err)}
		}
	}
	return nil
}

func (gtuo *GoroutineTraceUpdateOne) sqlSave(ctx context.Context) (_node *GoroutineTrace, err error) {
	if err := gtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(goroutinetrace.Table, goroutinetrace.Columns, sqlgraph.NewFieldSpec(goroutinetrace.FieldID, field.TypeInt64))
	id, ok := gtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "GoroutineTrace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goroutinetrace.FieldID)
		for _, f := range fields {
			if !goroutinetrace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != goroutinetrace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtuo.mutation.OriginGid(); ok {
		_spec.SetField(goroutinetrace.FieldOriginGid, field.TypeUint64, value)
	}
	if value, ok := gtuo.mutation.AddedOriginGid(); ok {
		_spec.AddField(goroutinetrace.FieldOriginGid, field.TypeUint64, value)
	}
	if value, ok := gtuo.mutation.TimeCost(); ok {
		_spec.SetField(goroutinetrace.FieldTimeCost, field.TypeString, value)
	}
	if gtuo.mutation.TimeCostCleared() {
		_spec.ClearField(goroutinetrace.FieldTimeCost, field.TypeString)
	}
	if value, ok := gtuo.mutation.CreateTime(); ok {
		_spec.SetField(goroutinetrace.FieldCreateTime, field.TypeString, value)
	}
	if gtuo.mutation.CreateTimeCleared() {
		_spec.ClearField(goroutinetrace.FieldCreateTime, field.TypeString)
	}
	if value, ok := gtuo.mutation.IsFinished(); ok {
		_spec.SetField(goroutinetrace.FieldIsFinished, field.TypeInt, value)
	}
	if value, ok := gtuo.mutation.AddedIsFinished(); ok {
		_spec.AddField(goroutinetrace.FieldIsFinished, field.TypeInt, value)
	}
	if gtuo.mutation.IsFinishedCleared() {
		_spec.ClearField(goroutinetrace.FieldIsFinished, field.TypeInt)
	}
	if value, ok := gtuo.mutation.InitFuncName(); ok {
		_spec.SetField(goroutinetrace.FieldInitFuncName, field.TypeString, value)
	}
	if gtuo.mutation.InitFuncNameCleared() {
		_spec.ClearField(goroutinetrace.FieldInitFuncName, field.TypeString)
	}
	_node = &GoroutineTrace{config: gtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goroutinetrace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gtuo.mutation.done = true
	return _node, nil
}
