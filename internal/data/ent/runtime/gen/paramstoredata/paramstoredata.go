// Code generated by ent, DO NOT EDIT.

package paramstoredata

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the paramstoredata type in the database.
	Label = "param_store_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTraceId holds the string denoting the traceid field in the database.
	FieldTraceId = "traceId"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldIsReceiver holds the string denoting the isreceiver field in the database.
	FieldIsReceiver = "isReceiver"
	// FieldBaseId holds the string denoting the baseid field in the database.
	FieldBaseId = "baseId"
	// Table holds the table name of the paramstoredata in the database.
	Table = "ParamStore"
)

// Columns holds all SQL columns for paramstoredata fields.
var Columns = []string{
	FieldID,
	FieldTraceId,
	FieldPosition,
	FieldData,
	FieldIsReceiver,
	FieldBaseId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData []byte
	// DefaultIsReceiver holds the default value on creation for the "isReceiver" field.
	DefaultIsReceiver bool
)

// OrderOption defines the ordering options for the ParamStoreData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTraceId orders the results by the traceId field.
func ByTraceId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTraceId, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByIsReceiver orders the results by the isReceiver field.
func ByIsReceiver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsReceiver, opts...).ToFunc()
}

// ByBaseId orders the results by the baseId field.
func ByBaseId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseId, opts...).ToFunc()
}
