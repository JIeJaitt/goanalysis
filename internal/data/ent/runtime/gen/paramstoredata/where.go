// Code generated by ent, DO NOT EDIT.

package paramstoredata

import (
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLTE(FieldID, id))
}

// TraceId applies equality check predicate on the "traceId" field. It's identical to TraceIdEQ.
func TraceId(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldTraceId, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldPosition, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldData, v))
}

// IsReceiver applies equality check predicate on the "isReceiver" field. It's identical to IsReceiverEQ.
func IsReceiver(v bool) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldIsReceiver, v))
}

// BaseId applies equality check predicate on the "baseId" field. It's identical to BaseIdEQ.
func BaseId(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldBaseId, v))
}

// TraceIdEQ applies the EQ predicate on the "traceId" field.
func TraceIdEQ(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldTraceId, v))
}

// TraceIdNEQ applies the NEQ predicate on the "traceId" field.
func TraceIdNEQ(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNEQ(FieldTraceId, v))
}

// TraceIdIn applies the In predicate on the "traceId" field.
func TraceIdIn(vs ...int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldIn(FieldTraceId, vs...))
}

// TraceIdNotIn applies the NotIn predicate on the "traceId" field.
func TraceIdNotIn(vs ...int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNotIn(FieldTraceId, vs...))
}

// TraceIdGT applies the GT predicate on the "traceId" field.
func TraceIdGT(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGT(FieldTraceId, v))
}

// TraceIdGTE applies the GTE predicate on the "traceId" field.
func TraceIdGTE(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGTE(FieldTraceId, v))
}

// TraceIdLT applies the LT predicate on the "traceId" field.
func TraceIdLT(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLT(FieldTraceId, v))
}

// TraceIdLTE applies the LTE predicate on the "traceId" field.
func TraceIdLTE(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLTE(FieldTraceId, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLTE(FieldPosition, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldHasSuffix(FieldData, v))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldContainsFold(FieldData, v))
}

// IsReceiverEQ applies the EQ predicate on the "isReceiver" field.
func IsReceiverEQ(v bool) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldIsReceiver, v))
}

// IsReceiverNEQ applies the NEQ predicate on the "isReceiver" field.
func IsReceiverNEQ(v bool) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNEQ(FieldIsReceiver, v))
}

// BaseIdEQ applies the EQ predicate on the "baseId" field.
func BaseIdEQ(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldEQ(FieldBaseId, v))
}

// BaseIdNEQ applies the NEQ predicate on the "baseId" field.
func BaseIdNEQ(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNEQ(FieldBaseId, v))
}

// BaseIdIn applies the In predicate on the "baseId" field.
func BaseIdIn(vs ...int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldIn(FieldBaseId, vs...))
}

// BaseIdNotIn applies the NotIn predicate on the "baseId" field.
func BaseIdNotIn(vs ...int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNotIn(FieldBaseId, vs...))
}

// BaseIdGT applies the GT predicate on the "baseId" field.
func BaseIdGT(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGT(FieldBaseId, v))
}

// BaseIdGTE applies the GTE predicate on the "baseId" field.
func BaseIdGTE(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldGTE(FieldBaseId, v))
}

// BaseIdLT applies the LT predicate on the "baseId" field.
func BaseIdLT(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLT(FieldBaseId, v))
}

// BaseIdLTE applies the LTE predicate on the "baseId" field.
func BaseIdLTE(v int64) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldLTE(FieldBaseId, v))
}

// BaseIdIsNil applies the IsNil predicate on the "baseId" field.
func BaseIdIsNil() predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldIsNull(FieldBaseId))
}

// BaseIdNotNil applies the NotNil predicate on the "baseId" field.
func BaseIdNotNil() predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.FieldNotNull(FieldBaseId))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParamStoreData) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParamStoreData) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParamStoreData) predicate.ParamStoreData {
	return predicate.ParamStoreData(sql.NotPredicates(p))
}
