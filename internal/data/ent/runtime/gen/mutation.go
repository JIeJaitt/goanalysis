// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/goroutinetrace"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/paramstoredata"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/tracedata"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGoroutineTrace = "GoroutineTrace"
	TypeParamStoreData = "ParamStoreData"
	TypeTraceData      = "TraceData"
)

// GoroutineTraceMutation represents an operation that mutates the GoroutineTrace nodes in the graph.
type GoroutineTraceMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	originGid     *uint64
	addoriginGid  *int64
	timeCost      *string
	createTime    *string
	isFinished    *int
	addisFinished *int
	initFuncName  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GoroutineTrace, error)
	predicates    []predicate.GoroutineTrace
}

var _ ent.Mutation = (*GoroutineTraceMutation)(nil)

// goroutinetraceOption allows management of the mutation configuration using functional options.
type goroutinetraceOption func(*GoroutineTraceMutation)

// newGoroutineTraceMutation creates new mutation for the GoroutineTrace entity.
func newGoroutineTraceMutation(c config, op Op, opts ...goroutinetraceOption) *GoroutineTraceMutation {
	m := &GoroutineTraceMutation{
		config:        c,
		op:            op,
		typ:           TypeGoroutineTrace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoroutineTraceID sets the ID field of the mutation.
func withGoroutineTraceID(id int64) goroutinetraceOption {
	return func(m *GoroutineTraceMutation) {
		var (
			err   error
			once  sync.Once
			value *GoroutineTrace
		)
		m.oldValue = func(ctx context.Context) (*GoroutineTrace, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoroutineTrace.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoroutineTrace sets the old GoroutineTrace of the mutation.
func withGoroutineTrace(node *GoroutineTrace) goroutinetraceOption {
	return func(m *GoroutineTraceMutation) {
		m.oldValue = func(context.Context) (*GoroutineTrace, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoroutineTraceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoroutineTraceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoroutineTrace entities.
func (m *GoroutineTraceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoroutineTraceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoroutineTraceMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GoroutineTrace.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOriginGid sets the "originGid" field.
func (m *GoroutineTraceMutation) SetOriginGid(u uint64) {
	m.originGid = &u
	m.addoriginGid = nil
}

// OriginGid returns the value of the "originGid" field in the mutation.
func (m *GoroutineTraceMutation) OriginGid() (r uint64, exists bool) {
	v := m.originGid
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginGid returns the old "originGid" field's value of the GoroutineTrace entity.
// If the GoroutineTrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoroutineTraceMutation) OldOriginGid(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginGid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginGid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginGid: %w", err)
	}
	return oldValue.OriginGid, nil
}

// AddOriginGid adds u to the "originGid" field.
func (m *GoroutineTraceMutation) AddOriginGid(u int64) {
	if m.addoriginGid != nil {
		*m.addoriginGid += u
	} else {
		m.addoriginGid = &u
	}
}

// AddedOriginGid returns the value that was added to the "originGid" field in this mutation.
func (m *GoroutineTraceMutation) AddedOriginGid() (r int64, exists bool) {
	v := m.addoriginGid
	if v == nil {
		return
	}
	return *v, true
}

// ResetOriginGid resets all changes to the "originGid" field.
func (m *GoroutineTraceMutation) ResetOriginGid() {
	m.originGid = nil
	m.addoriginGid = nil
}

// SetTimeCost sets the "timeCost" field.
func (m *GoroutineTraceMutation) SetTimeCost(s string) {
	m.timeCost = &s
}

// TimeCost returns the value of the "timeCost" field in the mutation.
func (m *GoroutineTraceMutation) TimeCost() (r string, exists bool) {
	v := m.timeCost
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeCost returns the old "timeCost" field's value of the GoroutineTrace entity.
// If the GoroutineTrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoroutineTraceMutation) OldTimeCost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeCost: %w", err)
	}
	return oldValue.TimeCost, nil
}

// ClearTimeCost clears the value of the "timeCost" field.
func (m *GoroutineTraceMutation) ClearTimeCost() {
	m.timeCost = nil
	m.clearedFields[goroutinetrace.FieldTimeCost] = struct{}{}
}

// TimeCostCleared returns if the "timeCost" field was cleared in this mutation.
func (m *GoroutineTraceMutation) TimeCostCleared() bool {
	_, ok := m.clearedFields[goroutinetrace.FieldTimeCost]
	return ok
}

// ResetTimeCost resets all changes to the "timeCost" field.
func (m *GoroutineTraceMutation) ResetTimeCost() {
	m.timeCost = nil
	delete(m.clearedFields, goroutinetrace.FieldTimeCost)
}

// SetCreateTime sets the "createTime" field.
func (m *GoroutineTraceMutation) SetCreateTime(s string) {
	m.createTime = &s
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *GoroutineTraceMutation) CreateTime() (r string, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the GoroutineTrace entity.
// If the GoroutineTrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoroutineTraceMutation) OldCreateTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *GoroutineTraceMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[goroutinetrace.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *GoroutineTraceMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[goroutinetrace.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *GoroutineTraceMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, goroutinetrace.FieldCreateTime)
}

// SetIsFinished sets the "isFinished" field.
func (m *GoroutineTraceMutation) SetIsFinished(i int) {
	m.isFinished = &i
	m.addisFinished = nil
}

// IsFinished returns the value of the "isFinished" field in the mutation.
func (m *GoroutineTraceMutation) IsFinished() (r int, exists bool) {
	v := m.isFinished
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFinished returns the old "isFinished" field's value of the GoroutineTrace entity.
// If the GoroutineTrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoroutineTraceMutation) OldIsFinished(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFinished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFinished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFinished: %w", err)
	}
	return oldValue.IsFinished, nil
}

// AddIsFinished adds i to the "isFinished" field.
func (m *GoroutineTraceMutation) AddIsFinished(i int) {
	if m.addisFinished != nil {
		*m.addisFinished += i
	} else {
		m.addisFinished = &i
	}
}

// AddedIsFinished returns the value that was added to the "isFinished" field in this mutation.
func (m *GoroutineTraceMutation) AddedIsFinished() (r int, exists bool) {
	v := m.addisFinished
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsFinished clears the value of the "isFinished" field.
func (m *GoroutineTraceMutation) ClearIsFinished() {
	m.isFinished = nil
	m.addisFinished = nil
	m.clearedFields[goroutinetrace.FieldIsFinished] = struct{}{}
}

// IsFinishedCleared returns if the "isFinished" field was cleared in this mutation.
func (m *GoroutineTraceMutation) IsFinishedCleared() bool {
	_, ok := m.clearedFields[goroutinetrace.FieldIsFinished]
	return ok
}

// ResetIsFinished resets all changes to the "isFinished" field.
func (m *GoroutineTraceMutation) ResetIsFinished() {
	m.isFinished = nil
	m.addisFinished = nil
	delete(m.clearedFields, goroutinetrace.FieldIsFinished)
}

// SetInitFuncName sets the "initFuncName" field.
func (m *GoroutineTraceMutation) SetInitFuncName(s string) {
	m.initFuncName = &s
}

// InitFuncName returns the value of the "initFuncName" field in the mutation.
func (m *GoroutineTraceMutation) InitFuncName() (r string, exists bool) {
	v := m.initFuncName
	if v == nil {
		return
	}
	return *v, true
}

// OldInitFuncName returns the old "initFuncName" field's value of the GoroutineTrace entity.
// If the GoroutineTrace object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoroutineTraceMutation) OldInitFuncName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInitFuncName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInitFuncName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitFuncName: %w", err)
	}
	return oldValue.InitFuncName, nil
}

// ClearInitFuncName clears the value of the "initFuncName" field.
func (m *GoroutineTraceMutation) ClearInitFuncName() {
	m.initFuncName = nil
	m.clearedFields[goroutinetrace.FieldInitFuncName] = struct{}{}
}

// InitFuncNameCleared returns if the "initFuncName" field was cleared in this mutation.
func (m *GoroutineTraceMutation) InitFuncNameCleared() bool {
	_, ok := m.clearedFields[goroutinetrace.FieldInitFuncName]
	return ok
}

// ResetInitFuncName resets all changes to the "initFuncName" field.
func (m *GoroutineTraceMutation) ResetInitFuncName() {
	m.initFuncName = nil
	delete(m.clearedFields, goroutinetrace.FieldInitFuncName)
}

// Where appends a list predicates to the GoroutineTraceMutation builder.
func (m *GoroutineTraceMutation) Where(ps ...predicate.GoroutineTrace) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GoroutineTraceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GoroutineTraceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GoroutineTrace, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GoroutineTraceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GoroutineTraceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GoroutineTrace).
func (m *GoroutineTraceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoroutineTraceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.originGid != nil {
		fields = append(fields, goroutinetrace.FieldOriginGid)
	}
	if m.timeCost != nil {
		fields = append(fields, goroutinetrace.FieldTimeCost)
	}
	if m.createTime != nil {
		fields = append(fields, goroutinetrace.FieldCreateTime)
	}
	if m.isFinished != nil {
		fields = append(fields, goroutinetrace.FieldIsFinished)
	}
	if m.initFuncName != nil {
		fields = append(fields, goroutinetrace.FieldInitFuncName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoroutineTraceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goroutinetrace.FieldOriginGid:
		return m.OriginGid()
	case goroutinetrace.FieldTimeCost:
		return m.TimeCost()
	case goroutinetrace.FieldCreateTime:
		return m.CreateTime()
	case goroutinetrace.FieldIsFinished:
		return m.IsFinished()
	case goroutinetrace.FieldInitFuncName:
		return m.InitFuncName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoroutineTraceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goroutinetrace.FieldOriginGid:
		return m.OldOriginGid(ctx)
	case goroutinetrace.FieldTimeCost:
		return m.OldTimeCost(ctx)
	case goroutinetrace.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case goroutinetrace.FieldIsFinished:
		return m.OldIsFinished(ctx)
	case goroutinetrace.FieldInitFuncName:
		return m.OldInitFuncName(ctx)
	}
	return nil, fmt.Errorf("unknown GoroutineTrace field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoroutineTraceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goroutinetrace.FieldOriginGid:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginGid(v)
		return nil
	case goroutinetrace.FieldTimeCost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeCost(v)
		return nil
	case goroutinetrace.FieldCreateTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case goroutinetrace.FieldIsFinished:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFinished(v)
		return nil
	case goroutinetrace.FieldInitFuncName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitFuncName(v)
		return nil
	}
	return fmt.Errorf("unknown GoroutineTrace field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoroutineTraceMutation) AddedFields() []string {
	var fields []string
	if m.addoriginGid != nil {
		fields = append(fields, goroutinetrace.FieldOriginGid)
	}
	if m.addisFinished != nil {
		fields = append(fields, goroutinetrace.FieldIsFinished)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoroutineTraceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goroutinetrace.FieldOriginGid:
		return m.AddedOriginGid()
	case goroutinetrace.FieldIsFinished:
		return m.AddedIsFinished()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoroutineTraceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goroutinetrace.FieldOriginGid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOriginGid(v)
		return nil
	case goroutinetrace.FieldIsFinished:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsFinished(v)
		return nil
	}
	return fmt.Errorf("unknown GoroutineTrace numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoroutineTraceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goroutinetrace.FieldTimeCost) {
		fields = append(fields, goroutinetrace.FieldTimeCost)
	}
	if m.FieldCleared(goroutinetrace.FieldCreateTime) {
		fields = append(fields, goroutinetrace.FieldCreateTime)
	}
	if m.FieldCleared(goroutinetrace.FieldIsFinished) {
		fields = append(fields, goroutinetrace.FieldIsFinished)
	}
	if m.FieldCleared(goroutinetrace.FieldInitFuncName) {
		fields = append(fields, goroutinetrace.FieldInitFuncName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoroutineTraceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoroutineTraceMutation) ClearField(name string) error {
	switch name {
	case goroutinetrace.FieldTimeCost:
		m.ClearTimeCost()
		return nil
	case goroutinetrace.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case goroutinetrace.FieldIsFinished:
		m.ClearIsFinished()
		return nil
	case goroutinetrace.FieldInitFuncName:
		m.ClearInitFuncName()
		return nil
	}
	return fmt.Errorf("unknown GoroutineTrace nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoroutineTraceMutation) ResetField(name string) error {
	switch name {
	case goroutinetrace.FieldOriginGid:
		m.ResetOriginGid()
		return nil
	case goroutinetrace.FieldTimeCost:
		m.ResetTimeCost()
		return nil
	case goroutinetrace.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case goroutinetrace.FieldIsFinished:
		m.ResetIsFinished()
		return nil
	case goroutinetrace.FieldInitFuncName:
		m.ResetInitFuncName()
		return nil
	}
	return fmt.Errorf("unknown GoroutineTrace field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoroutineTraceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoroutineTraceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoroutineTraceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoroutineTraceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoroutineTraceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoroutineTraceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoroutineTraceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoroutineTrace unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoroutineTraceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoroutineTrace edge %s", name)
}

// ParamStoreDataMutation represents an operation that mutates the ParamStoreData nodes in the graph.
type ParamStoreDataMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	traceId       *int64
	addtraceId    *int64
	position      *int
	addposition   *int
	data          *string
	isReceiver    *bool
	baseId        *int64
	addbaseId     *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ParamStoreData, error)
	predicates    []predicate.ParamStoreData
}

var _ ent.Mutation = (*ParamStoreDataMutation)(nil)

// paramstoredataOption allows management of the mutation configuration using functional options.
type paramstoredataOption func(*ParamStoreDataMutation)

// newParamStoreDataMutation creates new mutation for the ParamStoreData entity.
func newParamStoreDataMutation(c config, op Op, opts ...paramstoredataOption) *ParamStoreDataMutation {
	m := &ParamStoreDataMutation{
		config:        c,
		op:            op,
		typ:           TypeParamStoreData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withParamStoreDataID sets the ID field of the mutation.
func withParamStoreDataID(id int64) paramstoredataOption {
	return func(m *ParamStoreDataMutation) {
		var (
			err   error
			once  sync.Once
			value *ParamStoreData
		)
		m.oldValue = func(ctx context.Context) (*ParamStoreData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ParamStoreData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withParamStoreData sets the old ParamStoreData of the mutation.
func withParamStoreData(node *ParamStoreData) paramstoredataOption {
	return func(m *ParamStoreDataMutation) {
		m.oldValue = func(context.Context) (*ParamStoreData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ParamStoreDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ParamStoreDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ParamStoreData entities.
func (m *ParamStoreDataMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ParamStoreDataMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ParamStoreDataMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ParamStoreData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTraceId sets the "traceId" field.
func (m *ParamStoreDataMutation) SetTraceId(i int64) {
	m.traceId = &i
	m.addtraceId = nil
}

// TraceId returns the value of the "traceId" field in the mutation.
func (m *ParamStoreDataMutation) TraceId() (r int64, exists bool) {
	v := m.traceId
	if v == nil {
		return
	}
	return *v, true
}

// OldTraceId returns the old "traceId" field's value of the ParamStoreData entity.
// If the ParamStoreData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParamStoreDataMutation) OldTraceId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTraceId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTraceId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraceId: %w", err)
	}
	return oldValue.TraceId, nil
}

// AddTraceId adds i to the "traceId" field.
func (m *ParamStoreDataMutation) AddTraceId(i int64) {
	if m.addtraceId != nil {
		*m.addtraceId += i
	} else {
		m.addtraceId = &i
	}
}

// AddedTraceId returns the value that was added to the "traceId" field in this mutation.
func (m *ParamStoreDataMutation) AddedTraceId() (r int64, exists bool) {
	v := m.addtraceId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTraceId resets all changes to the "traceId" field.
func (m *ParamStoreDataMutation) ResetTraceId() {
	m.traceId = nil
	m.addtraceId = nil
}

// SetPosition sets the "position" field.
func (m *ParamStoreDataMutation) SetPosition(i int) {
	m.position = &i
	m.addposition = nil
}

// Position returns the value of the "position" field in the mutation.
func (m *ParamStoreDataMutation) Position() (r int, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the ParamStoreData entity.
// If the ParamStoreData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParamStoreDataMutation) OldPosition(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// AddPosition adds i to the "position" field.
func (m *ParamStoreDataMutation) AddPosition(i int) {
	if m.addposition != nil {
		*m.addposition += i
	} else {
		m.addposition = &i
	}
}

// AddedPosition returns the value that was added to the "position" field in this mutation.
func (m *ParamStoreDataMutation) AddedPosition() (r int, exists bool) {
	v := m.addposition
	if v == nil {
		return
	}
	return *v, true
}

// ResetPosition resets all changes to the "position" field.
func (m *ParamStoreDataMutation) ResetPosition() {
	m.position = nil
	m.addposition = nil
}

// SetData sets the "data" field.
func (m *ParamStoreDataMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *ParamStoreDataMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the ParamStoreData entity.
// If the ParamStoreData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParamStoreDataMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *ParamStoreDataMutation) ResetData() {
	m.data = nil
}

// SetIsReceiver sets the "isReceiver" field.
func (m *ParamStoreDataMutation) SetIsReceiver(b bool) {
	m.isReceiver = &b
}

// IsReceiver returns the value of the "isReceiver" field in the mutation.
func (m *ParamStoreDataMutation) IsReceiver() (r bool, exists bool) {
	v := m.isReceiver
	if v == nil {
		return
	}
	return *v, true
}

// OldIsReceiver returns the old "isReceiver" field's value of the ParamStoreData entity.
// If the ParamStoreData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParamStoreDataMutation) OldIsReceiver(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsReceiver is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsReceiver requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsReceiver: %w", err)
	}
	return oldValue.IsReceiver, nil
}

// ResetIsReceiver resets all changes to the "isReceiver" field.
func (m *ParamStoreDataMutation) ResetIsReceiver() {
	m.isReceiver = nil
}

// SetBaseId sets the "baseId" field.
func (m *ParamStoreDataMutation) SetBaseId(i int64) {
	m.baseId = &i
	m.addbaseId = nil
}

// BaseId returns the value of the "baseId" field in the mutation.
func (m *ParamStoreDataMutation) BaseId() (r int64, exists bool) {
	v := m.baseId
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseId returns the old "baseId" field's value of the ParamStoreData entity.
// If the ParamStoreData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParamStoreDataMutation) OldBaseId(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseId: %w", err)
	}
	return oldValue.BaseId, nil
}

// AddBaseId adds i to the "baseId" field.
func (m *ParamStoreDataMutation) AddBaseId(i int64) {
	if m.addbaseId != nil {
		*m.addbaseId += i
	} else {
		m.addbaseId = &i
	}
}

// AddedBaseId returns the value that was added to the "baseId" field in this mutation.
func (m *ParamStoreDataMutation) AddedBaseId() (r int64, exists bool) {
	v := m.addbaseId
	if v == nil {
		return
	}
	return *v, true
}

// ClearBaseId clears the value of the "baseId" field.
func (m *ParamStoreDataMutation) ClearBaseId() {
	m.baseId = nil
	m.addbaseId = nil
	m.clearedFields[paramstoredata.FieldBaseId] = struct{}{}
}

// BaseIdCleared returns if the "baseId" field was cleared in this mutation.
func (m *ParamStoreDataMutation) BaseIdCleared() bool {
	_, ok := m.clearedFields[paramstoredata.FieldBaseId]
	return ok
}

// ResetBaseId resets all changes to the "baseId" field.
func (m *ParamStoreDataMutation) ResetBaseId() {
	m.baseId = nil
	m.addbaseId = nil
	delete(m.clearedFields, paramstoredata.FieldBaseId)
}

// Where appends a list predicates to the ParamStoreDataMutation builder.
func (m *ParamStoreDataMutation) Where(ps ...predicate.ParamStoreData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ParamStoreDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ParamStoreDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ParamStoreData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ParamStoreDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ParamStoreDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ParamStoreData).
func (m *ParamStoreDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ParamStoreDataMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.traceId != nil {
		fields = append(fields, paramstoredata.FieldTraceId)
	}
	if m.position != nil {
		fields = append(fields, paramstoredata.FieldPosition)
	}
	if m.data != nil {
		fields = append(fields, paramstoredata.FieldData)
	}
	if m.isReceiver != nil {
		fields = append(fields, paramstoredata.FieldIsReceiver)
	}
	if m.baseId != nil {
		fields = append(fields, paramstoredata.FieldBaseId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ParamStoreDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paramstoredata.FieldTraceId:
		return m.TraceId()
	case paramstoredata.FieldPosition:
		return m.Position()
	case paramstoredata.FieldData:
		return m.Data()
	case paramstoredata.FieldIsReceiver:
		return m.IsReceiver()
	case paramstoredata.FieldBaseId:
		return m.BaseId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ParamStoreDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paramstoredata.FieldTraceId:
		return m.OldTraceId(ctx)
	case paramstoredata.FieldPosition:
		return m.OldPosition(ctx)
	case paramstoredata.FieldData:
		return m.OldData(ctx)
	case paramstoredata.FieldIsReceiver:
		return m.OldIsReceiver(ctx)
	case paramstoredata.FieldBaseId:
		return m.OldBaseId(ctx)
	}
	return nil, fmt.Errorf("unknown ParamStoreData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParamStoreDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paramstoredata.FieldTraceId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraceId(v)
		return nil
	case paramstoredata.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case paramstoredata.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case paramstoredata.FieldIsReceiver:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsReceiver(v)
		return nil
	case paramstoredata.FieldBaseId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseId(v)
		return nil
	}
	return fmt.Errorf("unknown ParamStoreData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ParamStoreDataMutation) AddedFields() []string {
	var fields []string
	if m.addtraceId != nil {
		fields = append(fields, paramstoredata.FieldTraceId)
	}
	if m.addposition != nil {
		fields = append(fields, paramstoredata.FieldPosition)
	}
	if m.addbaseId != nil {
		fields = append(fields, paramstoredata.FieldBaseId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ParamStoreDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case paramstoredata.FieldTraceId:
		return m.AddedTraceId()
	case paramstoredata.FieldPosition:
		return m.AddedPosition()
	case paramstoredata.FieldBaseId:
		return m.AddedBaseId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParamStoreDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case paramstoredata.FieldTraceId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTraceId(v)
		return nil
	case paramstoredata.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPosition(v)
		return nil
	case paramstoredata.FieldBaseId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBaseId(v)
		return nil
	}
	return fmt.Errorf("unknown ParamStoreData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ParamStoreDataMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(paramstoredata.FieldBaseId) {
		fields = append(fields, paramstoredata.FieldBaseId)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ParamStoreDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ParamStoreDataMutation) ClearField(name string) error {
	switch name {
	case paramstoredata.FieldBaseId:
		m.ClearBaseId()
		return nil
	}
	return fmt.Errorf("unknown ParamStoreData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ParamStoreDataMutation) ResetField(name string) error {
	switch name {
	case paramstoredata.FieldTraceId:
		m.ResetTraceId()
		return nil
	case paramstoredata.FieldPosition:
		m.ResetPosition()
		return nil
	case paramstoredata.FieldData:
		m.ResetData()
		return nil
	case paramstoredata.FieldIsReceiver:
		m.ResetIsReceiver()
		return nil
	case paramstoredata.FieldBaseId:
		m.ResetBaseId()
		return nil
	}
	return fmt.Errorf("unknown ParamStoreData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ParamStoreDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ParamStoreDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ParamStoreDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ParamStoreDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ParamStoreDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ParamStoreDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ParamStoreDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ParamStoreData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ParamStoreDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ParamStoreData edge %s", name)
}

// TraceDataMutation represents an operation that mutates the TraceData nodes in the graph.
type TraceDataMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	gid            *uint64
	addgid         *int64
	indent         *int
	addindent      *int
	paramsCount    *int
	addparamsCount *int
	timeCost       *string
	parentId       *int64
	addparentId    *int64
	createdAt      *string
	seq            *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*TraceData, error)
	predicates     []predicate.TraceData
}

var _ ent.Mutation = (*TraceDataMutation)(nil)

// tracedataOption allows management of the mutation configuration using functional options.
type tracedataOption func(*TraceDataMutation)

// newTraceDataMutation creates new mutation for the TraceData entity.
func newTraceDataMutation(c config, op Op, opts ...tracedataOption) *TraceDataMutation {
	m := &TraceDataMutation{
		config:        c,
		op:            op,
		typ:           TypeTraceData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTraceDataID sets the ID field of the mutation.
func withTraceDataID(id int) tracedataOption {
	return func(m *TraceDataMutation) {
		var (
			err   error
			once  sync.Once
			value *TraceData
		)
		m.oldValue = func(ctx context.Context) (*TraceData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TraceData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTraceData sets the old TraceData of the mutation.
func withTraceData(node *TraceData) tracedataOption {
	return func(m *TraceDataMutation) {
		m.oldValue = func(context.Context) (*TraceData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TraceDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TraceDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TraceData entities.
func (m *TraceDataMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TraceDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TraceDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TraceData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TraceDataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TraceDataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TraceDataMutation) ResetName() {
	m.name = nil
}

// SetGid sets the "gid" field.
func (m *TraceDataMutation) SetGid(u uint64) {
	m.gid = &u
	m.addgid = nil
}

// Gid returns the value of the "gid" field in the mutation.
func (m *TraceDataMutation) Gid() (r uint64, exists bool) {
	v := m.gid
	if v == nil {
		return
	}
	return *v, true
}

// OldGid returns the old "gid" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldGid(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGid: %w", err)
	}
	return oldValue.Gid, nil
}

// AddGid adds u to the "gid" field.
func (m *TraceDataMutation) AddGid(u int64) {
	if m.addgid != nil {
		*m.addgid += u
	} else {
		m.addgid = &u
	}
}

// AddedGid returns the value that was added to the "gid" field in this mutation.
func (m *TraceDataMutation) AddedGid() (r int64, exists bool) {
	v := m.addgid
	if v == nil {
		return
	}
	return *v, true
}

// ResetGid resets all changes to the "gid" field.
func (m *TraceDataMutation) ResetGid() {
	m.gid = nil
	m.addgid = nil
}

// SetIndent sets the "indent" field.
func (m *TraceDataMutation) SetIndent(i int) {
	m.indent = &i
	m.addindent = nil
}

// Indent returns the value of the "indent" field in the mutation.
func (m *TraceDataMutation) Indent() (r int, exists bool) {
	v := m.indent
	if v == nil {
		return
	}
	return *v, true
}

// OldIndent returns the old "indent" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldIndent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndent: %w", err)
	}
	return oldValue.Indent, nil
}

// AddIndent adds i to the "indent" field.
func (m *TraceDataMutation) AddIndent(i int) {
	if m.addindent != nil {
		*m.addindent += i
	} else {
		m.addindent = &i
	}
}

// AddedIndent returns the value that was added to the "indent" field in this mutation.
func (m *TraceDataMutation) AddedIndent() (r int, exists bool) {
	v := m.addindent
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndent resets all changes to the "indent" field.
func (m *TraceDataMutation) ResetIndent() {
	m.indent = nil
	m.addindent = nil
}

// SetParamsCount sets the "paramsCount" field.
func (m *TraceDataMutation) SetParamsCount(i int) {
	m.paramsCount = &i
	m.addparamsCount = nil
}

// ParamsCount returns the value of the "paramsCount" field in the mutation.
func (m *TraceDataMutation) ParamsCount() (r int, exists bool) {
	v := m.paramsCount
	if v == nil {
		return
	}
	return *v, true
}

// OldParamsCount returns the old "paramsCount" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldParamsCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParamsCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParamsCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParamsCount: %w", err)
	}
	return oldValue.ParamsCount, nil
}

// AddParamsCount adds i to the "paramsCount" field.
func (m *TraceDataMutation) AddParamsCount(i int) {
	if m.addparamsCount != nil {
		*m.addparamsCount += i
	} else {
		m.addparamsCount = &i
	}
}

// AddedParamsCount returns the value that was added to the "paramsCount" field in this mutation.
func (m *TraceDataMutation) AddedParamsCount() (r int, exists bool) {
	v := m.addparamsCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetParamsCount resets all changes to the "paramsCount" field.
func (m *TraceDataMutation) ResetParamsCount() {
	m.paramsCount = nil
	m.addparamsCount = nil
}

// SetTimeCost sets the "timeCost" field.
func (m *TraceDataMutation) SetTimeCost(s string) {
	m.timeCost = &s
}

// TimeCost returns the value of the "timeCost" field in the mutation.
func (m *TraceDataMutation) TimeCost() (r string, exists bool) {
	v := m.timeCost
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeCost returns the old "timeCost" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldTimeCost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeCost: %w", err)
	}
	return oldValue.TimeCost, nil
}

// ClearTimeCost clears the value of the "timeCost" field.
func (m *TraceDataMutation) ClearTimeCost() {
	m.timeCost = nil
	m.clearedFields[tracedata.FieldTimeCost] = struct{}{}
}

// TimeCostCleared returns if the "timeCost" field was cleared in this mutation.
func (m *TraceDataMutation) TimeCostCleared() bool {
	_, ok := m.clearedFields[tracedata.FieldTimeCost]
	return ok
}

// ResetTimeCost resets all changes to the "timeCost" field.
func (m *TraceDataMutation) ResetTimeCost() {
	m.timeCost = nil
	delete(m.clearedFields, tracedata.FieldTimeCost)
}

// SetParentId sets the "parentId" field.
func (m *TraceDataMutation) SetParentId(i int64) {
	m.parentId = &i
	m.addparentId = nil
}

// ParentId returns the value of the "parentId" field in the mutation.
func (m *TraceDataMutation) ParentId() (r int64, exists bool) {
	v := m.parentId
	if v == nil {
		return
	}
	return *v, true
}

// OldParentId returns the old "parentId" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldParentId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentId: %w", err)
	}
	return oldValue.ParentId, nil
}

// AddParentId adds i to the "parentId" field.
func (m *TraceDataMutation) AddParentId(i int64) {
	if m.addparentId != nil {
		*m.addparentId += i
	} else {
		m.addparentId = &i
	}
}

// AddedParentId returns the value that was added to the "parentId" field in this mutation.
func (m *TraceDataMutation) AddedParentId() (r int64, exists bool) {
	v := m.addparentId
	if v == nil {
		return
	}
	return *v, true
}

// ClearParentId clears the value of the "parentId" field.
func (m *TraceDataMutation) ClearParentId() {
	m.parentId = nil
	m.addparentId = nil
	m.clearedFields[tracedata.FieldParentId] = struct{}{}
}

// ParentIdCleared returns if the "parentId" field was cleared in this mutation.
func (m *TraceDataMutation) ParentIdCleared() bool {
	_, ok := m.clearedFields[tracedata.FieldParentId]
	return ok
}

// ResetParentId resets all changes to the "parentId" field.
func (m *TraceDataMutation) ResetParentId() {
	m.parentId = nil
	m.addparentId = nil
	delete(m.clearedFields, tracedata.FieldParentId)
}

// SetCreatedAt sets the "createdAt" field.
func (m *TraceDataMutation) SetCreatedAt(s string) {
	m.createdAt = &s
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *TraceDataMutation) CreatedAt() (r string, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldCreatedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *TraceDataMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetSeq sets the "seq" field.
func (m *TraceDataMutation) SetSeq(s string) {
	m.seq = &s
}

// Seq returns the value of the "seq" field in the mutation.
func (m *TraceDataMutation) Seq() (r string, exists bool) {
	v := m.seq
	if v == nil {
		return
	}
	return *v, true
}

// OldSeq returns the old "seq" field's value of the TraceData entity.
// If the TraceData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TraceDataMutation) OldSeq(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeq: %w", err)
	}
	return oldValue.Seq, nil
}

// ClearSeq clears the value of the "seq" field.
func (m *TraceDataMutation) ClearSeq() {
	m.seq = nil
	m.clearedFields[tracedata.FieldSeq] = struct{}{}
}

// SeqCleared returns if the "seq" field was cleared in this mutation.
func (m *TraceDataMutation) SeqCleared() bool {
	_, ok := m.clearedFields[tracedata.FieldSeq]
	return ok
}

// ResetSeq resets all changes to the "seq" field.
func (m *TraceDataMutation) ResetSeq() {
	m.seq = nil
	delete(m.clearedFields, tracedata.FieldSeq)
}

// Where appends a list predicates to the TraceDataMutation builder.
func (m *TraceDataMutation) Where(ps ...predicate.TraceData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TraceDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TraceDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TraceData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TraceDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TraceDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TraceData).
func (m *TraceDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TraceDataMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, tracedata.FieldName)
	}
	if m.gid != nil {
		fields = append(fields, tracedata.FieldGid)
	}
	if m.indent != nil {
		fields = append(fields, tracedata.FieldIndent)
	}
	if m.paramsCount != nil {
		fields = append(fields, tracedata.FieldParamsCount)
	}
	if m.timeCost != nil {
		fields = append(fields, tracedata.FieldTimeCost)
	}
	if m.parentId != nil {
		fields = append(fields, tracedata.FieldParentId)
	}
	if m.createdAt != nil {
		fields = append(fields, tracedata.FieldCreatedAt)
	}
	if m.seq != nil {
		fields = append(fields, tracedata.FieldSeq)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TraceDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tracedata.FieldName:
		return m.Name()
	case tracedata.FieldGid:
		return m.Gid()
	case tracedata.FieldIndent:
		return m.Indent()
	case tracedata.FieldParamsCount:
		return m.ParamsCount()
	case tracedata.FieldTimeCost:
		return m.TimeCost()
	case tracedata.FieldParentId:
		return m.ParentId()
	case tracedata.FieldCreatedAt:
		return m.CreatedAt()
	case tracedata.FieldSeq:
		return m.Seq()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TraceDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tracedata.FieldName:
		return m.OldName(ctx)
	case tracedata.FieldGid:
		return m.OldGid(ctx)
	case tracedata.FieldIndent:
		return m.OldIndent(ctx)
	case tracedata.FieldParamsCount:
		return m.OldParamsCount(ctx)
	case tracedata.FieldTimeCost:
		return m.OldTimeCost(ctx)
	case tracedata.FieldParentId:
		return m.OldParentId(ctx)
	case tracedata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tracedata.FieldSeq:
		return m.OldSeq(ctx)
	}
	return nil, fmt.Errorf("unknown TraceData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TraceDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tracedata.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tracedata.FieldGid:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGid(v)
		return nil
	case tracedata.FieldIndent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndent(v)
		return nil
	case tracedata.FieldParamsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParamsCount(v)
		return nil
	case tracedata.FieldTimeCost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeCost(v)
		return nil
	case tracedata.FieldParentId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentId(v)
		return nil
	case tracedata.FieldCreatedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tracedata.FieldSeq:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeq(v)
		return nil
	}
	return fmt.Errorf("unknown TraceData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TraceDataMutation) AddedFields() []string {
	var fields []string
	if m.addgid != nil {
		fields = append(fields, tracedata.FieldGid)
	}
	if m.addindent != nil {
		fields = append(fields, tracedata.FieldIndent)
	}
	if m.addparamsCount != nil {
		fields = append(fields, tracedata.FieldParamsCount)
	}
	if m.addparentId != nil {
		fields = append(fields, tracedata.FieldParentId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TraceDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tracedata.FieldGid:
		return m.AddedGid()
	case tracedata.FieldIndent:
		return m.AddedIndent()
	case tracedata.FieldParamsCount:
		return m.AddedParamsCount()
	case tracedata.FieldParentId:
		return m.AddedParentId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TraceDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tracedata.FieldGid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGid(v)
		return nil
	case tracedata.FieldIndent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndent(v)
		return nil
	case tracedata.FieldParamsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParamsCount(v)
		return nil
	case tracedata.FieldParentId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentId(v)
		return nil
	}
	return fmt.Errorf("unknown TraceData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TraceDataMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tracedata.FieldTimeCost) {
		fields = append(fields, tracedata.FieldTimeCost)
	}
	if m.FieldCleared(tracedata.FieldParentId) {
		fields = append(fields, tracedata.FieldParentId)
	}
	if m.FieldCleared(tracedata.FieldSeq) {
		fields = append(fields, tracedata.FieldSeq)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TraceDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TraceDataMutation) ClearField(name string) error {
	switch name {
	case tracedata.FieldTimeCost:
		m.ClearTimeCost()
		return nil
	case tracedata.FieldParentId:
		m.ClearParentId()
		return nil
	case tracedata.FieldSeq:
		m.ClearSeq()
		return nil
	}
	return fmt.Errorf("unknown TraceData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TraceDataMutation) ResetField(name string) error {
	switch name {
	case tracedata.FieldName:
		m.ResetName()
		return nil
	case tracedata.FieldGid:
		m.ResetGid()
		return nil
	case tracedata.FieldIndent:
		m.ResetIndent()
		return nil
	case tracedata.FieldParamsCount:
		m.ResetParamsCount()
		return nil
	case tracedata.FieldTimeCost:
		m.ResetTimeCost()
		return nil
	case tracedata.FieldParentId:
		m.ResetParentId()
		return nil
	case tracedata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tracedata.FieldSeq:
		m.ResetSeq()
		return nil
	}
	return fmt.Errorf("unknown TraceData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TraceDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TraceDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TraceDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TraceDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TraceDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TraceDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TraceDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TraceData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TraceDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TraceData edge %s", name)
}
