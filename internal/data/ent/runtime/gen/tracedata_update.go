// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/toheart/functrace"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/tracedata"
)

// TraceDataUpdate is the builder for updating TraceData entities.
type TraceDataUpdate struct {
	config
	hooks    []Hook
	mutation *TraceDataMutation
}

// Where appends a list predicates to the TraceDataUpdate builder.
func (tdu *TraceDataUpdate) Where(ps ...predicate.TraceData) *TraceDataUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetName sets the "name" field.
func (tdu *TraceDataUpdate) SetName(s string) *TraceDataUpdate {
	tdu.mutation.SetName(s)
	return tdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableName(s *string) *TraceDataUpdate {
	if s != nil {
		tdu.SetName(*s)
	}
	return tdu
}

// SetGid sets the "gid" field.
func (tdu *TraceDataUpdate) SetGid(u uint64) *TraceDataUpdate {
	tdu.mutation.ResetGid()
	tdu.mutation.SetGid(u)
	return tdu
}

// SetNillableGid sets the "gid" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableGid(u *uint64) *TraceDataUpdate {
	if u != nil {
		tdu.SetGid(*u)
	}
	return tdu
}

// AddGid adds u to the "gid" field.
func (tdu *TraceDataUpdate) AddGid(u int64) *TraceDataUpdate {
	tdu.mutation.AddGid(u)
	return tdu
}

// SetIndent sets the "indent" field.
func (tdu *TraceDataUpdate) SetIndent(i int) *TraceDataUpdate {
	tdu.mutation.ResetIndent()
	tdu.mutation.SetIndent(i)
	return tdu
}

// SetNillableIndent sets the "indent" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableIndent(i *int) *TraceDataUpdate {
	if i != nil {
		tdu.SetIndent(*i)
	}
	return tdu
}

// AddIndent adds i to the "indent" field.
func (tdu *TraceDataUpdate) AddIndent(i int) *TraceDataUpdate {
	tdu.mutation.AddIndent(i)
	return tdu
}

// SetParams sets the "params" field.
func (tdu *TraceDataUpdate) SetParams(fp []functrace.TraceParams) *TraceDataUpdate {
	tdu.mutation.SetParams(fp)
	return tdu
}

// AppendParams appends fp to the "params" field.
func (tdu *TraceDataUpdate) AppendParams(fp []functrace.TraceParams) *TraceDataUpdate {
	tdu.mutation.AppendParams(fp)
	return tdu
}

// ClearParams clears the value of the "params" field.
func (tdu *TraceDataUpdate) ClearParams() *TraceDataUpdate {
	tdu.mutation.ClearParams()
	return tdu
}

// SetTimeCost sets the "timeCost" field.
func (tdu *TraceDataUpdate) SetTimeCost(s string) *TraceDataUpdate {
	tdu.mutation.SetTimeCost(s)
	return tdu
}

// SetNillableTimeCost sets the "timeCost" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableTimeCost(s *string) *TraceDataUpdate {
	if s != nil {
		tdu.SetTimeCost(*s)
	}
	return tdu
}

// ClearTimeCost clears the value of the "timeCost" field.
func (tdu *TraceDataUpdate) ClearTimeCost() *TraceDataUpdate {
	tdu.mutation.ClearTimeCost()
	return tdu
}

// SetParentId sets the "parentId" field.
func (tdu *TraceDataUpdate) SetParentId(i int64) *TraceDataUpdate {
	tdu.mutation.ResetParentId()
	tdu.mutation.SetParentId(i)
	return tdu
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableParentId(i *int64) *TraceDataUpdate {
	if i != nil {
		tdu.SetParentId(*i)
	}
	return tdu
}

// AddParentId adds i to the "parentId" field.
func (tdu *TraceDataUpdate) AddParentId(i int64) *TraceDataUpdate {
	tdu.mutation.AddParentId(i)
	return tdu
}

// ClearParentId clears the value of the "parentId" field.
func (tdu *TraceDataUpdate) ClearParentId() *TraceDataUpdate {
	tdu.mutation.ClearParentId()
	return tdu
}

// SetCreatedAt sets the "createdAt" field.
func (tdu *TraceDataUpdate) SetCreatedAt(s string) *TraceDataUpdate {
	tdu.mutation.SetCreatedAt(s)
	return tdu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableCreatedAt(s *string) *TraceDataUpdate {
	if s != nil {
		tdu.SetCreatedAt(*s)
	}
	return tdu
}

// SetSeq sets the "seq" field.
func (tdu *TraceDataUpdate) SetSeq(s string) *TraceDataUpdate {
	tdu.mutation.SetSeq(s)
	return tdu
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (tdu *TraceDataUpdate) SetNillableSeq(s *string) *TraceDataUpdate {
	if s != nil {
		tdu.SetSeq(*s)
	}
	return tdu
}

// ClearSeq clears the value of the "seq" field.
func (tdu *TraceDataUpdate) ClearSeq() *TraceDataUpdate {
	tdu.mutation.ClearSeq()
	return tdu
}

// Mutation returns the TraceDataMutation object of the builder.
func (tdu *TraceDataUpdate) Mutation() *TraceDataMutation {
	return tdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TraceDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TraceDataUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TraceDataUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TraceDataUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TraceDataUpdate) check() error {
	if v, ok := tdu.mutation.Name(); ok {
		if err := tracedata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "TraceData.name": %w`, err)}
		}
	}
	return nil
}

func (tdu *TraceDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tracedata.Table, tracedata.Columns, sqlgraph.NewFieldSpec(tracedata.FieldID, field.TypeInt))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.Name(); ok {
		_spec.SetField(tracedata.FieldName, field.TypeString, value)
	}
	if value, ok := tdu.mutation.Gid(); ok {
		_spec.SetField(tracedata.FieldGid, field.TypeUint64, value)
	}
	if value, ok := tdu.mutation.AddedGid(); ok {
		_spec.AddField(tracedata.FieldGid, field.TypeUint64, value)
	}
	if value, ok := tdu.mutation.Indent(); ok {
		_spec.SetField(tracedata.FieldIndent, field.TypeInt, value)
	}
	if value, ok := tdu.mutation.AddedIndent(); ok {
		_spec.AddField(tracedata.FieldIndent, field.TypeInt, value)
	}
	if value, ok := tdu.mutation.Params(); ok {
		_spec.SetField(tracedata.FieldParams, field.TypeJSON, value)
	}
	if value, ok := tdu.mutation.AppendedParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tracedata.FieldParams, value)
		})
	}
	if tdu.mutation.ParamsCleared() {
		_spec.ClearField(tracedata.FieldParams, field.TypeJSON)
	}
	if value, ok := tdu.mutation.TimeCost(); ok {
		_spec.SetField(tracedata.FieldTimeCost, field.TypeString, value)
	}
	if tdu.mutation.TimeCostCleared() {
		_spec.ClearField(tracedata.FieldTimeCost, field.TypeString)
	}
	if value, ok := tdu.mutation.ParentId(); ok {
		_spec.SetField(tracedata.FieldParentId, field.TypeInt64, value)
	}
	if value, ok := tdu.mutation.AddedParentId(); ok {
		_spec.AddField(tracedata.FieldParentId, field.TypeInt64, value)
	}
	if tdu.mutation.ParentIdCleared() {
		_spec.ClearField(tracedata.FieldParentId, field.TypeInt64)
	}
	if value, ok := tdu.mutation.CreatedAt(); ok {
		_spec.SetField(tracedata.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := tdu.mutation.Seq(); ok {
		_spec.SetField(tracedata.FieldSeq, field.TypeString, value)
	}
	if tdu.mutation.SeqCleared() {
		_spec.ClearField(tracedata.FieldSeq, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tracedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TraceDataUpdateOne is the builder for updating a single TraceData entity.
type TraceDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TraceDataMutation
}

// SetName sets the "name" field.
func (tduo *TraceDataUpdateOne) SetName(s string) *TraceDataUpdateOne {
	tduo.mutation.SetName(s)
	return tduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableName(s *string) *TraceDataUpdateOne {
	if s != nil {
		tduo.SetName(*s)
	}
	return tduo
}

// SetGid sets the "gid" field.
func (tduo *TraceDataUpdateOne) SetGid(u uint64) *TraceDataUpdateOne {
	tduo.mutation.ResetGid()
	tduo.mutation.SetGid(u)
	return tduo
}

// SetNillableGid sets the "gid" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableGid(u *uint64) *TraceDataUpdateOne {
	if u != nil {
		tduo.SetGid(*u)
	}
	return tduo
}

// AddGid adds u to the "gid" field.
func (tduo *TraceDataUpdateOne) AddGid(u int64) *TraceDataUpdateOne {
	tduo.mutation.AddGid(u)
	return tduo
}

// SetIndent sets the "indent" field.
func (tduo *TraceDataUpdateOne) SetIndent(i int) *TraceDataUpdateOne {
	tduo.mutation.ResetIndent()
	tduo.mutation.SetIndent(i)
	return tduo
}

// SetNillableIndent sets the "indent" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableIndent(i *int) *TraceDataUpdateOne {
	if i != nil {
		tduo.SetIndent(*i)
	}
	return tduo
}

// AddIndent adds i to the "indent" field.
func (tduo *TraceDataUpdateOne) AddIndent(i int) *TraceDataUpdateOne {
	tduo.mutation.AddIndent(i)
	return tduo
}

// SetParams sets the "params" field.
func (tduo *TraceDataUpdateOne) SetParams(fp []functrace.TraceParams) *TraceDataUpdateOne {
	tduo.mutation.SetParams(fp)
	return tduo
}

// AppendParams appends fp to the "params" field.
func (tduo *TraceDataUpdateOne) AppendParams(fp []functrace.TraceParams) *TraceDataUpdateOne {
	tduo.mutation.AppendParams(fp)
	return tduo
}

// ClearParams clears the value of the "params" field.
func (tduo *TraceDataUpdateOne) ClearParams() *TraceDataUpdateOne {
	tduo.mutation.ClearParams()
	return tduo
}

// SetTimeCost sets the "timeCost" field.
func (tduo *TraceDataUpdateOne) SetTimeCost(s string) *TraceDataUpdateOne {
	tduo.mutation.SetTimeCost(s)
	return tduo
}

// SetNillableTimeCost sets the "timeCost" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableTimeCost(s *string) *TraceDataUpdateOne {
	if s != nil {
		tduo.SetTimeCost(*s)
	}
	return tduo
}

// ClearTimeCost clears the value of the "timeCost" field.
func (tduo *TraceDataUpdateOne) ClearTimeCost() *TraceDataUpdateOne {
	tduo.mutation.ClearTimeCost()
	return tduo
}

// SetParentId sets the "parentId" field.
func (tduo *TraceDataUpdateOne) SetParentId(i int64) *TraceDataUpdateOne {
	tduo.mutation.ResetParentId()
	tduo.mutation.SetParentId(i)
	return tduo
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableParentId(i *int64) *TraceDataUpdateOne {
	if i != nil {
		tduo.SetParentId(*i)
	}
	return tduo
}

// AddParentId adds i to the "parentId" field.
func (tduo *TraceDataUpdateOne) AddParentId(i int64) *TraceDataUpdateOne {
	tduo.mutation.AddParentId(i)
	return tduo
}

// ClearParentId clears the value of the "parentId" field.
func (tduo *TraceDataUpdateOne) ClearParentId() *TraceDataUpdateOne {
	tduo.mutation.ClearParentId()
	return tduo
}

// SetCreatedAt sets the "createdAt" field.
func (tduo *TraceDataUpdateOne) SetCreatedAt(s string) *TraceDataUpdateOne {
	tduo.mutation.SetCreatedAt(s)
	return tduo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableCreatedAt(s *string) *TraceDataUpdateOne {
	if s != nil {
		tduo.SetCreatedAt(*s)
	}
	return tduo
}

// SetSeq sets the "seq" field.
func (tduo *TraceDataUpdateOne) SetSeq(s string) *TraceDataUpdateOne {
	tduo.mutation.SetSeq(s)
	return tduo
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (tduo *TraceDataUpdateOne) SetNillableSeq(s *string) *TraceDataUpdateOne {
	if s != nil {
		tduo.SetSeq(*s)
	}
	return tduo
}

// ClearSeq clears the value of the "seq" field.
func (tduo *TraceDataUpdateOne) ClearSeq() *TraceDataUpdateOne {
	tduo.mutation.ClearSeq()
	return tduo
}

// Mutation returns the TraceDataMutation object of the builder.
func (tduo *TraceDataUpdateOne) Mutation() *TraceDataMutation {
	return tduo.mutation
}

// Where appends a list predicates to the TraceDataUpdate builder.
func (tduo *TraceDataUpdateOne) Where(ps ...predicate.TraceData) *TraceDataUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TraceDataUpdateOne) Select(field string, fields ...string) *TraceDataUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TraceData entity.
func (tduo *TraceDataUpdateOne) Save(ctx context.Context) (*TraceData, error) {
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TraceDataUpdateOne) SaveX(ctx context.Context) *TraceData {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TraceDataUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TraceDataUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TraceDataUpdateOne) check() error {
	if v, ok := tduo.mutation.Name(); ok {
		if err := tracedata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "TraceData.name": %w`, err)}
		}
	}
	return nil
}

func (tduo *TraceDataUpdateOne) sqlSave(ctx context.Context) (_node *TraceData, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tracedata.Table, tracedata.Columns, sqlgraph.NewFieldSpec(tracedata.FieldID, field.TypeInt))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "TraceData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tracedata.FieldID)
		for _, f := range fields {
			if !tracedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != tracedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.Name(); ok {
		_spec.SetField(tracedata.FieldName, field.TypeString, value)
	}
	if value, ok := tduo.mutation.Gid(); ok {
		_spec.SetField(tracedata.FieldGid, field.TypeUint64, value)
	}
	if value, ok := tduo.mutation.AddedGid(); ok {
		_spec.AddField(tracedata.FieldGid, field.TypeUint64, value)
	}
	if value, ok := tduo.mutation.Indent(); ok {
		_spec.SetField(tracedata.FieldIndent, field.TypeInt, value)
	}
	if value, ok := tduo.mutation.AddedIndent(); ok {
		_spec.AddField(tracedata.FieldIndent, field.TypeInt, value)
	}
	if value, ok := tduo.mutation.Params(); ok {
		_spec.SetField(tracedata.FieldParams, field.TypeJSON, value)
	}
	if value, ok := tduo.mutation.AppendedParams(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tracedata.FieldParams, value)
		})
	}
	if tduo.mutation.ParamsCleared() {
		_spec.ClearField(tracedata.FieldParams, field.TypeJSON)
	}
	if value, ok := tduo.mutation.TimeCost(); ok {
		_spec.SetField(tracedata.FieldTimeCost, field.TypeString, value)
	}
	if tduo.mutation.TimeCostCleared() {
		_spec.ClearField(tracedata.FieldTimeCost, field.TypeString)
	}
	if value, ok := tduo.mutation.ParentId(); ok {
		_spec.SetField(tracedata.FieldParentId, field.TypeInt64, value)
	}
	if value, ok := tduo.mutation.AddedParentId(); ok {
		_spec.AddField(tracedata.FieldParentId, field.TypeInt64, value)
	}
	if tduo.mutation.ParentIdCleared() {
		_spec.ClearField(tracedata.FieldParentId, field.TypeInt64)
	}
	if value, ok := tduo.mutation.CreatedAt(); ok {
		_spec.SetField(tracedata.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := tduo.mutation.Seq(); ok {
		_spec.SetField(tracedata.FieldSeq, field.TypeString, value)
	}
	if tduo.mutation.SeqCleared() {
		_spec.ClearField(tracedata.FieldSeq, field.TypeString)
	}
	_node = &TraceData{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tracedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
