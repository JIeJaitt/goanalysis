// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/tracedata"
)

// TraceDataCreate is the builder for creating a TraceData entity.
type TraceDataCreate struct {
	config
	mutation *TraceDataMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tdc *TraceDataCreate) SetName(s string) *TraceDataCreate {
	tdc.mutation.SetName(s)
	return tdc
}

// SetGid sets the "gid" field.
func (tdc *TraceDataCreate) SetGid(u uint64) *TraceDataCreate {
	tdc.mutation.SetGid(u)
	return tdc
}

// SetIndent sets the "indent" field.
func (tdc *TraceDataCreate) SetIndent(i int) *TraceDataCreate {
	tdc.mutation.SetIndent(i)
	return tdc
}

// SetNillableIndent sets the "indent" field if the given value is not nil.
func (tdc *TraceDataCreate) SetNillableIndent(i *int) *TraceDataCreate {
	if i != nil {
		tdc.SetIndent(*i)
	}
	return tdc
}

// SetParamsCount sets the "paramsCount" field.
func (tdc *TraceDataCreate) SetParamsCount(i int) *TraceDataCreate {
	tdc.mutation.SetParamsCount(i)
	return tdc
}

// SetNillableParamsCount sets the "paramsCount" field if the given value is not nil.
func (tdc *TraceDataCreate) SetNillableParamsCount(i *int) *TraceDataCreate {
	if i != nil {
		tdc.SetParamsCount(*i)
	}
	return tdc
}

// SetTimeCost sets the "timeCost" field.
func (tdc *TraceDataCreate) SetTimeCost(s string) *TraceDataCreate {
	tdc.mutation.SetTimeCost(s)
	return tdc
}

// SetNillableTimeCost sets the "timeCost" field if the given value is not nil.
func (tdc *TraceDataCreate) SetNillableTimeCost(s *string) *TraceDataCreate {
	if s != nil {
		tdc.SetTimeCost(*s)
	}
	return tdc
}

// SetParentId sets the "parentId" field.
func (tdc *TraceDataCreate) SetParentId(i int64) *TraceDataCreate {
	tdc.mutation.SetParentId(i)
	return tdc
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (tdc *TraceDataCreate) SetNillableParentId(i *int64) *TraceDataCreate {
	if i != nil {
		tdc.SetParentId(*i)
	}
	return tdc
}

// SetCreatedAt sets the "createdAt" field.
func (tdc *TraceDataCreate) SetCreatedAt(s string) *TraceDataCreate {
	tdc.mutation.SetCreatedAt(s)
	return tdc
}

// SetSeq sets the "seq" field.
func (tdc *TraceDataCreate) SetSeq(s string) *TraceDataCreate {
	tdc.mutation.SetSeq(s)
	return tdc
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (tdc *TraceDataCreate) SetNillableSeq(s *string) *TraceDataCreate {
	if s != nil {
		tdc.SetSeq(*s)
	}
	return tdc
}

// SetID sets the "id" field.
func (tdc *TraceDataCreate) SetID(i int) *TraceDataCreate {
	tdc.mutation.SetID(i)
	return tdc
}

// Mutation returns the TraceDataMutation object of the builder.
func (tdc *TraceDataCreate) Mutation() *TraceDataMutation {
	return tdc.mutation
}

// Save creates the TraceData in the database.
func (tdc *TraceDataCreate) Save(ctx context.Context) (*TraceData, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TraceDataCreate) SaveX(ctx context.Context) *TraceData {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TraceDataCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TraceDataCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TraceDataCreate) defaults() {
	if _, ok := tdc.mutation.Indent(); !ok {
		v := tracedata.DefaultIndent
		tdc.mutation.SetIndent(v)
	}
	if _, ok := tdc.mutation.ParamsCount(); !ok {
		v := tracedata.DefaultParamsCount
		tdc.mutation.SetParamsCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TraceDataCreate) check() error {
	if _, ok := tdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "TraceData.name"`)}
	}
	if v, ok := tdc.mutation.Name(); ok {
		if err := tracedata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "TraceData.name": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.Gid(); !ok {
		return &ValidationError{Name: "gid", err: errors.New(`gen: missing required field "TraceData.gid"`)}
	}
	if _, ok := tdc.mutation.Indent(); !ok {
		return &ValidationError{Name: "indent", err: errors.New(`gen: missing required field "TraceData.indent"`)}
	}
	if _, ok := tdc.mutation.ParamsCount(); !ok {
		return &ValidationError{Name: "paramsCount", err: errors.New(`gen: missing required field "TraceData.paramsCount"`)}
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`gen: missing required field "TraceData.createdAt"`)}
	}
	if v, ok := tdc.mutation.ID(); ok {
		if err := tracedata.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "TraceData.id": %w`, err)}
		}
	}
	return nil
}

func (tdc *TraceDataCreate) sqlSave(ctx context.Context) (*TraceData, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TraceDataCreate) createSpec() (*TraceData, *sqlgraph.CreateSpec) {
	var (
		_node = &TraceData{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(tracedata.Table, sqlgraph.NewFieldSpec(tracedata.FieldID, field.TypeInt))
	)
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.Name(); ok {
		_spec.SetField(tracedata.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tdc.mutation.Gid(); ok {
		_spec.SetField(tracedata.FieldGid, field.TypeUint64, value)
		_node.Gid = value
	}
	if value, ok := tdc.mutation.Indent(); ok {
		_spec.SetField(tracedata.FieldIndent, field.TypeInt, value)
		_node.Indent = value
	}
	if value, ok := tdc.mutation.ParamsCount(); ok {
		_spec.SetField(tracedata.FieldParamsCount, field.TypeInt, value)
		_node.ParamsCount = value
	}
	if value, ok := tdc.mutation.TimeCost(); ok {
		_spec.SetField(tracedata.FieldTimeCost, field.TypeString, value)
		_node.TimeCost = value
	}
	if value, ok := tdc.mutation.ParentId(); ok {
		_spec.SetField(tracedata.FieldParentId, field.TypeInt64, value)
		_node.ParentId = value
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(tracedata.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := tdc.mutation.Seq(); ok {
		_spec.SetField(tracedata.FieldSeq, field.TypeString, value)
		_node.Seq = value
	}
	return _node, _spec
}

// TraceDataCreateBulk is the builder for creating many TraceData entities in bulk.
type TraceDataCreateBulk struct {
	config
	err      error
	builders []*TraceDataCreate
}

// Save creates the TraceData entities in the database.
func (tdcb *TraceDataCreateBulk) Save(ctx context.Context) ([]*TraceData, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TraceData, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TraceDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TraceDataCreateBulk) SaveX(ctx context.Context) []*TraceData {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TraceDataCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TraceDataCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
