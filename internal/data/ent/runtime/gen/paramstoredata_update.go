// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/paramstoredata"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/predicate"
)

// ParamStoreDataUpdate is the builder for updating ParamStoreData entities.
type ParamStoreDataUpdate struct {
	config
	hooks    []Hook
	mutation *ParamStoreDataMutation
}

// Where appends a list predicates to the ParamStoreDataUpdate builder.
func (psdu *ParamStoreDataUpdate) Where(ps ...predicate.ParamStoreData) *ParamStoreDataUpdate {
	psdu.mutation.Where(ps...)
	return psdu
}

// SetTraceId sets the "traceId" field.
func (psdu *ParamStoreDataUpdate) SetTraceId(i int64) *ParamStoreDataUpdate {
	psdu.mutation.ResetTraceId()
	psdu.mutation.SetTraceId(i)
	return psdu
}

// SetNillableTraceId sets the "traceId" field if the given value is not nil.
func (psdu *ParamStoreDataUpdate) SetNillableTraceId(i *int64) *ParamStoreDataUpdate {
	if i != nil {
		psdu.SetTraceId(*i)
	}
	return psdu
}

// AddTraceId adds i to the "traceId" field.
func (psdu *ParamStoreDataUpdate) AddTraceId(i int64) *ParamStoreDataUpdate {
	psdu.mutation.AddTraceId(i)
	return psdu
}

// SetPosition sets the "position" field.
func (psdu *ParamStoreDataUpdate) SetPosition(i int) *ParamStoreDataUpdate {
	psdu.mutation.ResetPosition()
	psdu.mutation.SetPosition(i)
	return psdu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (psdu *ParamStoreDataUpdate) SetNillablePosition(i *int) *ParamStoreDataUpdate {
	if i != nil {
		psdu.SetPosition(*i)
	}
	return psdu
}

// AddPosition adds i to the "position" field.
func (psdu *ParamStoreDataUpdate) AddPosition(i int) *ParamStoreDataUpdate {
	psdu.mutation.AddPosition(i)
	return psdu
}

// SetData sets the "data" field.
func (psdu *ParamStoreDataUpdate) SetData(s string) *ParamStoreDataUpdate {
	psdu.mutation.SetData(s)
	return psdu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (psdu *ParamStoreDataUpdate) SetNillableData(s *string) *ParamStoreDataUpdate {
	if s != nil {
		psdu.SetData(*s)
	}
	return psdu
}

// SetIsReceiver sets the "isReceiver" field.
func (psdu *ParamStoreDataUpdate) SetIsReceiver(b bool) *ParamStoreDataUpdate {
	psdu.mutation.SetIsReceiver(b)
	return psdu
}

// SetNillableIsReceiver sets the "isReceiver" field if the given value is not nil.
func (psdu *ParamStoreDataUpdate) SetNillableIsReceiver(b *bool) *ParamStoreDataUpdate {
	if b != nil {
		psdu.SetIsReceiver(*b)
	}
	return psdu
}

// SetBaseId sets the "baseId" field.
func (psdu *ParamStoreDataUpdate) SetBaseId(i int64) *ParamStoreDataUpdate {
	psdu.mutation.ResetBaseId()
	psdu.mutation.SetBaseId(i)
	return psdu
}

// SetNillableBaseId sets the "baseId" field if the given value is not nil.
func (psdu *ParamStoreDataUpdate) SetNillableBaseId(i *int64) *ParamStoreDataUpdate {
	if i != nil {
		psdu.SetBaseId(*i)
	}
	return psdu
}

// AddBaseId adds i to the "baseId" field.
func (psdu *ParamStoreDataUpdate) AddBaseId(i int64) *ParamStoreDataUpdate {
	psdu.mutation.AddBaseId(i)
	return psdu
}

// ClearBaseId clears the value of the "baseId" field.
func (psdu *ParamStoreDataUpdate) ClearBaseId() *ParamStoreDataUpdate {
	psdu.mutation.ClearBaseId()
	return psdu
}

// Mutation returns the ParamStoreDataMutation object of the builder.
func (psdu *ParamStoreDataUpdate) Mutation() *ParamStoreDataMutation {
	return psdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psdu *ParamStoreDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psdu.sqlSave, psdu.mutation, psdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psdu *ParamStoreDataUpdate) SaveX(ctx context.Context) int {
	affected, err := psdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psdu *ParamStoreDataUpdate) Exec(ctx context.Context) error {
	_, err := psdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psdu *ParamStoreDataUpdate) ExecX(ctx context.Context) {
	if err := psdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psdu *ParamStoreDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(paramstoredata.Table, paramstoredata.Columns, sqlgraph.NewFieldSpec(paramstoredata.FieldID, field.TypeInt64))
	if ps := psdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psdu.mutation.TraceId(); ok {
		_spec.SetField(paramstoredata.FieldTraceId, field.TypeInt64, value)
	}
	if value, ok := psdu.mutation.AddedTraceId(); ok {
		_spec.AddField(paramstoredata.FieldTraceId, field.TypeInt64, value)
	}
	if value, ok := psdu.mutation.Position(); ok {
		_spec.SetField(paramstoredata.FieldPosition, field.TypeInt, value)
	}
	if value, ok := psdu.mutation.AddedPosition(); ok {
		_spec.AddField(paramstoredata.FieldPosition, field.TypeInt, value)
	}
	if value, ok := psdu.mutation.Data(); ok {
		_spec.SetField(paramstoredata.FieldData, field.TypeString, value)
	}
	if value, ok := psdu.mutation.IsReceiver(); ok {
		_spec.SetField(paramstoredata.FieldIsReceiver, field.TypeBool, value)
	}
	if value, ok := psdu.mutation.BaseId(); ok {
		_spec.SetField(paramstoredata.FieldBaseId, field.TypeInt64, value)
	}
	if value, ok := psdu.mutation.AddedBaseId(); ok {
		_spec.AddField(paramstoredata.FieldBaseId, field.TypeInt64, value)
	}
	if psdu.mutation.BaseIdCleared() {
		_spec.ClearField(paramstoredata.FieldBaseId, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paramstoredata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psdu.mutation.done = true
	return n, nil
}

// ParamStoreDataUpdateOne is the builder for updating a single ParamStoreData entity.
type ParamStoreDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParamStoreDataMutation
}

// SetTraceId sets the "traceId" field.
func (psduo *ParamStoreDataUpdateOne) SetTraceId(i int64) *ParamStoreDataUpdateOne {
	psduo.mutation.ResetTraceId()
	psduo.mutation.SetTraceId(i)
	return psduo
}

// SetNillableTraceId sets the "traceId" field if the given value is not nil.
func (psduo *ParamStoreDataUpdateOne) SetNillableTraceId(i *int64) *ParamStoreDataUpdateOne {
	if i != nil {
		psduo.SetTraceId(*i)
	}
	return psduo
}

// AddTraceId adds i to the "traceId" field.
func (psduo *ParamStoreDataUpdateOne) AddTraceId(i int64) *ParamStoreDataUpdateOne {
	psduo.mutation.AddTraceId(i)
	return psduo
}

// SetPosition sets the "position" field.
func (psduo *ParamStoreDataUpdateOne) SetPosition(i int) *ParamStoreDataUpdateOne {
	psduo.mutation.ResetPosition()
	psduo.mutation.SetPosition(i)
	return psduo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (psduo *ParamStoreDataUpdateOne) SetNillablePosition(i *int) *ParamStoreDataUpdateOne {
	if i != nil {
		psduo.SetPosition(*i)
	}
	return psduo
}

// AddPosition adds i to the "position" field.
func (psduo *ParamStoreDataUpdateOne) AddPosition(i int) *ParamStoreDataUpdateOne {
	psduo.mutation.AddPosition(i)
	return psduo
}

// SetData sets the "data" field.
func (psduo *ParamStoreDataUpdateOne) SetData(s string) *ParamStoreDataUpdateOne {
	psduo.mutation.SetData(s)
	return psduo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (psduo *ParamStoreDataUpdateOne) SetNillableData(s *string) *ParamStoreDataUpdateOne {
	if s != nil {
		psduo.SetData(*s)
	}
	return psduo
}

// SetIsReceiver sets the "isReceiver" field.
func (psduo *ParamStoreDataUpdateOne) SetIsReceiver(b bool) *ParamStoreDataUpdateOne {
	psduo.mutation.SetIsReceiver(b)
	return psduo
}

// SetNillableIsReceiver sets the "isReceiver" field if the given value is not nil.
func (psduo *ParamStoreDataUpdateOne) SetNillableIsReceiver(b *bool) *ParamStoreDataUpdateOne {
	if b != nil {
		psduo.SetIsReceiver(*b)
	}
	return psduo
}

// SetBaseId sets the "baseId" field.
func (psduo *ParamStoreDataUpdateOne) SetBaseId(i int64) *ParamStoreDataUpdateOne {
	psduo.mutation.ResetBaseId()
	psduo.mutation.SetBaseId(i)
	return psduo
}

// SetNillableBaseId sets the "baseId" field if the given value is not nil.
func (psduo *ParamStoreDataUpdateOne) SetNillableBaseId(i *int64) *ParamStoreDataUpdateOne {
	if i != nil {
		psduo.SetBaseId(*i)
	}
	return psduo
}

// AddBaseId adds i to the "baseId" field.
func (psduo *ParamStoreDataUpdateOne) AddBaseId(i int64) *ParamStoreDataUpdateOne {
	psduo.mutation.AddBaseId(i)
	return psduo
}

// ClearBaseId clears the value of the "baseId" field.
func (psduo *ParamStoreDataUpdateOne) ClearBaseId() *ParamStoreDataUpdateOne {
	psduo.mutation.ClearBaseId()
	return psduo
}

// Mutation returns the ParamStoreDataMutation object of the builder.
func (psduo *ParamStoreDataUpdateOne) Mutation() *ParamStoreDataMutation {
	return psduo.mutation
}

// Where appends a list predicates to the ParamStoreDataUpdate builder.
func (psduo *ParamStoreDataUpdateOne) Where(ps ...predicate.ParamStoreData) *ParamStoreDataUpdateOne {
	psduo.mutation.Where(ps...)
	return psduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psduo *ParamStoreDataUpdateOne) Select(field string, fields ...string) *ParamStoreDataUpdateOne {
	psduo.fields = append([]string{field}, fields...)
	return psduo
}

// Save executes the query and returns the updated ParamStoreData entity.
func (psduo *ParamStoreDataUpdateOne) Save(ctx context.Context) (*ParamStoreData, error) {
	return withHooks(ctx, psduo.sqlSave, psduo.mutation, psduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psduo *ParamStoreDataUpdateOne) SaveX(ctx context.Context) *ParamStoreData {
	node, err := psduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psduo *ParamStoreDataUpdateOne) Exec(ctx context.Context) error {
	_, err := psduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psduo *ParamStoreDataUpdateOne) ExecX(ctx context.Context) {
	if err := psduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psduo *ParamStoreDataUpdateOne) sqlSave(ctx context.Context) (_node *ParamStoreData, err error) {
	_spec := sqlgraph.NewUpdateSpec(paramstoredata.Table, paramstoredata.Columns, sqlgraph.NewFieldSpec(paramstoredata.FieldID, field.TypeInt64))
	id, ok := psduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "ParamStoreData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paramstoredata.FieldID)
		for _, f := range fields {
			if !paramstoredata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != paramstoredata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psduo.mutation.TraceId(); ok {
		_spec.SetField(paramstoredata.FieldTraceId, field.TypeInt64, value)
	}
	if value, ok := psduo.mutation.AddedTraceId(); ok {
		_spec.AddField(paramstoredata.FieldTraceId, field.TypeInt64, value)
	}
	if value, ok := psduo.mutation.Position(); ok {
		_spec.SetField(paramstoredata.FieldPosition, field.TypeInt, value)
	}
	if value, ok := psduo.mutation.AddedPosition(); ok {
		_spec.AddField(paramstoredata.FieldPosition, field.TypeInt, value)
	}
	if value, ok := psduo.mutation.Data(); ok {
		_spec.SetField(paramstoredata.FieldData, field.TypeString, value)
	}
	if value, ok := psduo.mutation.IsReceiver(); ok {
		_spec.SetField(paramstoredata.FieldIsReceiver, field.TypeBool, value)
	}
	if value, ok := psduo.mutation.BaseId(); ok {
		_spec.SetField(paramstoredata.FieldBaseId, field.TypeInt64, value)
	}
	if value, ok := psduo.mutation.AddedBaseId(); ok {
		_spec.AddField(paramstoredata.FieldBaseId, field.TypeInt64, value)
	}
	if psduo.mutation.BaseIdCleared() {
		_spec.ClearField(paramstoredata.FieldBaseId, field.TypeInt64)
	}
	_node = &ParamStoreData{config: psduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paramstoredata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psduo.mutation.done = true
	return _node, nil
}
