// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/goroutinetrace"
)

// GoroutineTrace is the model entity for the GoroutineTrace schema.
type GoroutineTrace struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OriginGid holds the value of the "originGid" field.
	OriginGid uint64 `json:"originGid,omitempty"`
	// TimeCost holds the value of the "timeCost" field.
	TimeCost string `json:"timeCost,omitempty"`
	// CreateTime holds the value of the "createTime" field.
	CreateTime string `json:"createTime,omitempty"`
	// IsFinished holds the value of the "isFinished" field.
	IsFinished int `json:"isFinished,omitempty"`
	// InitFuncName holds the value of the "initFuncName" field.
	InitFuncName string `json:"initFuncName,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoroutineTrace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goroutinetrace.FieldID, goroutinetrace.FieldOriginGid, goroutinetrace.FieldIsFinished:
			values[i] = new(sql.NullInt64)
		case goroutinetrace.FieldTimeCost, goroutinetrace.FieldCreateTime, goroutinetrace.FieldInitFuncName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoroutineTrace fields.
func (gt *GoroutineTrace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goroutinetrace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gt.ID = int64(value.Int64)
		case goroutinetrace.FieldOriginGid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field originGid", values[i])
			} else if value.Valid {
				gt.OriginGid = uint64(value.Int64)
			}
		case goroutinetrace.FieldTimeCost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeCost", values[i])
			} else if value.Valid {
				gt.TimeCost = value.String
			}
		case goroutinetrace.FieldCreateTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				gt.CreateTime = value.String
			}
		case goroutinetrace.FieldIsFinished:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field isFinished", values[i])
			} else if value.Valid {
				gt.IsFinished = int(value.Int64)
			}
		case goroutinetrace.FieldInitFuncName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field initFuncName", values[i])
			} else if value.Valid {
				gt.InitFuncName = value.String
			}
		default:
			gt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoroutineTrace.
// This includes values selected through modifiers, order, etc.
func (gt *GoroutineTrace) Value(name string) (ent.Value, error) {
	return gt.selectValues.Get(name)
}

// Update returns a builder for updating this GoroutineTrace.
// Note that you need to call GoroutineTrace.Unwrap() before calling this method if this GoroutineTrace
// was returned from a transaction, and the transaction was committed or rolled back.
func (gt *GoroutineTrace) Update() *GoroutineTraceUpdateOne {
	return NewGoroutineTraceClient(gt.config).UpdateOne(gt)
}

// Unwrap unwraps the GoroutineTrace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gt *GoroutineTrace) Unwrap() *GoroutineTrace {
	_tx, ok := gt.config.driver.(*txDriver)
	if !ok {
		panic("gen: GoroutineTrace is not a transactional entity")
	}
	gt.config.driver = _tx.drv
	return gt
}

// String implements the fmt.Stringer.
func (gt *GoroutineTrace) String() string {
	var builder strings.Builder
	builder.WriteString("GoroutineTrace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gt.ID))
	builder.WriteString("originGid=")
	builder.WriteString(fmt.Sprintf("%v", gt.OriginGid))
	builder.WriteString(", ")
	builder.WriteString("timeCost=")
	builder.WriteString(gt.TimeCost)
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(gt.CreateTime)
	builder.WriteString(", ")
	builder.WriteString("isFinished=")
	builder.WriteString(fmt.Sprintf("%v", gt.IsFinished))
	builder.WriteString(", ")
	builder.WriteString("initFuncName=")
	builder.WriteString(gt.InitFuncName)
	builder.WriteByte(')')
	return builder.String()
}

// GoroutineTraces is a parsable slice of GoroutineTrace.
type GoroutineTraces []*GoroutineTrace
