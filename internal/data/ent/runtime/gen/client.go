// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/goroutinetrace"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/tracedata"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GoroutineTrace is the client for interacting with the GoroutineTrace builders.
	GoroutineTrace *GoroutineTraceClient
	// TraceData is the client for interacting with the TraceData builders.
	TraceData *TraceDataClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GoroutineTrace = NewGoroutineTraceClient(c.config)
	c.TraceData = NewTraceDataClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("gen: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("gen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		GoroutineTrace: NewGoroutineTraceClient(cfg),
		TraceData:      NewTraceDataClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		GoroutineTrace: NewGoroutineTraceClient(cfg),
		TraceData:      NewTraceDataClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GoroutineTrace.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GoroutineTrace.Use(hooks...)
	c.TraceData.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.GoroutineTrace.Intercept(interceptors...)
	c.TraceData.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GoroutineTraceMutation:
		return c.GoroutineTrace.mutate(ctx, m)
	case *TraceDataMutation:
		return c.TraceData.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("gen: unknown mutation type %T", m)
	}
}

// GoroutineTraceClient is a client for the GoroutineTrace schema.
type GoroutineTraceClient struct {
	config
}

// NewGoroutineTraceClient returns a client for the GoroutineTrace from the given config.
func NewGoroutineTraceClient(c config) *GoroutineTraceClient {
	return &GoroutineTraceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goroutinetrace.Hooks(f(g(h())))`.
func (c *GoroutineTraceClient) Use(hooks ...Hook) {
	c.hooks.GoroutineTrace = append(c.hooks.GoroutineTrace, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goroutinetrace.Intercept(f(g(h())))`.
func (c *GoroutineTraceClient) Intercept(interceptors ...Interceptor) {
	c.inters.GoroutineTrace = append(c.inters.GoroutineTrace, interceptors...)
}

// Create returns a builder for creating a GoroutineTrace entity.
func (c *GoroutineTraceClient) Create() *GoroutineTraceCreate {
	mutation := newGoroutineTraceMutation(c.config, OpCreate)
	return &GoroutineTraceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoroutineTrace entities.
func (c *GoroutineTraceClient) CreateBulk(builders ...*GoroutineTraceCreate) *GoroutineTraceCreateBulk {
	return &GoroutineTraceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GoroutineTraceClient) MapCreateBulk(slice any, setFunc func(*GoroutineTraceCreate, int)) *GoroutineTraceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GoroutineTraceCreateBulk{err: fmt.Errorf("calling to GoroutineTraceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GoroutineTraceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GoroutineTraceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoroutineTrace.
func (c *GoroutineTraceClient) Update() *GoroutineTraceUpdate {
	mutation := newGoroutineTraceMutation(c.config, OpUpdate)
	return &GoroutineTraceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoroutineTraceClient) UpdateOne(gt *GoroutineTrace) *GoroutineTraceUpdateOne {
	mutation := newGoroutineTraceMutation(c.config, OpUpdateOne, withGoroutineTrace(gt))
	return &GoroutineTraceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoroutineTraceClient) UpdateOneID(id int64) *GoroutineTraceUpdateOne {
	mutation := newGoroutineTraceMutation(c.config, OpUpdateOne, withGoroutineTraceID(id))
	return &GoroutineTraceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoroutineTrace.
func (c *GoroutineTraceClient) Delete() *GoroutineTraceDelete {
	mutation := newGoroutineTraceMutation(c.config, OpDelete)
	return &GoroutineTraceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoroutineTraceClient) DeleteOne(gt *GoroutineTrace) *GoroutineTraceDeleteOne {
	return c.DeleteOneID(gt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoroutineTraceClient) DeleteOneID(id int64) *GoroutineTraceDeleteOne {
	builder := c.Delete().Where(goroutinetrace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoroutineTraceDeleteOne{builder}
}

// Query returns a query builder for GoroutineTrace.
func (c *GoroutineTraceClient) Query() *GoroutineTraceQuery {
	return &GoroutineTraceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoroutineTrace},
		inters: c.Interceptors(),
	}
}

// Get returns a GoroutineTrace entity by its id.
func (c *GoroutineTraceClient) Get(ctx context.Context, id int64) (*GoroutineTrace, error) {
	return c.Query().Where(goroutinetrace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoroutineTraceClient) GetX(ctx context.Context, id int64) *GoroutineTrace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoroutineTraceClient) Hooks() []Hook {
	return c.hooks.GoroutineTrace
}

// Interceptors returns the client interceptors.
func (c *GoroutineTraceClient) Interceptors() []Interceptor {
	return c.inters.GoroutineTrace
}

func (c *GoroutineTraceClient) mutate(ctx context.Context, m *GoroutineTraceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoroutineTraceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoroutineTraceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoroutineTraceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoroutineTraceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown GoroutineTrace mutation op: %q", m.Op())
	}
}

// TraceDataClient is a client for the TraceData schema.
type TraceDataClient struct {
	config
}

// NewTraceDataClient returns a client for the TraceData from the given config.
func NewTraceDataClient(c config) *TraceDataClient {
	return &TraceDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tracedata.Hooks(f(g(h())))`.
func (c *TraceDataClient) Use(hooks ...Hook) {
	c.hooks.TraceData = append(c.hooks.TraceData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tracedata.Intercept(f(g(h())))`.
func (c *TraceDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.TraceData = append(c.inters.TraceData, interceptors...)
}

// Create returns a builder for creating a TraceData entity.
func (c *TraceDataClient) Create() *TraceDataCreate {
	mutation := newTraceDataMutation(c.config, OpCreate)
	return &TraceDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TraceData entities.
func (c *TraceDataClient) CreateBulk(builders ...*TraceDataCreate) *TraceDataCreateBulk {
	return &TraceDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TraceDataClient) MapCreateBulk(slice any, setFunc func(*TraceDataCreate, int)) *TraceDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TraceDataCreateBulk{err: fmt.Errorf("calling to TraceDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TraceDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TraceDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TraceData.
func (c *TraceDataClient) Update() *TraceDataUpdate {
	mutation := newTraceDataMutation(c.config, OpUpdate)
	return &TraceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TraceDataClient) UpdateOne(td *TraceData) *TraceDataUpdateOne {
	mutation := newTraceDataMutation(c.config, OpUpdateOne, withTraceData(td))
	return &TraceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TraceDataClient) UpdateOneID(id int) *TraceDataUpdateOne {
	mutation := newTraceDataMutation(c.config, OpUpdateOne, withTraceDataID(id))
	return &TraceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TraceData.
func (c *TraceDataClient) Delete() *TraceDataDelete {
	mutation := newTraceDataMutation(c.config, OpDelete)
	return &TraceDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TraceDataClient) DeleteOne(td *TraceData) *TraceDataDeleteOne {
	return c.DeleteOneID(td.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TraceDataClient) DeleteOneID(id int) *TraceDataDeleteOne {
	builder := c.Delete().Where(tracedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TraceDataDeleteOne{builder}
}

// Query returns a query builder for TraceData.
func (c *TraceDataClient) Query() *TraceDataQuery {
	return &TraceDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTraceData},
		inters: c.Interceptors(),
	}
}

// Get returns a TraceData entity by its id.
func (c *TraceDataClient) Get(ctx context.Context, id int) (*TraceData, error) {
	return c.Query().Where(tracedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TraceDataClient) GetX(ctx context.Context, id int) *TraceData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TraceDataClient) Hooks() []Hook {
	return c.hooks.TraceData
}

// Interceptors returns the client interceptors.
func (c *TraceDataClient) Interceptors() []Interceptor {
	return c.inters.TraceData
}

func (c *TraceDataClient) mutate(ctx context.Context, m *TraceDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TraceDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TraceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TraceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TraceDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("gen: unknown TraceData mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		GoroutineTrace, TraceData []ent.Hook
	}
	inters struct {
		GoroutineTrace, TraceData []ent.Interceptor
	}
)
