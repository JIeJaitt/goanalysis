// Code generated by ent, DO NOT EDIT.

package gen

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/functrace"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/tracedata"
)

// TraceData is the model entity for the TraceData schema.
type TraceData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gid holds the value of the "gid" field.
	Gid uint64 `json:"gid,omitempty"`
	// Indent holds the value of the "indent" field.
	Indent int `json:"indent,omitempty"`
	// Params holds the value of the "params" field.
	Params []functrace.TraceParams `json:"params,omitempty"`
	// TimeCost holds the value of the "timeCost" field.
	TimeCost string `json:"timeCost,omitempty"`
	// ParentId holds the value of the "parentId" field.
	ParentId int64 `json:"parentId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt string `json:"createdAt,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq          string `json:"seq,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TraceData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tracedata.FieldParams:
			values[i] = new([]byte)
		case tracedata.FieldID, tracedata.FieldGid, tracedata.FieldIndent, tracedata.FieldParentId:
			values[i] = new(sql.NullInt64)
		case tracedata.FieldName, tracedata.FieldTimeCost, tracedata.FieldCreatedAt, tracedata.FieldSeq:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TraceData fields.
func (td *TraceData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tracedata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case tracedata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				td.Name = value.String
			}
		case tracedata.FieldGid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gid", values[i])
			} else if value.Valid {
				td.Gid = uint64(value.Int64)
			}
		case tracedata.FieldIndent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field indent", values[i])
			} else if value.Valid {
				td.Indent = int(value.Int64)
			}
		case tracedata.FieldParams:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &td.Params); err != nil {
					return fmt.Errorf("unmarshal field params: %w", err)
				}
			}
		case tracedata.FieldTimeCost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timeCost", values[i])
			} else if value.Valid {
				td.TimeCost = value.String
			}
		case tracedata.FieldParentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parentId", values[i])
			} else if value.Valid {
				td.ParentId = value.Int64
			}
		case tracedata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				td.CreatedAt = value.String
			}
		case tracedata.FieldSeq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				td.Seq = value.String
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TraceData.
// This includes values selected through modifiers, order, etc.
func (td *TraceData) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// Update returns a builder for updating this TraceData.
// Note that you need to call TraceData.Unwrap() before calling this method if this TraceData
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TraceData) Update() *TraceDataUpdateOne {
	return NewTraceDataClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TraceData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TraceData) Unwrap() *TraceData {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("gen: TraceData is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TraceData) String() string {
	var builder strings.Builder
	builder.WriteString("TraceData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("name=")
	builder.WriteString(td.Name)
	builder.WriteString(", ")
	builder.WriteString("gid=")
	builder.WriteString(fmt.Sprintf("%v", td.Gid))
	builder.WriteString(", ")
	builder.WriteString("indent=")
	builder.WriteString(fmt.Sprintf("%v", td.Indent))
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(fmt.Sprintf("%v", td.Params))
	builder.WriteString(", ")
	builder.WriteString("timeCost=")
	builder.WriteString(td.TimeCost)
	builder.WriteString(", ")
	builder.WriteString("parentId=")
	builder.WriteString(fmt.Sprintf("%v", td.ParentId))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(td.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(td.Seq)
	builder.WriteByte(')')
	return builder.String()
}

// TraceDataSlice is a parsable slice of TraceData.
type TraceDataSlice []*TraceData
