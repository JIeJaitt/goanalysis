// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/runtime/gen/paramstoredata"
)

// ParamStoreData is the model entity for the ParamStoreData schema.
type ParamStoreData struct {
	config `json:"-"`
	// ID of the ent.
	// 唯一标识符
	ID int64 `json:"id,omitempty"`
	// 关联的TraceData ID
	TraceId int64 `json:"traceId,omitempty"`
	// 参数位置
	Position int `json:"position,omitempty"`
	// 参数JSON数据
	Data []byte `json:"data,omitempty"`
	// 是否为接收者参数
	IsReceiver bool `json:"isReceiver,omitempty"`
	// 基础参数ID（自关联，当参数为增量存储时使用）
	BaseId       *int64 `json:"baseId,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParamStoreData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paramstoredata.FieldData:
			values[i] = new([]byte)
		case paramstoredata.FieldIsReceiver:
			values[i] = new(sql.NullBool)
		case paramstoredata.FieldID, paramstoredata.FieldTraceId, paramstoredata.FieldPosition, paramstoredata.FieldBaseId:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParamStoreData fields.
func (psd *ParamStoreData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paramstoredata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			psd.ID = int64(value.Int64)
		case paramstoredata.FieldTraceId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field traceId", values[i])
			} else if value.Valid {
				psd.TraceId = value.Int64
			}
		case paramstoredata.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				psd.Position = int(value.Int64)
			}
		case paramstoredata.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				psd.Data = *value
			}
		case paramstoredata.FieldIsReceiver:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isReceiver", values[i])
			} else if value.Valid {
				psd.IsReceiver = value.Bool
			}
		case paramstoredata.FieldBaseId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field baseId", values[i])
			} else if value.Valid {
				psd.BaseId = new(int64)
				*psd.BaseId = value.Int64
			}
		default:
			psd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ParamStoreData.
// This includes values selected through modifiers, order, etc.
func (psd *ParamStoreData) Value(name string) (ent.Value, error) {
	return psd.selectValues.Get(name)
}

// Update returns a builder for updating this ParamStoreData.
// Note that you need to call ParamStoreData.Unwrap() before calling this method if this ParamStoreData
// was returned from a transaction, and the transaction was committed or rolled back.
func (psd *ParamStoreData) Update() *ParamStoreDataUpdateOne {
	return NewParamStoreDataClient(psd.config).UpdateOne(psd)
}

// Unwrap unwraps the ParamStoreData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psd *ParamStoreData) Unwrap() *ParamStoreData {
	_tx, ok := psd.config.driver.(*txDriver)
	if !ok {
		panic("gen: ParamStoreData is not a transactional entity")
	}
	psd.config.driver = _tx.drv
	return psd
}

// String implements the fmt.Stringer.
func (psd *ParamStoreData) String() string {
	var builder strings.Builder
	builder.WriteString("ParamStoreData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", psd.ID))
	builder.WriteString("traceId=")
	builder.WriteString(fmt.Sprintf("%v", psd.TraceId))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", psd.Position))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", psd.Data))
	builder.WriteString(", ")
	builder.WriteString("isReceiver=")
	builder.WriteString(fmt.Sprintf("%v", psd.IsReceiver))
	builder.WriteString(", ")
	if v := psd.BaseId; v != nil {
		builder.WriteString("baseId=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ParamStoreDataSlice is a parsable slice of ParamStoreData.
type ParamStoreDataSlice []*ParamStoreData
