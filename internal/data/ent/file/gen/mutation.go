// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/fileinfo"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFileInfo = "FileInfo"
)

// FileInfoMutation represents an operation that mutates the FileInfo nodes in the graph.
type FileInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	file_name     *string
	file_path     *string
	file_type     *string
	file_size     *int64
	addfile_size  *int64
	content_type  *string
	upload_time   *time.Time
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FileInfo, error)
	predicates    []predicate.FileInfo
}

var _ ent.Mutation = (*FileInfoMutation)(nil)

// fileinfoOption allows management of the mutation configuration using functional options.
type fileinfoOption func(*FileInfoMutation)

// newFileInfoMutation creates new mutation for the FileInfo entity.
func newFileInfoMutation(c config, op Op, opts ...fileinfoOption) *FileInfoMutation {
	m := &FileInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeFileInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileInfoID sets the ID field of the mutation.
func withFileInfoID(id int64) fileinfoOption {
	return func(m *FileInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *FileInfo
		)
		m.oldValue = func(ctx context.Context) (*FileInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileInfo sets the old FileInfo of the mutation.
func withFileInfo(node *FileInfo) fileinfoOption {
	return func(m *FileInfoMutation) {
		m.oldValue = func(context.Context) (*FileInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FileInfo entities.
func (m *FileInfoMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileInfoMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileInfoMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FileInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFileName sets the "file_name" field.
func (m *FileInfoMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *FileInfoMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *FileInfoMutation) ResetFileName() {
	m.file_name = nil
}

// SetFilePath sets the "file_path" field.
func (m *FileInfoMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *FileInfoMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *FileInfoMutation) ResetFilePath() {
	m.file_path = nil
}

// SetFileType sets the "file_type" field.
func (m *FileInfoMutation) SetFileType(s string) {
	m.file_type = &s
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *FileInfoMutation) FileType() (r string, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldFileType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ResetFileType resets all changes to the "file_type" field.
func (m *FileInfoMutation) ResetFileType() {
	m.file_type = nil
}

// SetFileSize sets the "file_size" field.
func (m *FileInfoMutation) SetFileSize(i int64) {
	m.file_size = &i
	m.addfile_size = nil
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *FileInfoMutation) FileSize() (r int64, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldFileSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// AddFileSize adds i to the "file_size" field.
func (m *FileInfoMutation) AddFileSize(i int64) {
	if m.addfile_size != nil {
		*m.addfile_size += i
	} else {
		m.addfile_size = &i
	}
}

// AddedFileSize returns the value that was added to the "file_size" field in this mutation.
func (m *FileInfoMutation) AddedFileSize() (r int64, exists bool) {
	v := m.addfile_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *FileInfoMutation) ResetFileSize() {
	m.file_size = nil
	m.addfile_size = nil
}

// SetContentType sets the "content_type" field.
func (m *FileInfoMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *FileInfoMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *FileInfoMutation) ResetContentType() {
	m.content_type = nil
}

// SetUploadTime sets the "upload_time" field.
func (m *FileInfoMutation) SetUploadTime(t time.Time) {
	m.upload_time = &t
}

// UploadTime returns the value of the "upload_time" field in the mutation.
func (m *FileInfoMutation) UploadTime() (r time.Time, exists bool) {
	v := m.upload_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadTime returns the old "upload_time" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldUploadTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadTime: %w", err)
	}
	return oldValue.UploadTime, nil
}

// ResetUploadTime resets all changes to the "upload_time" field.
func (m *FileInfoMutation) ResetUploadTime() {
	m.upload_time = nil
}

// SetDescription sets the "description" field.
func (m *FileInfoMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FileInfoMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FileInfo entity.
// If the FileInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileInfoMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *FileInfoMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[fileinfo.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *FileInfoMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[fileinfo.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *FileInfoMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, fileinfo.FieldDescription)
}

// Where appends a list predicates to the FileInfoMutation builder.
func (m *FileInfoMutation) Where(ps ...predicate.FileInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FileInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FileInfo).
func (m *FileInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileInfoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.file_name != nil {
		fields = append(fields, fileinfo.FieldFileName)
	}
	if m.file_path != nil {
		fields = append(fields, fileinfo.FieldFilePath)
	}
	if m.file_type != nil {
		fields = append(fields, fileinfo.FieldFileType)
	}
	if m.file_size != nil {
		fields = append(fields, fileinfo.FieldFileSize)
	}
	if m.content_type != nil {
		fields = append(fields, fileinfo.FieldContentType)
	}
	if m.upload_time != nil {
		fields = append(fields, fileinfo.FieldUploadTime)
	}
	if m.description != nil {
		fields = append(fields, fileinfo.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fileinfo.FieldFileName:
		return m.FileName()
	case fileinfo.FieldFilePath:
		return m.FilePath()
	case fileinfo.FieldFileType:
		return m.FileType()
	case fileinfo.FieldFileSize:
		return m.FileSize()
	case fileinfo.FieldContentType:
		return m.ContentType()
	case fileinfo.FieldUploadTime:
		return m.UploadTime()
	case fileinfo.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fileinfo.FieldFileName:
		return m.OldFileName(ctx)
	case fileinfo.FieldFilePath:
		return m.OldFilePath(ctx)
	case fileinfo.FieldFileType:
		return m.OldFileType(ctx)
	case fileinfo.FieldFileSize:
		return m.OldFileSize(ctx)
	case fileinfo.FieldContentType:
		return m.OldContentType(ctx)
	case fileinfo.FieldUploadTime:
		return m.OldUploadTime(ctx)
	case fileinfo.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown FileInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fileinfo.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case fileinfo.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case fileinfo.FieldFileType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	case fileinfo.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	case fileinfo.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case fileinfo.FieldUploadTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadTime(v)
		return nil
	case fileinfo.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown FileInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileInfoMutation) AddedFields() []string {
	var fields []string
	if m.addfile_size != nil {
		fields = append(fields, fileinfo.FieldFileSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fileinfo.FieldFileSize:
		return m.AddedFileSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fileinfo.FieldFileSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileSize(v)
		return nil
	}
	return fmt.Errorf("unknown FileInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fileinfo.FieldDescription) {
		fields = append(fields, fileinfo.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileInfoMutation) ClearField(name string) error {
	switch name {
	case fileinfo.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown FileInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileInfoMutation) ResetField(name string) error {
	switch name {
	case fileinfo.FieldFileName:
		m.ResetFileName()
		return nil
	case fileinfo.FieldFilePath:
		m.ResetFilePath()
		return nil
	case fileinfo.FieldFileType:
		m.ResetFileType()
		return nil
	case fileinfo.FieldFileSize:
		m.ResetFileSize()
		return nil
	case fileinfo.FieldContentType:
		m.ResetContentType()
		return nil
	case fileinfo.FieldUploadTime:
		m.ResetUploadTime()
		return nil
	case fileinfo.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown FileInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileInfo edge %s", name)
}
