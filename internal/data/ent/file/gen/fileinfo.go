// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/fileinfo"
)

// FileInfo is the model entity for the FileInfo schema.
type FileInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty"`
	// FileType holds the value of the "file_type" field.
	FileType string `json:"file_type,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int64 `json:"file_size,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType string `json:"content_type,omitempty"`
	// UploadTime holds the value of the "upload_time" field.
	UploadTime time.Time `json:"upload_time,omitempty"`
	// Description holds the value of the "description" field.
	Description  string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileinfo.FieldID, fileinfo.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case fileinfo.FieldFileName, fileinfo.FieldFilePath, fileinfo.FieldFileType, fileinfo.FieldContentType, fileinfo.FieldDescription:
			values[i] = new(sql.NullString)
		case fileinfo.FieldUploadTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileInfo fields.
func (fi *FileInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int64(value.Int64)
		case fileinfo.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				fi.FileName = value.String
			}
		case fileinfo.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				fi.FilePath = value.String
			}
		case fileinfo.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				fi.FileType = value.String
			}
		case fileinfo.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				fi.FileSize = value.Int64
			}
		case fileinfo.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				fi.ContentType = value.String
			}
		case fileinfo.FieldUploadTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field upload_time", values[i])
			} else if value.Valid {
				fi.UploadTime = value.Time
			}
		case fileinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				fi.Description = value.String
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileInfo.
// This includes values selected through modifiers, order, etc.
func (fi *FileInfo) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// Update returns a builder for updating this FileInfo.
// Note that you need to call FileInfo.Unwrap() before calling this method if this FileInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FileInfo) Update() *FileInfoUpdateOne {
	return NewFileInfoClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FileInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FileInfo) Unwrap() *FileInfo {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("gen: FileInfo is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FileInfo) String() string {
	var builder strings.Builder
	builder.WriteString("FileInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("file_name=")
	builder.WriteString(fi.FileName)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(fi.FilePath)
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(fi.FileType)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", fi.FileSize))
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(fi.ContentType)
	builder.WriteString(", ")
	builder.WriteString("upload_time=")
	builder.WriteString(fi.UploadTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fi.Description)
	builder.WriteByte(')')
	return builder.String()
}

// FileInfos is a parsable slice of FileInfo.
type FileInfos []*FileInfo
