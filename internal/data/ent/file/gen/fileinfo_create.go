// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/fileinfo"
)

// FileInfoCreate is the builder for creating a FileInfo entity.
type FileInfoCreate struct {
	config
	mutation *FileInfoMutation
	hooks    []Hook
}

// SetFileName sets the "file_name" field.
func (fic *FileInfoCreate) SetFileName(s string) *FileInfoCreate {
	fic.mutation.SetFileName(s)
	return fic
}

// SetFilePath sets the "file_path" field.
func (fic *FileInfoCreate) SetFilePath(s string) *FileInfoCreate {
	fic.mutation.SetFilePath(s)
	return fic
}

// SetFileType sets the "file_type" field.
func (fic *FileInfoCreate) SetFileType(s string) *FileInfoCreate {
	fic.mutation.SetFileType(s)
	return fic
}

// SetFileSize sets the "file_size" field.
func (fic *FileInfoCreate) SetFileSize(i int64) *FileInfoCreate {
	fic.mutation.SetFileSize(i)
	return fic
}

// SetContentType sets the "content_type" field.
func (fic *FileInfoCreate) SetContentType(s string) *FileInfoCreate {
	fic.mutation.SetContentType(s)
	return fic
}

// SetUploadTime sets the "upload_time" field.
func (fic *FileInfoCreate) SetUploadTime(t time.Time) *FileInfoCreate {
	fic.mutation.SetUploadTime(t)
	return fic
}

// SetNillableUploadTime sets the "upload_time" field if the given value is not nil.
func (fic *FileInfoCreate) SetNillableUploadTime(t *time.Time) *FileInfoCreate {
	if t != nil {
		fic.SetUploadTime(*t)
	}
	return fic
}

// SetDescription sets the "description" field.
func (fic *FileInfoCreate) SetDescription(s string) *FileInfoCreate {
	fic.mutation.SetDescription(s)
	return fic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fic *FileInfoCreate) SetNillableDescription(s *string) *FileInfoCreate {
	if s != nil {
		fic.SetDescription(*s)
	}
	return fic
}

// SetID sets the "id" field.
func (fic *FileInfoCreate) SetID(i int64) *FileInfoCreate {
	fic.mutation.SetID(i)
	return fic
}

// Mutation returns the FileInfoMutation object of the builder.
func (fic *FileInfoCreate) Mutation() *FileInfoMutation {
	return fic.mutation
}

// Save creates the FileInfo in the database.
func (fic *FileInfoCreate) Save(ctx context.Context) (*FileInfo, error) {
	fic.defaults()
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FileInfoCreate) SaveX(ctx context.Context) *FileInfo {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FileInfoCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FileInfoCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FileInfoCreate) defaults() {
	if _, ok := fic.mutation.UploadTime(); !ok {
		v := fileinfo.DefaultUploadTime()
		fic.mutation.SetUploadTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FileInfoCreate) check() error {
	if _, ok := fic.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`gen: missing required field "FileInfo.file_name"`)}
	}
	if v, ok := fic.mutation.FileName(); ok {
		if err := fileinfo.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_name": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`gen: missing required field "FileInfo.file_path"`)}
	}
	if v, ok := fic.mutation.FilePath(); ok {
		if err := fileinfo.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_path": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`gen: missing required field "FileInfo.file_type"`)}
	}
	if v, ok := fic.mutation.FileType(); ok {
		if err := fileinfo.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_type": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`gen: missing required field "FileInfo.file_size"`)}
	}
	if v, ok := fic.mutation.FileSize(); ok {
		if err := fileinfo.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_size": %w`, err)}
		}
	}
	if _, ok := fic.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`gen: missing required field "FileInfo.content_type"`)}
	}
	if v, ok := fic.mutation.ContentType(); ok {
		if err := fileinfo.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`gen: validator failed for field "FileInfo.content_type": %w`, err)}
		}
	}
	if _, ok := fic.mutation.UploadTime(); !ok {
		return &ValidationError{Name: "upload_time", err: errors.New(`gen: missing required field "FileInfo.upload_time"`)}
	}
	return nil
}

func (fic *FileInfoCreate) sqlSave(ctx context.Context) (*FileInfo, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FileInfoCreate) createSpec() (*FileInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &FileInfo{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(fileinfo.Table, sqlgraph.NewFieldSpec(fileinfo.FieldID, field.TypeInt64))
	)
	if id, ok := fic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fic.mutation.FileName(); ok {
		_spec.SetField(fileinfo.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := fic.mutation.FilePath(); ok {
		_spec.SetField(fileinfo.FieldFilePath, field.TypeString, value)
		_node.FilePath = value
	}
	if value, ok := fic.mutation.FileType(); ok {
		_spec.SetField(fileinfo.FieldFileType, field.TypeString, value)
		_node.FileType = value
	}
	if value, ok := fic.mutation.FileSize(); ok {
		_spec.SetField(fileinfo.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := fic.mutation.ContentType(); ok {
		_spec.SetField(fileinfo.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := fic.mutation.UploadTime(); ok {
		_spec.SetField(fileinfo.FieldUploadTime, field.TypeTime, value)
		_node.UploadTime = value
	}
	if value, ok := fic.mutation.Description(); ok {
		_spec.SetField(fileinfo.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// FileInfoCreateBulk is the builder for creating many FileInfo entities in bulk.
type FileInfoCreateBulk struct {
	config
	err      error
	builders []*FileInfoCreate
}

// Save creates the FileInfo entities in the database.
func (ficb *FileInfoCreateBulk) Save(ctx context.Context) ([]*FileInfo, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FileInfo, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FileInfoCreateBulk) SaveX(ctx context.Context) []*FileInfo {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FileInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FileInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
