// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/fileinfo"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/predicate"
)

// FileInfoUpdate is the builder for updating FileInfo entities.
type FileInfoUpdate struct {
	config
	hooks    []Hook
	mutation *FileInfoMutation
}

// Where appends a list predicates to the FileInfoUpdate builder.
func (fiu *FileInfoUpdate) Where(ps ...predicate.FileInfo) *FileInfoUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetFileName sets the "file_name" field.
func (fiu *FileInfoUpdate) SetFileName(s string) *FileInfoUpdate {
	fiu.mutation.SetFileName(s)
	return fiu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableFileName(s *string) *FileInfoUpdate {
	if s != nil {
		fiu.SetFileName(*s)
	}
	return fiu
}

// SetFilePath sets the "file_path" field.
func (fiu *FileInfoUpdate) SetFilePath(s string) *FileInfoUpdate {
	fiu.mutation.SetFilePath(s)
	return fiu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableFilePath(s *string) *FileInfoUpdate {
	if s != nil {
		fiu.SetFilePath(*s)
	}
	return fiu
}

// SetFileType sets the "file_type" field.
func (fiu *FileInfoUpdate) SetFileType(s string) *FileInfoUpdate {
	fiu.mutation.SetFileType(s)
	return fiu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableFileType(s *string) *FileInfoUpdate {
	if s != nil {
		fiu.SetFileType(*s)
	}
	return fiu
}

// SetFileSize sets the "file_size" field.
func (fiu *FileInfoUpdate) SetFileSize(i int64) *FileInfoUpdate {
	fiu.mutation.ResetFileSize()
	fiu.mutation.SetFileSize(i)
	return fiu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableFileSize(i *int64) *FileInfoUpdate {
	if i != nil {
		fiu.SetFileSize(*i)
	}
	return fiu
}

// AddFileSize adds i to the "file_size" field.
func (fiu *FileInfoUpdate) AddFileSize(i int64) *FileInfoUpdate {
	fiu.mutation.AddFileSize(i)
	return fiu
}

// SetContentType sets the "content_type" field.
func (fiu *FileInfoUpdate) SetContentType(s string) *FileInfoUpdate {
	fiu.mutation.SetContentType(s)
	return fiu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableContentType(s *string) *FileInfoUpdate {
	if s != nil {
		fiu.SetContentType(*s)
	}
	return fiu
}

// SetUploadTime sets the "upload_time" field.
func (fiu *FileInfoUpdate) SetUploadTime(t time.Time) *FileInfoUpdate {
	fiu.mutation.SetUploadTime(t)
	return fiu
}

// SetNillableUploadTime sets the "upload_time" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableUploadTime(t *time.Time) *FileInfoUpdate {
	if t != nil {
		fiu.SetUploadTime(*t)
	}
	return fiu
}

// SetDescription sets the "description" field.
func (fiu *FileInfoUpdate) SetDescription(s string) *FileInfoUpdate {
	fiu.mutation.SetDescription(s)
	return fiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fiu *FileInfoUpdate) SetNillableDescription(s *string) *FileInfoUpdate {
	if s != nil {
		fiu.SetDescription(*s)
	}
	return fiu
}

// ClearDescription clears the value of the "description" field.
func (fiu *FileInfoUpdate) ClearDescription() *FileInfoUpdate {
	fiu.mutation.ClearDescription()
	return fiu
}

// Mutation returns the FileInfoMutation object of the builder.
func (fiu *FileInfoUpdate) Mutation() *FileInfoMutation {
	return fiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FileInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FileInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FileInfoUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FileInfoUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FileInfoUpdate) check() error {
	if v, ok := fiu.mutation.FileName(); ok {
		if err := fileinfo.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_name": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.FilePath(); ok {
		if err := fileinfo.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_path": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.FileType(); ok {
		if err := fileinfo.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_type": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.FileSize(); ok {
		if err := fileinfo.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_size": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.ContentType(); ok {
		if err := fileinfo.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`gen: validator failed for field "FileInfo.content_type": %w`, err)}
		}
	}
	return nil
}

func (fiu *FileInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fileinfo.Table, fileinfo.Columns, sqlgraph.NewFieldSpec(fileinfo.FieldID, field.TypeInt64))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.FileName(); ok {
		_spec.SetField(fileinfo.FieldFileName, field.TypeString, value)
	}
	if value, ok := fiu.mutation.FilePath(); ok {
		_spec.SetField(fileinfo.FieldFilePath, field.TypeString, value)
	}
	if value, ok := fiu.mutation.FileType(); ok {
		_spec.SetField(fileinfo.FieldFileType, field.TypeString, value)
	}
	if value, ok := fiu.mutation.FileSize(); ok {
		_spec.SetField(fileinfo.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.AddedFileSize(); ok {
		_spec.AddField(fileinfo.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.ContentType(); ok {
		_spec.SetField(fileinfo.FieldContentType, field.TypeString, value)
	}
	if value, ok := fiu.mutation.UploadTime(); ok {
		_spec.SetField(fileinfo.FieldUploadTime, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.Description(); ok {
		_spec.SetField(fileinfo.FieldDescription, field.TypeString, value)
	}
	if fiu.mutation.DescriptionCleared() {
		_spec.ClearField(fileinfo.FieldDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FileInfoUpdateOne is the builder for updating a single FileInfo entity.
type FileInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileInfoMutation
}

// SetFileName sets the "file_name" field.
func (fiuo *FileInfoUpdateOne) SetFileName(s string) *FileInfoUpdateOne {
	fiuo.mutation.SetFileName(s)
	return fiuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableFileName(s *string) *FileInfoUpdateOne {
	if s != nil {
		fiuo.SetFileName(*s)
	}
	return fiuo
}

// SetFilePath sets the "file_path" field.
func (fiuo *FileInfoUpdateOne) SetFilePath(s string) *FileInfoUpdateOne {
	fiuo.mutation.SetFilePath(s)
	return fiuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableFilePath(s *string) *FileInfoUpdateOne {
	if s != nil {
		fiuo.SetFilePath(*s)
	}
	return fiuo
}

// SetFileType sets the "file_type" field.
func (fiuo *FileInfoUpdateOne) SetFileType(s string) *FileInfoUpdateOne {
	fiuo.mutation.SetFileType(s)
	return fiuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableFileType(s *string) *FileInfoUpdateOne {
	if s != nil {
		fiuo.SetFileType(*s)
	}
	return fiuo
}

// SetFileSize sets the "file_size" field.
func (fiuo *FileInfoUpdateOne) SetFileSize(i int64) *FileInfoUpdateOne {
	fiuo.mutation.ResetFileSize()
	fiuo.mutation.SetFileSize(i)
	return fiuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableFileSize(i *int64) *FileInfoUpdateOne {
	if i != nil {
		fiuo.SetFileSize(*i)
	}
	return fiuo
}

// AddFileSize adds i to the "file_size" field.
func (fiuo *FileInfoUpdateOne) AddFileSize(i int64) *FileInfoUpdateOne {
	fiuo.mutation.AddFileSize(i)
	return fiuo
}

// SetContentType sets the "content_type" field.
func (fiuo *FileInfoUpdateOne) SetContentType(s string) *FileInfoUpdateOne {
	fiuo.mutation.SetContentType(s)
	return fiuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableContentType(s *string) *FileInfoUpdateOne {
	if s != nil {
		fiuo.SetContentType(*s)
	}
	return fiuo
}

// SetUploadTime sets the "upload_time" field.
func (fiuo *FileInfoUpdateOne) SetUploadTime(t time.Time) *FileInfoUpdateOne {
	fiuo.mutation.SetUploadTime(t)
	return fiuo
}

// SetNillableUploadTime sets the "upload_time" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableUploadTime(t *time.Time) *FileInfoUpdateOne {
	if t != nil {
		fiuo.SetUploadTime(*t)
	}
	return fiuo
}

// SetDescription sets the "description" field.
func (fiuo *FileInfoUpdateOne) SetDescription(s string) *FileInfoUpdateOne {
	fiuo.mutation.SetDescription(s)
	return fiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fiuo *FileInfoUpdateOne) SetNillableDescription(s *string) *FileInfoUpdateOne {
	if s != nil {
		fiuo.SetDescription(*s)
	}
	return fiuo
}

// ClearDescription clears the value of the "description" field.
func (fiuo *FileInfoUpdateOne) ClearDescription() *FileInfoUpdateOne {
	fiuo.mutation.ClearDescription()
	return fiuo
}

// Mutation returns the FileInfoMutation object of the builder.
func (fiuo *FileInfoUpdateOne) Mutation() *FileInfoMutation {
	return fiuo.mutation
}

// Where appends a list predicates to the FileInfoUpdate builder.
func (fiuo *FileInfoUpdateOne) Where(ps ...predicate.FileInfo) *FileInfoUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FileInfoUpdateOne) Select(field string, fields ...string) *FileInfoUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FileInfo entity.
func (fiuo *FileInfoUpdateOne) Save(ctx context.Context) (*FileInfo, error) {
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FileInfoUpdateOne) SaveX(ctx context.Context) *FileInfo {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FileInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FileInfoUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FileInfoUpdateOne) check() error {
	if v, ok := fiuo.mutation.FileName(); ok {
		if err := fileinfo.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_name": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.FilePath(); ok {
		if err := fileinfo.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_path": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.FileType(); ok {
		if err := fileinfo.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_type": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.FileSize(); ok {
		if err := fileinfo.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`gen: validator failed for field "FileInfo.file_size": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.ContentType(); ok {
		if err := fileinfo.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`gen: validator failed for field "FileInfo.content_type": %w`, err)}
		}
	}
	return nil
}

func (fiuo *FileInfoUpdateOne) sqlSave(ctx context.Context) (_node *FileInfo, err error) {
	if err := fiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fileinfo.Table, fileinfo.Columns, sqlgraph.NewFieldSpec(fileinfo.FieldID, field.TypeInt64))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "FileInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileinfo.FieldID)
		for _, f := range fields {
			if !fileinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != fileinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.FileName(); ok {
		_spec.SetField(fileinfo.FieldFileName, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.FilePath(); ok {
		_spec.SetField(fileinfo.FieldFilePath, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.FileType(); ok {
		_spec.SetField(fileinfo.FieldFileType, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.FileSize(); ok {
		_spec.SetField(fileinfo.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.AddedFileSize(); ok {
		_spec.AddField(fileinfo.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.ContentType(); ok {
		_spec.SetField(fileinfo.FieldContentType, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.UploadTime(); ok {
		_spec.SetField(fileinfo.FieldUploadTime, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.Description(); ok {
		_spec.SetField(fileinfo.FieldDescription, field.TypeString, value)
	}
	if fiuo.mutation.DescriptionCleared() {
		_spec.ClearField(fileinfo.FieldDescription, field.TypeString)
	}
	_node = &FileInfo{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
