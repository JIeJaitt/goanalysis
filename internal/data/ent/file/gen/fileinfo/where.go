// Code generated by ent, DO NOT EDIT.

package fileinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/file/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldID, id))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFileName, v))
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFilePath, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFileType, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFileSize, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldContentType, v))
}

// UploadTime applies equality check predicate on the "upload_time" field. It's identical to UploadTimeEQ.
func UploadTime(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldUploadTime, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldDescription, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContainsFold(FieldFileName, v))
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContainsFold(FieldFilePath, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldFileType, v))
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContains(FieldFileType, v))
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasPrefix(FieldFileType, v))
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasSuffix(FieldFileType, v))
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEqualFold(FieldFileType, v))
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContainsFold(FieldFileType, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int64) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldFileSize, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContainsFold(FieldContentType, v))
}

// UploadTimeEQ applies the EQ predicate on the "upload_time" field.
func UploadTimeEQ(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldUploadTime, v))
}

// UploadTimeNEQ applies the NEQ predicate on the "upload_time" field.
func UploadTimeNEQ(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldUploadTime, v))
}

// UploadTimeIn applies the In predicate on the "upload_time" field.
func UploadTimeIn(vs ...time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldUploadTime, vs...))
}

// UploadTimeNotIn applies the NotIn predicate on the "upload_time" field.
func UploadTimeNotIn(vs ...time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldUploadTime, vs...))
}

// UploadTimeGT applies the GT predicate on the "upload_time" field.
func UploadTimeGT(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldUploadTime, v))
}

// UploadTimeGTE applies the GTE predicate on the "upload_time" field.
func UploadTimeGTE(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldUploadTime, v))
}

// UploadTimeLT applies the LT predicate on the "upload_time" field.
func UploadTimeLT(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldUploadTime, v))
}

// UploadTimeLTE applies the LTE predicate on the "upload_time" field.
func UploadTimeLTE(v time.Time) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldUploadTime, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.FileInfo {
	return predicate.FileInfo(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.FileInfo {
	return predicate.FileInfo(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.FileInfo {
	return predicate.FileInfo(sql.FieldContainsFold(FieldDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileInfo) predicate.FileInfo {
	return predicate.FileInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileInfo) predicate.FileInfo {
	return predicate.FileInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileInfo) predicate.FileInfo {
	return predicate.FileInfo(sql.NotPredicates(p))
}
