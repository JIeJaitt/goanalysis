// Code generated by ent, DO NOT EDIT.

package fileinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the fileinfo type in the database.
	Label = "file_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldFilePath holds the string denoting the file_path field in the database.
	FieldFilePath = "file_path"
	// FieldFileType holds the string denoting the file_type field in the database.
	FieldFileType = "file_type"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldUploadTime holds the string denoting the upload_time field in the database.
	FieldUploadTime = "upload_time"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// Table holds the table name of the fileinfo in the database.
	Table = "file_infos"
)

// Columns holds all SQL columns for fileinfo fields.
var Columns = []string{
	FieldID,
	FieldFileName,
	FieldFilePath,
	FieldFileType,
	FieldFileSize,
	FieldContentType,
	FieldUploadTime,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FileNameValidator is a validator for the "file_name" field. It is called by the builders before save.
	FileNameValidator func(string) error
	// FilePathValidator is a validator for the "file_path" field. It is called by the builders before save.
	FilePathValidator func(string) error
	// FileTypeValidator is a validator for the "file_type" field. It is called by the builders before save.
	FileTypeValidator func(string) error
	// FileSizeValidator is a validator for the "file_size" field. It is called by the builders before save.
	FileSizeValidator func(int64) error
	// ContentTypeValidator is a validator for the "content_type" field. It is called by the builders before save.
	ContentTypeValidator func(string) error
	// DefaultUploadTime holds the default value on creation for the "upload_time" field.
	DefaultUploadTime func() time.Time
)

// OrderOption defines the ordering options for the FileInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByFilePath orders the results by the file_path field.
func ByFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePath, opts...).ToFunc()
}

// ByFileType orders the results by the file_type field.
func ByFileType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileType, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// ByUploadTime orders the results by the upload_time field.
func ByUploadTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadTime, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}
