// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcnode"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/predicate"
)

// FuncNodeUpdate is the builder for updating FuncNode entities.
type FuncNodeUpdate struct {
	config
	hooks    []Hook
	mutation *FuncNodeMutation
}

// Where appends a list predicates to the FuncNodeUpdate builder.
func (fnu *FuncNodeUpdate) Where(ps ...predicate.FuncNode) *FuncNodeUpdate {
	fnu.mutation.Where(ps...)
	return fnu
}

// SetKey sets the "key" field.
func (fnu *FuncNodeUpdate) SetKey(s string) *FuncNodeUpdate {
	fnu.mutation.SetKey(s)
	return fnu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (fnu *FuncNodeUpdate) SetNillableKey(s *string) *FuncNodeUpdate {
	if s != nil {
		fnu.SetKey(*s)
	}
	return fnu
}

// SetFullName sets the "full_name" field.
func (fnu *FuncNodeUpdate) SetFullName(s string) *FuncNodeUpdate {
	fnu.mutation.SetFullName(s)
	return fnu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (fnu *FuncNodeUpdate) SetNillableFullName(s *string) *FuncNodeUpdate {
	if s != nil {
		fnu.SetFullName(*s)
	}
	return fnu
}

// SetPkg sets the "pkg" field.
func (fnu *FuncNodeUpdate) SetPkg(s string) *FuncNodeUpdate {
	fnu.mutation.SetPkg(s)
	return fnu
}

// SetNillablePkg sets the "pkg" field if the given value is not nil.
func (fnu *FuncNodeUpdate) SetNillablePkg(s *string) *FuncNodeUpdate {
	if s != nil {
		fnu.SetPkg(*s)
	}
	return fnu
}

// SetName sets the "name" field.
func (fnu *FuncNodeUpdate) SetName(s string) *FuncNodeUpdate {
	fnu.mutation.SetName(s)
	return fnu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fnu *FuncNodeUpdate) SetNillableName(s *string) *FuncNodeUpdate {
	if s != nil {
		fnu.SetName(*s)
	}
	return fnu
}

// SetCreatedAt sets the "CreatedAt" field.
func (fnu *FuncNodeUpdate) SetCreatedAt(t time.Time) *FuncNodeUpdate {
	fnu.mutation.SetCreatedAt(t)
	return fnu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (fnu *FuncNodeUpdate) SetNillableCreatedAt(t *time.Time) *FuncNodeUpdate {
	if t != nil {
		fnu.SetCreatedAt(*t)
	}
	return fnu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (fnu *FuncNodeUpdate) SetUpdatedAt(t time.Time) *FuncNodeUpdate {
	fnu.mutation.SetUpdatedAt(t)
	return fnu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (fnu *FuncNodeUpdate) SetNillableUpdatedAt(t *time.Time) *FuncNodeUpdate {
	if t != nil {
		fnu.SetUpdatedAt(*t)
	}
	return fnu
}

// Mutation returns the FuncNodeMutation object of the builder.
func (fnu *FuncNodeUpdate) Mutation() *FuncNodeMutation {
	return fnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fnu *FuncNodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fnu.sqlSave, fnu.mutation, fnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fnu *FuncNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := fnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fnu *FuncNodeUpdate) Exec(ctx context.Context) error {
	_, err := fnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnu *FuncNodeUpdate) ExecX(ctx context.Context) {
	if err := fnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnu *FuncNodeUpdate) check() error {
	if v, ok := fnu.mutation.Key(); ok {
		if err := funcnode.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`gen: validator failed for field "FuncNode.key": %w`, err)}
		}
	}
	if v, ok := fnu.mutation.FullName(); ok {
		if err := funcnode.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`gen: validator failed for field "FuncNode.full_name": %w`, err)}
		}
	}
	if v, ok := fnu.mutation.Pkg(); ok {
		if err := funcnode.PkgValidator(v); err != nil {
			return &ValidationError{Name: "pkg", err: fmt.Errorf(`gen: validator failed for field "FuncNode.pkg": %w`, err)}
		}
	}
	if v, ok := fnu.mutation.Name(); ok {
		if err := funcnode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "FuncNode.name": %w`, err)}
		}
	}
	return nil
}

func (fnu *FuncNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(funcnode.Table, funcnode.Columns, sqlgraph.NewFieldSpec(funcnode.FieldID, field.TypeInt))
	if ps := fnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fnu.mutation.Key(); ok {
		_spec.SetField(funcnode.FieldKey, field.TypeString, value)
	}
	if value, ok := fnu.mutation.FullName(); ok {
		_spec.SetField(funcnode.FieldFullName, field.TypeString, value)
	}
	if value, ok := fnu.mutation.Pkg(); ok {
		_spec.SetField(funcnode.FieldPkg, field.TypeString, value)
	}
	if value, ok := fnu.mutation.Name(); ok {
		_spec.SetField(funcnode.FieldName, field.TypeString, value)
	}
	if value, ok := fnu.mutation.CreatedAt(); ok {
		_spec.SetField(funcnode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fnu.mutation.UpdatedAt(); ok {
		_spec.SetField(funcnode.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{funcnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fnu.mutation.done = true
	return n, nil
}

// FuncNodeUpdateOne is the builder for updating a single FuncNode entity.
type FuncNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FuncNodeMutation
}

// SetKey sets the "key" field.
func (fnuo *FuncNodeUpdateOne) SetKey(s string) *FuncNodeUpdateOne {
	fnuo.mutation.SetKey(s)
	return fnuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (fnuo *FuncNodeUpdateOne) SetNillableKey(s *string) *FuncNodeUpdateOne {
	if s != nil {
		fnuo.SetKey(*s)
	}
	return fnuo
}

// SetFullName sets the "full_name" field.
func (fnuo *FuncNodeUpdateOne) SetFullName(s string) *FuncNodeUpdateOne {
	fnuo.mutation.SetFullName(s)
	return fnuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (fnuo *FuncNodeUpdateOne) SetNillableFullName(s *string) *FuncNodeUpdateOne {
	if s != nil {
		fnuo.SetFullName(*s)
	}
	return fnuo
}

// SetPkg sets the "pkg" field.
func (fnuo *FuncNodeUpdateOne) SetPkg(s string) *FuncNodeUpdateOne {
	fnuo.mutation.SetPkg(s)
	return fnuo
}

// SetNillablePkg sets the "pkg" field if the given value is not nil.
func (fnuo *FuncNodeUpdateOne) SetNillablePkg(s *string) *FuncNodeUpdateOne {
	if s != nil {
		fnuo.SetPkg(*s)
	}
	return fnuo
}

// SetName sets the "name" field.
func (fnuo *FuncNodeUpdateOne) SetName(s string) *FuncNodeUpdateOne {
	fnuo.mutation.SetName(s)
	return fnuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fnuo *FuncNodeUpdateOne) SetNillableName(s *string) *FuncNodeUpdateOne {
	if s != nil {
		fnuo.SetName(*s)
	}
	return fnuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (fnuo *FuncNodeUpdateOne) SetCreatedAt(t time.Time) *FuncNodeUpdateOne {
	fnuo.mutation.SetCreatedAt(t)
	return fnuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (fnuo *FuncNodeUpdateOne) SetNillableCreatedAt(t *time.Time) *FuncNodeUpdateOne {
	if t != nil {
		fnuo.SetCreatedAt(*t)
	}
	return fnuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (fnuo *FuncNodeUpdateOne) SetUpdatedAt(t time.Time) *FuncNodeUpdateOne {
	fnuo.mutation.SetUpdatedAt(t)
	return fnuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (fnuo *FuncNodeUpdateOne) SetNillableUpdatedAt(t *time.Time) *FuncNodeUpdateOne {
	if t != nil {
		fnuo.SetUpdatedAt(*t)
	}
	return fnuo
}

// Mutation returns the FuncNodeMutation object of the builder.
func (fnuo *FuncNodeUpdateOne) Mutation() *FuncNodeMutation {
	return fnuo.mutation
}

// Where appends a list predicates to the FuncNodeUpdate builder.
func (fnuo *FuncNodeUpdateOne) Where(ps ...predicate.FuncNode) *FuncNodeUpdateOne {
	fnuo.mutation.Where(ps...)
	return fnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fnuo *FuncNodeUpdateOne) Select(field string, fields ...string) *FuncNodeUpdateOne {
	fnuo.fields = append([]string{field}, fields...)
	return fnuo
}

// Save executes the query and returns the updated FuncNode entity.
func (fnuo *FuncNodeUpdateOne) Save(ctx context.Context) (*FuncNode, error) {
	return withHooks(ctx, fnuo.sqlSave, fnuo.mutation, fnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fnuo *FuncNodeUpdateOne) SaveX(ctx context.Context) *FuncNode {
	node, err := fnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fnuo *FuncNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := fnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnuo *FuncNodeUpdateOne) ExecX(ctx context.Context) {
	if err := fnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnuo *FuncNodeUpdateOne) check() error {
	if v, ok := fnuo.mutation.Key(); ok {
		if err := funcnode.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`gen: validator failed for field "FuncNode.key": %w`, err)}
		}
	}
	if v, ok := fnuo.mutation.FullName(); ok {
		if err := funcnode.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`gen: validator failed for field "FuncNode.full_name": %w`, err)}
		}
	}
	if v, ok := fnuo.mutation.Pkg(); ok {
		if err := funcnode.PkgValidator(v); err != nil {
			return &ValidationError{Name: "pkg", err: fmt.Errorf(`gen: validator failed for field "FuncNode.pkg": %w`, err)}
		}
	}
	if v, ok := fnuo.mutation.Name(); ok {
		if err := funcnode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "FuncNode.name": %w`, err)}
		}
	}
	return nil
}

func (fnuo *FuncNodeUpdateOne) sqlSave(ctx context.Context) (_node *FuncNode, err error) {
	if err := fnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(funcnode.Table, funcnode.Columns, sqlgraph.NewFieldSpec(funcnode.FieldID, field.TypeInt))
	id, ok := fnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "FuncNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, funcnode.FieldID)
		for _, f := range fields {
			if !funcnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != funcnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fnuo.mutation.Key(); ok {
		_spec.SetField(funcnode.FieldKey, field.TypeString, value)
	}
	if value, ok := fnuo.mutation.FullName(); ok {
		_spec.SetField(funcnode.FieldFullName, field.TypeString, value)
	}
	if value, ok := fnuo.mutation.Pkg(); ok {
		_spec.SetField(funcnode.FieldPkg, field.TypeString, value)
	}
	if value, ok := fnuo.mutation.Name(); ok {
		_spec.SetField(funcnode.FieldName, field.TypeString, value)
	}
	if value, ok := fnuo.mutation.CreatedAt(); ok {
		_spec.SetField(funcnode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(funcnode.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &FuncNode{config: fnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{funcnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fnuo.mutation.done = true
	return _node, nil
}
