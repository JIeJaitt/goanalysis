// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcedge"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcnode"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFuncEdge = "FuncEdge"
	TypeFuncNode = "FuncNode"
)

// FuncEdgeMutation represents an operation that mutates the FuncEdge nodes in the graph.
type FuncEdgeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_CreatedAt    *time.Time
	_UpdatedAt    *time.Time
	_CallerKey    *string
	_CalleeKey    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FuncEdge, error)
	predicates    []predicate.FuncEdge
}

var _ ent.Mutation = (*FuncEdgeMutation)(nil)

// funcedgeOption allows management of the mutation configuration using functional options.
type funcedgeOption func(*FuncEdgeMutation)

// newFuncEdgeMutation creates new mutation for the FuncEdge entity.
func newFuncEdgeMutation(c config, op Op, opts ...funcedgeOption) *FuncEdgeMutation {
	m := &FuncEdgeMutation{
		config:        c,
		op:            op,
		typ:           TypeFuncEdge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFuncEdgeID sets the ID field of the mutation.
func withFuncEdgeID(id int) funcedgeOption {
	return func(m *FuncEdgeMutation) {
		var (
			err   error
			once  sync.Once
			value *FuncEdge
		)
		m.oldValue = func(ctx context.Context) (*FuncEdge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FuncEdge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFuncEdge sets the old FuncEdge of the mutation.
func withFuncEdge(node *FuncEdge) funcedgeOption {
	return func(m *FuncEdgeMutation) {
		m.oldValue = func(context.Context) (*FuncEdge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FuncEdgeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FuncEdgeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FuncEdgeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FuncEdgeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FuncEdge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "CreatedAt" field.
func (m *FuncEdgeMutation) SetCreatedAt(t time.Time) {
	m._CreatedAt = &t
}

// CreatedAt returns the value of the "CreatedAt" field in the mutation.
func (m *FuncEdgeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m._CreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "CreatedAt" field's value of the FuncEdge entity.
// If the FuncEdge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncEdgeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "CreatedAt" field.
func (m *FuncEdgeMutation) ResetCreatedAt() {
	m._CreatedAt = nil
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (m *FuncEdgeMutation) SetUpdatedAt(t time.Time) {
	m._UpdatedAt = &t
}

// UpdatedAt returns the value of the "UpdatedAt" field in the mutation.
func (m *FuncEdgeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m._UpdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "UpdatedAt" field's value of the FuncEdge entity.
// If the FuncEdge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncEdgeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "UpdatedAt" field.
func (m *FuncEdgeMutation) ResetUpdatedAt() {
	m._UpdatedAt = nil
}

// SetCallerKey sets the "CallerKey" field.
func (m *FuncEdgeMutation) SetCallerKey(s string) {
	m._CallerKey = &s
}

// CallerKey returns the value of the "CallerKey" field in the mutation.
func (m *FuncEdgeMutation) CallerKey() (r string, exists bool) {
	v := m._CallerKey
	if v == nil {
		return
	}
	return *v, true
}

// OldCallerKey returns the old "CallerKey" field's value of the FuncEdge entity.
// If the FuncEdge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncEdgeMutation) OldCallerKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallerKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallerKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallerKey: %w", err)
	}
	return oldValue.CallerKey, nil
}

// ResetCallerKey resets all changes to the "CallerKey" field.
func (m *FuncEdgeMutation) ResetCallerKey() {
	m._CallerKey = nil
}

// SetCalleeKey sets the "CalleeKey" field.
func (m *FuncEdgeMutation) SetCalleeKey(s string) {
	m._CalleeKey = &s
}

// CalleeKey returns the value of the "CalleeKey" field in the mutation.
func (m *FuncEdgeMutation) CalleeKey() (r string, exists bool) {
	v := m._CalleeKey
	if v == nil {
		return
	}
	return *v, true
}

// OldCalleeKey returns the old "CalleeKey" field's value of the FuncEdge entity.
// If the FuncEdge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncEdgeMutation) OldCalleeKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCalleeKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCalleeKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCalleeKey: %w", err)
	}
	return oldValue.CalleeKey, nil
}

// ResetCalleeKey resets all changes to the "CalleeKey" field.
func (m *FuncEdgeMutation) ResetCalleeKey() {
	m._CalleeKey = nil
}

// Where appends a list predicates to the FuncEdgeMutation builder.
func (m *FuncEdgeMutation) Where(ps ...predicate.FuncEdge) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FuncEdgeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FuncEdgeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FuncEdge, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FuncEdgeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FuncEdgeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FuncEdge).
func (m *FuncEdgeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FuncEdgeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._CreatedAt != nil {
		fields = append(fields, funcedge.FieldCreatedAt)
	}
	if m._UpdatedAt != nil {
		fields = append(fields, funcedge.FieldUpdatedAt)
	}
	if m._CallerKey != nil {
		fields = append(fields, funcedge.FieldCallerKey)
	}
	if m._CalleeKey != nil {
		fields = append(fields, funcedge.FieldCalleeKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FuncEdgeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case funcedge.FieldCreatedAt:
		return m.CreatedAt()
	case funcedge.FieldUpdatedAt:
		return m.UpdatedAt()
	case funcedge.FieldCallerKey:
		return m.CallerKey()
	case funcedge.FieldCalleeKey:
		return m.CalleeKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FuncEdgeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case funcedge.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case funcedge.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case funcedge.FieldCallerKey:
		return m.OldCallerKey(ctx)
	case funcedge.FieldCalleeKey:
		return m.OldCalleeKey(ctx)
	}
	return nil, fmt.Errorf("unknown FuncEdge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FuncEdgeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case funcedge.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case funcedge.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case funcedge.FieldCallerKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallerKey(v)
		return nil
	case funcedge.FieldCalleeKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCalleeKey(v)
		return nil
	}
	return fmt.Errorf("unknown FuncEdge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FuncEdgeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FuncEdgeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FuncEdgeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FuncEdge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FuncEdgeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FuncEdgeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FuncEdgeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FuncEdge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FuncEdgeMutation) ResetField(name string) error {
	switch name {
	case funcedge.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case funcedge.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case funcedge.FieldCallerKey:
		m.ResetCallerKey()
		return nil
	case funcedge.FieldCalleeKey:
		m.ResetCalleeKey()
		return nil
	}
	return fmt.Errorf("unknown FuncEdge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FuncEdgeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FuncEdgeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FuncEdgeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FuncEdgeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FuncEdgeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FuncEdgeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FuncEdgeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FuncEdge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FuncEdgeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FuncEdge edge %s", name)
}

// FuncNodeMutation represents an operation that mutates the FuncNode nodes in the graph.
type FuncNodeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	full_name     *string
	pkg           *string
	name          *string
	_CreatedAt    *time.Time
	_UpdatedAt    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FuncNode, error)
	predicates    []predicate.FuncNode
}

var _ ent.Mutation = (*FuncNodeMutation)(nil)

// funcnodeOption allows management of the mutation configuration using functional options.
type funcnodeOption func(*FuncNodeMutation)

// newFuncNodeMutation creates new mutation for the FuncNode entity.
func newFuncNodeMutation(c config, op Op, opts ...funcnodeOption) *FuncNodeMutation {
	m := &FuncNodeMutation{
		config:        c,
		op:            op,
		typ:           TypeFuncNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFuncNodeID sets the ID field of the mutation.
func withFuncNodeID(id int) funcnodeOption {
	return func(m *FuncNodeMutation) {
		var (
			err   error
			once  sync.Once
			value *FuncNode
		)
		m.oldValue = func(ctx context.Context) (*FuncNode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FuncNode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFuncNode sets the old FuncNode of the mutation.
func withFuncNode(node *FuncNode) funcnodeOption {
	return func(m *FuncNodeMutation) {
		m.oldValue = func(context.Context) (*FuncNode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FuncNodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FuncNodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FuncNodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FuncNodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FuncNode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *FuncNodeMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *FuncNodeMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the FuncNode entity.
// If the FuncNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncNodeMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *FuncNodeMutation) ResetKey() {
	m.key = nil
}

// SetFullName sets the "full_name" field.
func (m *FuncNodeMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *FuncNodeMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the FuncNode entity.
// If the FuncNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncNodeMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *FuncNodeMutation) ResetFullName() {
	m.full_name = nil
}

// SetPkg sets the "pkg" field.
func (m *FuncNodeMutation) SetPkg(s string) {
	m.pkg = &s
}

// Pkg returns the value of the "pkg" field in the mutation.
func (m *FuncNodeMutation) Pkg() (r string, exists bool) {
	v := m.pkg
	if v == nil {
		return
	}
	return *v, true
}

// OldPkg returns the old "pkg" field's value of the FuncNode entity.
// If the FuncNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncNodeMutation) OldPkg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPkg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPkg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkg: %w", err)
	}
	return oldValue.Pkg, nil
}

// ResetPkg resets all changes to the "pkg" field.
func (m *FuncNodeMutation) ResetPkg() {
	m.pkg = nil
}

// SetName sets the "name" field.
func (m *FuncNodeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FuncNodeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FuncNode entity.
// If the FuncNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncNodeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FuncNodeMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "CreatedAt" field.
func (m *FuncNodeMutation) SetCreatedAt(t time.Time) {
	m._CreatedAt = &t
}

// CreatedAt returns the value of the "CreatedAt" field in the mutation.
func (m *FuncNodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m._CreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "CreatedAt" field's value of the FuncNode entity.
// If the FuncNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncNodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "CreatedAt" field.
func (m *FuncNodeMutation) ResetCreatedAt() {
	m._CreatedAt = nil
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (m *FuncNodeMutation) SetUpdatedAt(t time.Time) {
	m._UpdatedAt = &t
}

// UpdatedAt returns the value of the "UpdatedAt" field in the mutation.
func (m *FuncNodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m._UpdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "UpdatedAt" field's value of the FuncNode entity.
// If the FuncNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FuncNodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "UpdatedAt" field.
func (m *FuncNodeMutation) ResetUpdatedAt() {
	m._UpdatedAt = nil
}

// Where appends a list predicates to the FuncNodeMutation builder.
func (m *FuncNodeMutation) Where(ps ...predicate.FuncNode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FuncNodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FuncNodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FuncNode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FuncNodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FuncNodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FuncNode).
func (m *FuncNodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FuncNodeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.key != nil {
		fields = append(fields, funcnode.FieldKey)
	}
	if m.full_name != nil {
		fields = append(fields, funcnode.FieldFullName)
	}
	if m.pkg != nil {
		fields = append(fields, funcnode.FieldPkg)
	}
	if m.name != nil {
		fields = append(fields, funcnode.FieldName)
	}
	if m._CreatedAt != nil {
		fields = append(fields, funcnode.FieldCreatedAt)
	}
	if m._UpdatedAt != nil {
		fields = append(fields, funcnode.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FuncNodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case funcnode.FieldKey:
		return m.Key()
	case funcnode.FieldFullName:
		return m.FullName()
	case funcnode.FieldPkg:
		return m.Pkg()
	case funcnode.FieldName:
		return m.Name()
	case funcnode.FieldCreatedAt:
		return m.CreatedAt()
	case funcnode.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FuncNodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case funcnode.FieldKey:
		return m.OldKey(ctx)
	case funcnode.FieldFullName:
		return m.OldFullName(ctx)
	case funcnode.FieldPkg:
		return m.OldPkg(ctx)
	case funcnode.FieldName:
		return m.OldName(ctx)
	case funcnode.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case funcnode.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FuncNode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FuncNodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case funcnode.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case funcnode.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case funcnode.FieldPkg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkg(v)
		return nil
	case funcnode.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case funcnode.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case funcnode.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FuncNode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FuncNodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FuncNodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FuncNodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FuncNode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FuncNodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FuncNodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FuncNodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FuncNode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FuncNodeMutation) ResetField(name string) error {
	switch name {
	case funcnode.FieldKey:
		m.ResetKey()
		return nil
	case funcnode.FieldFullName:
		m.ResetFullName()
		return nil
	case funcnode.FieldPkg:
		m.ResetPkg()
		return nil
	case funcnode.FieldName:
		m.ResetName()
		return nil
	case funcnode.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case funcnode.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FuncNode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FuncNodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FuncNodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FuncNodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FuncNodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FuncNodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FuncNodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FuncNodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FuncNode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FuncNodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FuncNode edge %s", name)
}
