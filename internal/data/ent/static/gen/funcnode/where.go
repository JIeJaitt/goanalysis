// Code generated by ent, DO NOT EDIT.

package funcnode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldKey, v))
}

// Pkg applies equality check predicate on the "pkg" field. It's identical to PkgEQ.
func Pkg(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldPkg, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldUpdatedAt, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldContainsFold(FieldKey, v))
}

// PkgEQ applies the EQ predicate on the "pkg" field.
func PkgEQ(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldPkg, v))
}

// PkgNEQ applies the NEQ predicate on the "pkg" field.
func PkgNEQ(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNEQ(FieldPkg, v))
}

// PkgIn applies the In predicate on the "pkg" field.
func PkgIn(vs ...string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldIn(FieldPkg, vs...))
}

// PkgNotIn applies the NotIn predicate on the "pkg" field.
func PkgNotIn(vs ...string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNotIn(FieldPkg, vs...))
}

// PkgGT applies the GT predicate on the "pkg" field.
func PkgGT(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGT(FieldPkg, v))
}

// PkgGTE applies the GTE predicate on the "pkg" field.
func PkgGTE(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGTE(FieldPkg, v))
}

// PkgLT applies the LT predicate on the "pkg" field.
func PkgLT(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLT(FieldPkg, v))
}

// PkgLTE applies the LTE predicate on the "pkg" field.
func PkgLTE(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLTE(FieldPkg, v))
}

// PkgContains applies the Contains predicate on the "pkg" field.
func PkgContains(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldContains(FieldPkg, v))
}

// PkgHasPrefix applies the HasPrefix predicate on the "pkg" field.
func PkgHasPrefix(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldHasPrefix(FieldPkg, v))
}

// PkgHasSuffix applies the HasSuffix predicate on the "pkg" field.
func PkgHasSuffix(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldHasSuffix(FieldPkg, v))
}

// PkgEqualFold applies the EqualFold predicate on the "pkg" field.
func PkgEqualFold(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEqualFold(FieldPkg, v))
}

// PkgContainsFold applies the ContainsFold predicate on the "pkg" field.
func PkgContainsFold(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldContainsFold(FieldPkg, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldContainsFold(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.FuncNode {
	return predicate.FuncNode(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FuncNode) predicate.FuncNode {
	return predicate.FuncNode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FuncNode) predicate.FuncNode {
	return predicate.FuncNode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FuncNode) predicate.FuncNode {
	return predicate.FuncNode(sql.NotPredicates(p))
}
