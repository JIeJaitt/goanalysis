// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcedge"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/predicate"
)

// FuncEdgeUpdate is the builder for updating FuncEdge entities.
type FuncEdgeUpdate struct {
	config
	hooks    []Hook
	mutation *FuncEdgeMutation
}

// Where appends a list predicates to the FuncEdgeUpdate builder.
func (feu *FuncEdgeUpdate) Where(ps ...predicate.FuncEdge) *FuncEdgeUpdate {
	feu.mutation.Where(ps...)
	return feu
}

// SetCreatedAt sets the "CreatedAt" field.
func (feu *FuncEdgeUpdate) SetCreatedAt(t time.Time) *FuncEdgeUpdate {
	feu.mutation.SetCreatedAt(t)
	return feu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (feu *FuncEdgeUpdate) SetNillableCreatedAt(t *time.Time) *FuncEdgeUpdate {
	if t != nil {
		feu.SetCreatedAt(*t)
	}
	return feu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (feu *FuncEdgeUpdate) SetUpdatedAt(t time.Time) *FuncEdgeUpdate {
	feu.mutation.SetUpdatedAt(t)
	return feu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (feu *FuncEdgeUpdate) SetNillableUpdatedAt(t *time.Time) *FuncEdgeUpdate {
	if t != nil {
		feu.SetUpdatedAt(*t)
	}
	return feu
}

// SetCallerKey sets the "CallerKey" field.
func (feu *FuncEdgeUpdate) SetCallerKey(s string) *FuncEdgeUpdate {
	feu.mutation.SetCallerKey(s)
	return feu
}

// SetNillableCallerKey sets the "CallerKey" field if the given value is not nil.
func (feu *FuncEdgeUpdate) SetNillableCallerKey(s *string) *FuncEdgeUpdate {
	if s != nil {
		feu.SetCallerKey(*s)
	}
	return feu
}

// SetCalleeKey sets the "CalleeKey" field.
func (feu *FuncEdgeUpdate) SetCalleeKey(s string) *FuncEdgeUpdate {
	feu.mutation.SetCalleeKey(s)
	return feu
}

// SetNillableCalleeKey sets the "CalleeKey" field if the given value is not nil.
func (feu *FuncEdgeUpdate) SetNillableCalleeKey(s *string) *FuncEdgeUpdate {
	if s != nil {
		feu.SetCalleeKey(*s)
	}
	return feu
}

// Mutation returns the FuncEdgeMutation object of the builder.
func (feu *FuncEdgeUpdate) Mutation() *FuncEdgeMutation {
	return feu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (feu *FuncEdgeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, feu.sqlSave, feu.mutation, feu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feu *FuncEdgeUpdate) SaveX(ctx context.Context) int {
	affected, err := feu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (feu *FuncEdgeUpdate) Exec(ctx context.Context) error {
	_, err := feu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feu *FuncEdgeUpdate) ExecX(ctx context.Context) {
	if err := feu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (feu *FuncEdgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(funcedge.Table, funcedge.Columns, sqlgraph.NewFieldSpec(funcedge.FieldID, field.TypeInt))
	if ps := feu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feu.mutation.CreatedAt(); ok {
		_spec.SetField(funcedge.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := feu.mutation.UpdatedAt(); ok {
		_spec.SetField(funcedge.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := feu.mutation.CallerKey(); ok {
		_spec.SetField(funcedge.FieldCallerKey, field.TypeString, value)
	}
	if value, ok := feu.mutation.CalleeKey(); ok {
		_spec.SetField(funcedge.FieldCalleeKey, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, feu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{funcedge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	feu.mutation.done = true
	return n, nil
}

// FuncEdgeUpdateOne is the builder for updating a single FuncEdge entity.
type FuncEdgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FuncEdgeMutation
}

// SetCreatedAt sets the "CreatedAt" field.
func (feuo *FuncEdgeUpdateOne) SetCreatedAt(t time.Time) *FuncEdgeUpdateOne {
	feuo.mutation.SetCreatedAt(t)
	return feuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (feuo *FuncEdgeUpdateOne) SetNillableCreatedAt(t *time.Time) *FuncEdgeUpdateOne {
	if t != nil {
		feuo.SetCreatedAt(*t)
	}
	return feuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (feuo *FuncEdgeUpdateOne) SetUpdatedAt(t time.Time) *FuncEdgeUpdateOne {
	feuo.mutation.SetUpdatedAt(t)
	return feuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (feuo *FuncEdgeUpdateOne) SetNillableUpdatedAt(t *time.Time) *FuncEdgeUpdateOne {
	if t != nil {
		feuo.SetUpdatedAt(*t)
	}
	return feuo
}

// SetCallerKey sets the "CallerKey" field.
func (feuo *FuncEdgeUpdateOne) SetCallerKey(s string) *FuncEdgeUpdateOne {
	feuo.mutation.SetCallerKey(s)
	return feuo
}

// SetNillableCallerKey sets the "CallerKey" field if the given value is not nil.
func (feuo *FuncEdgeUpdateOne) SetNillableCallerKey(s *string) *FuncEdgeUpdateOne {
	if s != nil {
		feuo.SetCallerKey(*s)
	}
	return feuo
}

// SetCalleeKey sets the "CalleeKey" field.
func (feuo *FuncEdgeUpdateOne) SetCalleeKey(s string) *FuncEdgeUpdateOne {
	feuo.mutation.SetCalleeKey(s)
	return feuo
}

// SetNillableCalleeKey sets the "CalleeKey" field if the given value is not nil.
func (feuo *FuncEdgeUpdateOne) SetNillableCalleeKey(s *string) *FuncEdgeUpdateOne {
	if s != nil {
		feuo.SetCalleeKey(*s)
	}
	return feuo
}

// Mutation returns the FuncEdgeMutation object of the builder.
func (feuo *FuncEdgeUpdateOne) Mutation() *FuncEdgeMutation {
	return feuo.mutation
}

// Where appends a list predicates to the FuncEdgeUpdate builder.
func (feuo *FuncEdgeUpdateOne) Where(ps ...predicate.FuncEdge) *FuncEdgeUpdateOne {
	feuo.mutation.Where(ps...)
	return feuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (feuo *FuncEdgeUpdateOne) Select(field string, fields ...string) *FuncEdgeUpdateOne {
	feuo.fields = append([]string{field}, fields...)
	return feuo
}

// Save executes the query and returns the updated FuncEdge entity.
func (feuo *FuncEdgeUpdateOne) Save(ctx context.Context) (*FuncEdge, error) {
	return withHooks(ctx, feuo.sqlSave, feuo.mutation, feuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feuo *FuncEdgeUpdateOne) SaveX(ctx context.Context) *FuncEdge {
	node, err := feuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (feuo *FuncEdgeUpdateOne) Exec(ctx context.Context) error {
	_, err := feuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feuo *FuncEdgeUpdateOne) ExecX(ctx context.Context) {
	if err := feuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (feuo *FuncEdgeUpdateOne) sqlSave(ctx context.Context) (_node *FuncEdge, err error) {
	_spec := sqlgraph.NewUpdateSpec(funcedge.Table, funcedge.Columns, sqlgraph.NewFieldSpec(funcedge.FieldID, field.TypeInt))
	id, ok := feuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "FuncEdge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := feuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, funcedge.FieldID)
		for _, f := range fields {
			if !funcedge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != funcedge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := feuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feuo.mutation.CreatedAt(); ok {
		_spec.SetField(funcedge.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := feuo.mutation.UpdatedAt(); ok {
		_spec.SetField(funcedge.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := feuo.mutation.CallerKey(); ok {
		_spec.SetField(funcedge.FieldCallerKey, field.TypeString, value)
	}
	if value, ok := feuo.mutation.CalleeKey(); ok {
		_spec.SetField(funcedge.FieldCalleeKey, field.TypeString, value)
	}
	_node = &FuncEdge{config: feuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, feuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{funcedge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	feuo.mutation.done = true
	return _node, nil
}
