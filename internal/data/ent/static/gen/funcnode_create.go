// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcnode"
)

// FuncNodeCreate is the builder for creating a FuncNode entity.
type FuncNodeCreate struct {
	config
	mutation *FuncNodeMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (fnc *FuncNodeCreate) SetKey(s string) *FuncNodeCreate {
	fnc.mutation.SetKey(s)
	return fnc
}

// SetFullName sets the "full_name" field.
func (fnc *FuncNodeCreate) SetFullName(s string) *FuncNodeCreate {
	fnc.mutation.SetFullName(s)
	return fnc
}

// SetPkg sets the "pkg" field.
func (fnc *FuncNodeCreate) SetPkg(s string) *FuncNodeCreate {
	fnc.mutation.SetPkg(s)
	return fnc
}

// SetName sets the "name" field.
func (fnc *FuncNodeCreate) SetName(s string) *FuncNodeCreate {
	fnc.mutation.SetName(s)
	return fnc
}

// SetCreatedAt sets the "CreatedAt" field.
func (fnc *FuncNodeCreate) SetCreatedAt(t time.Time) *FuncNodeCreate {
	fnc.mutation.SetCreatedAt(t)
	return fnc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (fnc *FuncNodeCreate) SetNillableCreatedAt(t *time.Time) *FuncNodeCreate {
	if t != nil {
		fnc.SetCreatedAt(*t)
	}
	return fnc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (fnc *FuncNodeCreate) SetUpdatedAt(t time.Time) *FuncNodeCreate {
	fnc.mutation.SetUpdatedAt(t)
	return fnc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (fnc *FuncNodeCreate) SetNillableUpdatedAt(t *time.Time) *FuncNodeCreate {
	if t != nil {
		fnc.SetUpdatedAt(*t)
	}
	return fnc
}

// Mutation returns the FuncNodeMutation object of the builder.
func (fnc *FuncNodeCreate) Mutation() *FuncNodeMutation {
	return fnc.mutation
}

// Save creates the FuncNode in the database.
func (fnc *FuncNodeCreate) Save(ctx context.Context) (*FuncNode, error) {
	fnc.defaults()
	return withHooks(ctx, fnc.sqlSave, fnc.mutation, fnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fnc *FuncNodeCreate) SaveX(ctx context.Context) *FuncNode {
	v, err := fnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnc *FuncNodeCreate) Exec(ctx context.Context) error {
	_, err := fnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnc *FuncNodeCreate) ExecX(ctx context.Context) {
	if err := fnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fnc *FuncNodeCreate) defaults() {
	if _, ok := fnc.mutation.CreatedAt(); !ok {
		v := funcnode.DefaultCreatedAt()
		fnc.mutation.SetCreatedAt(v)
	}
	if _, ok := fnc.mutation.UpdatedAt(); !ok {
		v := funcnode.DefaultUpdatedAt()
		fnc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnc *FuncNodeCreate) check() error {
	if _, ok := fnc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`gen: missing required field "FuncNode.key"`)}
	}
	if v, ok := fnc.mutation.Key(); ok {
		if err := funcnode.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`gen: validator failed for field "FuncNode.key": %w`, err)}
		}
	}
	if _, ok := fnc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`gen: missing required field "FuncNode.full_name"`)}
	}
	if v, ok := fnc.mutation.FullName(); ok {
		if err := funcnode.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`gen: validator failed for field "FuncNode.full_name": %w`, err)}
		}
	}
	if _, ok := fnc.mutation.Pkg(); !ok {
		return &ValidationError{Name: "pkg", err: errors.New(`gen: missing required field "FuncNode.pkg"`)}
	}
	if v, ok := fnc.mutation.Pkg(); ok {
		if err := funcnode.PkgValidator(v); err != nil {
			return &ValidationError{Name: "pkg", err: fmt.Errorf(`gen: validator failed for field "FuncNode.pkg": %w`, err)}
		}
	}
	if _, ok := fnc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "FuncNode.name"`)}
	}
	if v, ok := fnc.mutation.Name(); ok {
		if err := funcnode.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "FuncNode.name": %w`, err)}
		}
	}
	if _, ok := fnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`gen: missing required field "FuncNode.CreatedAt"`)}
	}
	if _, ok := fnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`gen: missing required field "FuncNode.UpdatedAt"`)}
	}
	return nil
}

func (fnc *FuncNodeCreate) sqlSave(ctx context.Context) (*FuncNode, error) {
	if err := fnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fnc.mutation.id = &_node.ID
	fnc.mutation.done = true
	return _node, nil
}

func (fnc *FuncNodeCreate) createSpec() (*FuncNode, *sqlgraph.CreateSpec) {
	var (
		_node = &FuncNode{config: fnc.config}
		_spec = sqlgraph.NewCreateSpec(funcnode.Table, sqlgraph.NewFieldSpec(funcnode.FieldID, field.TypeInt))
	)
	if value, ok := fnc.mutation.Key(); ok {
		_spec.SetField(funcnode.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := fnc.mutation.FullName(); ok {
		_spec.SetField(funcnode.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := fnc.mutation.Pkg(); ok {
		_spec.SetField(funcnode.FieldPkg, field.TypeString, value)
		_node.Pkg = value
	}
	if value, ok := fnc.mutation.Name(); ok {
		_spec.SetField(funcnode.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fnc.mutation.CreatedAt(); ok {
		_spec.SetField(funcnode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fnc.mutation.UpdatedAt(); ok {
		_spec.SetField(funcnode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FuncNodeCreateBulk is the builder for creating many FuncNode entities in bulk.
type FuncNodeCreateBulk struct {
	config
	err      error
	builders []*FuncNodeCreate
}

// Save creates the FuncNode entities in the database.
func (fncb *FuncNodeCreateBulk) Save(ctx context.Context) ([]*FuncNode, error) {
	if fncb.err != nil {
		return nil, fncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fncb.builders))
	nodes := make([]*FuncNode, len(fncb.builders))
	mutators := make([]Mutator, len(fncb.builders))
	for i := range fncb.builders {
		func(i int, root context.Context) {
			builder := fncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FuncNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fncb *FuncNodeCreateBulk) SaveX(ctx context.Context) []*FuncNode {
	v, err := fncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fncb *FuncNodeCreateBulk) Exec(ctx context.Context) error {
	_, err := fncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fncb *FuncNodeCreateBulk) ExecX(ctx context.Context) {
	if err := fncb.Exec(ctx); err != nil {
		panic(err)
	}
}
