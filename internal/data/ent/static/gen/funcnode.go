// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcnode"
)

// FuncNode is the model entity for the FuncNode schema.
type FuncNode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Pkg holds the value of the "pkg" field.
	Pkg string `json:"pkg,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt    time.Time `json:"UpdatedAt,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FuncNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case funcnode.FieldID:
			values[i] = new(sql.NullInt64)
		case funcnode.FieldKey, funcnode.FieldPkg, funcnode.FieldName:
			values[i] = new(sql.NullString)
		case funcnode.FieldCreatedAt, funcnode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FuncNode fields.
func (fn *FuncNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case funcnode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fn.ID = int(value.Int64)
		case funcnode.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				fn.Key = value.String
			}
		case funcnode.FieldPkg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pkg", values[i])
			} else if value.Valid {
				fn.Pkg = value.String
			}
		case funcnode.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fn.Name = value.String
			}
		case funcnode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				fn.CreatedAt = value.Time
			}
		case funcnode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				fn.UpdatedAt = value.Time
			}
		default:
			fn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FuncNode.
// This includes values selected through modifiers, order, etc.
func (fn *FuncNode) Value(name string) (ent.Value, error) {
	return fn.selectValues.Get(name)
}

// Update returns a builder for updating this FuncNode.
// Note that you need to call FuncNode.Unwrap() before calling this method if this FuncNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (fn *FuncNode) Update() *FuncNodeUpdateOne {
	return NewFuncNodeClient(fn.config).UpdateOne(fn)
}

// Unwrap unwraps the FuncNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fn *FuncNode) Unwrap() *FuncNode {
	_tx, ok := fn.config.driver.(*txDriver)
	if !ok {
		panic("gen: FuncNode is not a transactional entity")
	}
	fn.config.driver = _tx.drv
	return fn
}

// String implements the fmt.Stringer.
func (fn *FuncNode) String() string {
	var builder strings.Builder
	builder.WriteString("FuncNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fn.ID))
	builder.WriteString("key=")
	builder.WriteString(fn.Key)
	builder.WriteString(", ")
	builder.WriteString("pkg=")
	builder.WriteString(fn.Pkg)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fn.Name)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(fn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(fn.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FuncNodes is a parsable slice of FuncNode.
type FuncNodes []*FuncNode
