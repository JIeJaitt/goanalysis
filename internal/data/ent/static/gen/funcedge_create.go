// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toheart/goanalysis/internal/data/ent/static/gen/funcedge"
)

// FuncEdgeCreate is the builder for creating a FuncEdge entity.
type FuncEdgeCreate struct {
	config
	mutation *FuncEdgeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "CreatedAt" field.
func (fec *FuncEdgeCreate) SetCreatedAt(t time.Time) *FuncEdgeCreate {
	fec.mutation.SetCreatedAt(t)
	return fec
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (fec *FuncEdgeCreate) SetUpdatedAt(t time.Time) *FuncEdgeCreate {
	fec.mutation.SetUpdatedAt(t)
	return fec
}

// SetCallerKey sets the "CallerKey" field.
func (fec *FuncEdgeCreate) SetCallerKey(s string) *FuncEdgeCreate {
	fec.mutation.SetCallerKey(s)
	return fec
}

// SetCalleeKey sets the "CalleeKey" field.
func (fec *FuncEdgeCreate) SetCalleeKey(s string) *FuncEdgeCreate {
	fec.mutation.SetCalleeKey(s)
	return fec
}

// Mutation returns the FuncEdgeMutation object of the builder.
func (fec *FuncEdgeCreate) Mutation() *FuncEdgeMutation {
	return fec.mutation
}

// Save creates the FuncEdge in the database.
func (fec *FuncEdgeCreate) Save(ctx context.Context) (*FuncEdge, error) {
	return withHooks(ctx, fec.sqlSave, fec.mutation, fec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fec *FuncEdgeCreate) SaveX(ctx context.Context) *FuncEdge {
	v, err := fec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fec *FuncEdgeCreate) Exec(ctx context.Context) error {
	_, err := fec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fec *FuncEdgeCreate) ExecX(ctx context.Context) {
	if err := fec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fec *FuncEdgeCreate) check() error {
	if _, ok := fec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`gen: missing required field "FuncEdge.CreatedAt"`)}
	}
	if _, ok := fec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`gen: missing required field "FuncEdge.UpdatedAt"`)}
	}
	if _, ok := fec.mutation.CallerKey(); !ok {
		return &ValidationError{Name: "CallerKey", err: errors.New(`gen: missing required field "FuncEdge.CallerKey"`)}
	}
	if _, ok := fec.mutation.CalleeKey(); !ok {
		return &ValidationError{Name: "CalleeKey", err: errors.New(`gen: missing required field "FuncEdge.CalleeKey"`)}
	}
	return nil
}

func (fec *FuncEdgeCreate) sqlSave(ctx context.Context) (*FuncEdge, error) {
	if err := fec.check(); err != nil {
		return nil, err
	}
	_node, _spec := fec.createSpec()
	if err := sqlgraph.CreateNode(ctx, fec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fec.mutation.id = &_node.ID
	fec.mutation.done = true
	return _node, nil
}

func (fec *FuncEdgeCreate) createSpec() (*FuncEdge, *sqlgraph.CreateSpec) {
	var (
		_node = &FuncEdge{config: fec.config}
		_spec = sqlgraph.NewCreateSpec(funcedge.Table, sqlgraph.NewFieldSpec(funcedge.FieldID, field.TypeInt))
	)
	if value, ok := fec.mutation.CreatedAt(); ok {
		_spec.SetField(funcedge.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fec.mutation.UpdatedAt(); ok {
		_spec.SetField(funcedge.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fec.mutation.CallerKey(); ok {
		_spec.SetField(funcedge.FieldCallerKey, field.TypeString, value)
		_node.CallerKey = value
	}
	if value, ok := fec.mutation.CalleeKey(); ok {
		_spec.SetField(funcedge.FieldCalleeKey, field.TypeString, value)
		_node.CalleeKey = value
	}
	return _node, _spec
}

// FuncEdgeCreateBulk is the builder for creating many FuncEdge entities in bulk.
type FuncEdgeCreateBulk struct {
	config
	err      error
	builders []*FuncEdgeCreate
}

// Save creates the FuncEdge entities in the database.
func (fecb *FuncEdgeCreateBulk) Save(ctx context.Context) ([]*FuncEdge, error) {
	if fecb.err != nil {
		return nil, fecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fecb.builders))
	nodes := make([]*FuncEdge, len(fecb.builders))
	mutators := make([]Mutator, len(fecb.builders))
	for i := range fecb.builders {
		func(i int, root context.Context) {
			builder := fecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FuncEdgeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fecb *FuncEdgeCreateBulk) SaveX(ctx context.Context) []*FuncEdge {
	v, err := fecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fecb *FuncEdgeCreateBulk) Exec(ctx context.Context) error {
	_, err := fecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fecb *FuncEdgeCreateBulk) ExecX(ctx context.Context) {
	if err := fecb.Exec(ctx); err != nil {
		panic(err)
	}
}
