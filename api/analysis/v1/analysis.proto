syntax = "proto3";

package analysis.v1;

import "google/api/annotations.proto";

option go_package = "github.com/toheart/goanalysis/api/analysis/v1;v1";

// The greeting service definition.
service Analysis {
  // Sends a greeting
  rpc GetAnalysis (AnalysisRequest) returns (AnalysisReply) {
    option (google.api.http) = {
      post: "/analysis/{name}"
      body: "*"
    };
  }

  rpc GetAnalysisByGID (AnalysisByGIDRequest) returns (AnalysisByGIDReply) {
    option (google.api.http) = {
      post: "/api/runtime/traces/{gid}"
      body: "*"
    };
  }

  rpc GetAllGIDs (GetAllGIDsReq) returns (GetAllGIDsReply) {
    option (google.api.http) = {
      post: "/api/runtime/gids"
      body: "*"
    };
  }
  rpc GetParamsByID (GetParamsByIDReq) returns (GetParamsByIDReply) {
    option (google.api.http) = {
      post: "/api/runtime/params/{id}"
      body: "*"
    };
  }

  rpc GetAllFunctionName (GetAllFunctionNameReq) returns (GetAllFunctionNameReply) {
    option (google.api.http) = {
      post: "/api/runtime/functions"
      body: "*"
    };
  }
  rpc GetGidsByFunctionName (GetGidsByFunctionNameReq) returns (GetGidsByFunctionNameReply) {
    option (google.api.http) = {
      post: "/api/runtime/gids/function"
      body: "*"
    };
  }
  
  // 将VerifyProjectPath重定向到CheckDatabase
  rpc VerifyProjectPath (VerifyProjectPathReq) returns (VerifyProjectPathReply) {
    option (google.api.http) = {
      post: "/api/runtime/verify/path"
      body: "*"
    };
  }

  rpc GetTraceGraph(GetTraceGraphReq) returns (GetTraceGraphReply) {
    option (google.api.http) = {
      post: "/api/runtime/traces/graph"
      body: "*"
    };
  }

  // GetTracesByParentFunc 根据父函数ID获取函数调用
  rpc GetTracesByParentFunc(GetTracesByParentFuncReq) returns (GetTracesByParentFuncReply) {
    option (google.api.http) = {
      post: "/api/runtime/traces/parent/{parent_id}"
      body: "*"
    };
  }
  
  // GetAllParentIds 获取所有的父函数ID
  rpc GetAllParentIds(GetAllParentIdsReq) returns (GetAllParentIdsReply) {
    option (google.api.http) = {
      post: "/api/runtime/functions/parent-ids"
      body: "*"
    };
  }
  
  // GetChildFunctions 获取函数的子函数
  rpc GetChildFunctions(GetChildFunctionsReq) returns (GetChildFunctionsReply) {
    option (google.api.http) = {
      post: "/api/runtime/functions/{parent_id}/children"
      body: "*"
    };
  }

  // GetHotFunctions 获取热点函数分析数据
  rpc GetHotFunctions(GetHotFunctionsReq) returns (GetHotFunctionsReply) {
    option (google.api.http) = {
      post: "/api/runtime/hot-functions"
      body: "*"
    };
  }
  
  // GetGoroutineStats 获取Goroutine统计信息
  rpc GetGoroutineStats(GetGoroutineStatsReq) returns (GetGoroutineStatsReply) {
    option (google.api.http) = {
      post: "/api/runtime/goroutine-stats"
      body: "*"
    };
  }

  // GetFunctionAnalysis 获取函数调用关系分析
  rpc GetFunctionAnalysis(GetFunctionAnalysisReq) returns (GetFunctionAnalysisReply) {
    option (google.api.http) = {
      post: "/api/runtime/function/analysis"
      body: "*"
    };
  }

  // GetFunctionCallGraph 获取函数调用关系图
  rpc GetFunctionCallGraph(GetFunctionCallGraphReq) returns (GetFunctionCallGraphReply) {
    option (google.api.http) = {
      post: "/api/runtime/function/{function_name}/graph"
      body: "*"
      additional_bindings {
        post: "/api/runtime/function/graph"
        body: "*"
      }
    };
  }

  // InstrumentProject 对项目进行插桩
  rpc InstrumentProject(InstrumentProjectReq) returns (InstrumentProjectReply) {
    option (google.api.http) = {
      post: "/api/runtime/instrument"
      body: "*"
    };
  }
  
  // GetUnfinishedFunctions 获取未完成的函数列表
  rpc GetUnfinishedFunctions(GetUnfinishedFunctionsReq) returns (GetUnfinishedFunctionsReply) {
    option (google.api.http) = {
      post: "/api/runtime/unfinished-functions"
      body: "*"
    };
  }
  
  // 获取运行时树状图数据
  rpc GetTreeGraph (GetTreeGraphReq) returns (GetTreeGraphReply) {
    option (google.api.http) = {
      post: "/api/runtime/tree-graph"
      body: "*"
    };
  }

  // 根据GID获取多棵树状图数据
  rpc GetTreeGraphByGID (GetTreeGraphByGIDReq) returns (GetTreeGraphByGIDReply) {
    option (google.api.http) = {
      post: "/api/runtime/tree-graph/gid"
      body: "*"
    };
  }
  
  // GetFunctionHotPaths 获取函数热点路径分析
  rpc GetFunctionHotPaths(GetFunctionHotPathsReq) returns (GetFunctionHotPathsReply) {
    option (google.api.http) = {
      post: "/api/runtime/hot-paths"
      body: "*"
    };
  }
  
  // GetFunctionCallStats 获取函数调用统计分析
  rpc GetFunctionCallStats(GetFunctionCallStatsReq) returns (GetFunctionCallStatsReply) {
    option (google.api.http) = {
      post: "/api/runtime/call-stats"
      body: "*"
    };
  }
  
  // GetPerformanceAnomalies 获取性能异常检测结果
  rpc GetPerformanceAnomalies(GetPerformanceAnomaliesReq) returns (GetPerformanceAnomaliesReply) {
    option (google.api.http) = {
      post: "/api/runtime/performance-anomalies"
      body: "*"
    };
  }
}


message VerifyProjectPathReq {
  string path = 1;
}

message VerifyProjectPathReply {
  bool verified = 1;
}

message GetGidsByFunctionNameReq {
  string functionName = 1;
  string path = 2;
  bool includeMetrics = 3; // 是否包含调用深度和执行时间等指标
}

message GetGidsByFunctionNameReply {
    message Body{
    uint64 gid = 1;
    string initialFunc = 2;
    int32 depth = 3; // 调用深度
    string executionTime = 4; // 执行时间
    bool isFinished = 5; // 是否完成
  }
  repeated Body body = 1;
  int32 total = 2; // 总的 GID 数量
}

message GetAllFunctionNameReq {
  string dbpath = 1; // 数据库路径
}

message GetAllFunctionNameReply {
  repeated string functionNames = 1;
}

message GenerateImageReq {
  uint64 gid = 1;
  string dbpath = 2; // 数据库路径
}

message GenerateImageReply {
  string image = 1;
} 

// The request message containing the user's name.
message AnalysisRequest {
  string name = 1;
  string dbpath = 2; // 数据库路径
}

// The response message containing the greetings
message AnalysisReply {
  string message = 1;
}

message AnalysisByGIDRequest {
  uint64 gid = 1;
  string dbpath = 2; // 数据库路径
}

message TraceParams {
  int32 pos = 1;
  string param = 2;
}

message AnalysisByGIDReply {
message TraceData {
  int32 id = 1;
  string name = 2;
  uint64 gid = 3;
  int32 indent = 4;
  repeated TraceParams params = 5;
  int32 paramCount = 6;
  string timeCost = 7;
  int64 parent_id = 8; // 父函数ID
}
  repeated TraceData trace_data = 1;
}

message GetAllGIDsReq {
  int32 page = 1; // 当前页
  int32 limit = 2; // 每页条目数
  bool includeMetrics = 3; // 是否包含调用深度和执行时间等指标
  string dbpath = 4; // 数据库路径
}

message GetAllGIDsReply {
  message Body{
    uint64 gid = 1;
    string initialFunc = 2;
    int32 depth = 3; // 调用深度
    string executionTime = 4; // 执行时间
    bool isFinished = 5; // 是否完成
  }
  repeated Body body = 1;
  int32 total = 2; // 总的 GID 数量
}

message GetParamsByIDReq {
  int32 id = 1;
  string dbpath = 2; // 数据库路径
}

message GetParamsByIDReply {
  repeated TraceParams params = 1;
}

message GraphNode {
  string id = 1;
  string name = 2;
  int32 call_count = 3;
  string package = 4;  // 包名
  string time_cost = 5; // 执行耗时
}

message GraphEdge {
  string source = 1;
  string target = 2;
  string label = 3;
  int32 count = 4;  // 调用次数
}

message GetTraceGraphReq {
  uint64 gid = 1;
  string dbpath = 2; // 数据库路径
}

message GetTraceGraphReply {
  repeated GraphNode nodes = 1;
  repeated GraphEdge edges = 2;
}

// GetTracesByParentFuncReq 根据父函数ID获取函数调用的请求
message GetTracesByParentFuncReq {
  int64 parent_id = 1;
  string dbpath = 2; // 数据库路径
}

// GetTracesByParentFuncReply 根据父函数名称获取函数调用的响应
message GetTracesByParentFuncReply {
  message TraceData {
    int32 id = 1;
    string name = 2;
    int32 gid = 3;
    int32 indent = 4;
    repeated TraceParams params = 5;
    int32 paramCount = 6;
    string timeCost = 7;
    int64 parent_id = 8; // 父函数ID
  }
  repeated TraceData trace_data = 1;
}

// GetAllParentIdsReq 获取所有的父函数ID的请求
message GetAllParentIdsReq {
  string dbpath = 1; // 数据库路径
}

// GetAllParentIdsReply 获取所有的父函数ID的响应
message GetAllParentIdsReply {
  repeated int64 parent_ids = 1;
}

// GetChildFunctionsReq 获取函数的子函数的请求
message GetChildFunctionsReq {
  int64 parent_id = 1;
  string dbpath = 2; // 数据库路径
}

// GetChildFunctionsReply 获取函数的子函数的响应
message GetChildFunctionsReply {
  repeated string child_functions = 1;
}

// GetHotFunctionsReq 获取热点函数的请求
message GetHotFunctionsReq {
  string sort_by = 1; // 排序方式: "calls" 或 "time"
  string dbpath = 2; // 数据库路径
}

// GetHotFunctionsReply 获取热点函数的响应
message GetHotFunctionsReply {
  message HotFunction {
    string name = 1;     // 函数名称
    string package = 2;  // 包名
    int32 call_count = 3; // 调用次数
    string total_time = 4; // 总耗时
    string avg_time = 5;   // 平均耗时
  }
  repeated HotFunction functions = 1; // 热点函数列表
}

// GetGoroutineStatsReq 获取Goroutine统计信息的请求
message GetGoroutineStatsReq {
  string dbpath = 1; // 数据库路径
}

// GetGoroutineStatsReply 获取Goroutine统计信息的响应
message GetGoroutineStatsReply {
  int32 active = 1;       // 活跃Goroutine数量
  string avg_time = 2;    // 平均执行时间
  int32 max_depth = 3;    // 最大调用深度
}

// GetFunctionAnalysisReq 获取函数调用关系分析的请求
message GetFunctionAnalysisReq {
  string functionName = 1; // 函数名称
  string type = 2;         // 查询类型: "caller" 或 "callee"
  string path = 3;         // 项目路径
}

// GetFunctionAnalysisReply 获取函数调用关系分析的响应
message GetFunctionAnalysisReply {
  message FunctionNode {
    string id = 1;           // 节点ID
    string name = 2;         // 函数名称
    string package = 3;      // 包名
    int32 call_count = 4;    // 调用次数
    string avg_time = 5;     // 平均耗时
    repeated FunctionNode children = 6; // 子节点
  }
  
  repeated FunctionNode callData = 1; // 调用关系数据
}

// GetFunctionCallGraphReq 获取函数调用关系图的请求
message GetFunctionCallGraphReq {
  string function_name = 1; // 函数名称
  int32 depth = 2;          // 调用深度，默认为2
  string direction = 3;     // 方向: "caller"(调用者), "callee"(被调用), "both"(双向)
  string dbpath = 4;        // 数据库路径
}

// GetFunctionCallGraphReply 获取函数调用关系图的响应
message GetFunctionCallGraphReply {
  message GraphNode {
    string id = 1;           // 节点ID
    string name = 2;         // 函数名称
    string package = 3;      // 包名
    int32 call_count = 4;    // 调用次数
    string avg_time = 5;     // 平均耗时
    string node_type = 6;    // 节点类型: "root", "caller", "callee"
  }
  
  message GraphEdge {
    string source = 1;       // 源节点ID
    string target = 2;       // 目标节点ID
    string label = 3;        // 边标签
    string edge_type = 4;    // 边类型: "caller_to_root", "root_to_callee"
  }
  
  repeated GraphNode nodes = 1; // 图节点
  repeated GraphEdge edges = 2; // 图边
}

// 获取静态分析数据库文件列表请求
message GetStaticDbFilesRequest {
}

// 静态分析数据库文件信息
message DbFileInfo {
  string path = 1;
  string name = 2;
  int64 size = 3;
  string create_time = 4;
}

// 获取静态分析数据库文件列表响应
message GetStaticDbFilesResponse {
  repeated DbFileInfo files = 1;
}

// 分析项目路径请求
message AnalyzeProjectPathRequest {
  string path = 1;
}

// 分析项目路径响应
message AnalyzeProjectPathResponse {
  bool success = 1;
  string message = 2;
  string db_path = 3;
}

// 分析数据库文件请求
message AnalyzeDbFileRequest {
  string db_path = 1;
}

// 包依赖关系
message PackageDependency {
  string source = 1;
  string target = 2;
  int32 count = 3;
}

// 热点函数
message HotFunction {
  string name = 1;
  int32 call_count = 2;
}

// 分析数据库文件响应
message AnalyzeDbFileResponse {
  int32 total_functions = 1;
  int32 total_calls = 2;
  int32 total_packages = 3;
  repeated PackageDependency package_dependencies = 4;
  repeated HotFunction hot_functions = 5;
}

// 插桩请求
message InstrumentProjectReq {
  string path = 1; // 项目路径
}

// 插桩响应
message InstrumentProjectReply {
  bool success = 1; // 是否成功
  string message = 2; // 消息
}

// GetUnfinishedFunctions 请求
message GetUnfinishedFunctionsReq {
  string dbpath = 1; // 数据库路径
  int64 threshold = 2; // 阻塞时间阈值（毫秒）
  int32 page = 3; // 当前页码
  int32 limit = 4; // 每页数量
}

// GetUnfinishedFunctions 响应
message GetUnfinishedFunctionsReply {
  message UnfinishedFunction {
    string name = 1; // 函数名称
    uint64 gid = 2; // goroutine ID
    string running_time = 3; // 运行时间
    bool is_blocking = 4; // 是否阻塞
    int64 function_id = 5; // 函数ID
  }
  repeated UnfinishedFunction functions = 1; // 未完成函数列表
  int32 total = 2; // 总数
}

// 获取树状图请求
message GetTreeGraphReq {
  string db_path = 1; // 数据库路径
  string function_name = 2; // 函数名称
  string chain_type = 3; // 链路类型: "upstream"(上游调用), "downstream"(下游调用), "full"(全链路)
}


// 树状图节点
message TreeNode {
  string name = 1; // 节点名称
  int64 value = 2; // 值，只在tooltip中显示
  bool collapsed = 3; // 是否默认折叠
  repeated TreeNode children = 4; // 子节点
}

// 获取树状图响应
message GetTreeGraphReply {
  repeated TreeNode trees = 1; // 多棵树
}

// 根据GID获取树状图请求
message GetTreeGraphByGIDReq {
  string db_path = 1; // 数据库路径
  uint64 gid = 2;     // Goroutine ID
}

// 根据GID获取树状图响应 - 返回多棵树
message GetTreeGraphByGIDReply {
  repeated TreeNode trees = 1; // 多棵树
}

// 获取函数热点路径请求
message GetFunctionHotPathsReq {
  string db_path = 1; // 数据库路径
  string function_name = 2; // 函数名称（可选，不提供则分析所有函数）
  int32 limit = 3; // 返回结果数量限制
}

// 热点路径信息
message HotPathInfo {
  repeated string path = 1; // 路径上的函数名称序列
  int32 call_count = 2; // 调用次数
  string total_time = 3; // 总耗时
  string avg_time = 4; // 平均耗时
}

// 获取函数热点路径响应
message GetFunctionHotPathsReply {
  repeated HotPathInfo paths = 1; // 热点路径列表
}

// 获取函数调用统计请求
message GetFunctionCallStatsReq {
  string db_path = 1; // 数据库路径
  string function_name = 2; // 函数名称（可选，不提供则分析所有函数）
}

// 函数调用统计信息
message FunctionCallStats {
  string name = 1; // 函数名称
  string package = 2; // 包名
  int32 call_count = 3; // 调用次数
  int32 caller_count = 4; // 调用方数量
  int32 callee_count = 5; // 被调用方数量
  string avg_time = 6; // 平均执行时间
  string max_time = 7; // 最大执行时间
  string min_time = 8; // 最小执行时间
  double time_std_dev = 9; // 执行时间标准差
}

// 获取函数调用统计响应
message GetFunctionCallStatsReply {
  repeated FunctionCallStats stats = 1; // 函数调用统计列表
}

// 获取性能异常检测请求
message GetPerformanceAnomaliesReq {
  string db_path = 1; // 数据库路径
  string function_name = 2; // 函数名称（可选，不提供则检测所有函数）
  double threshold = 3; // 异常阈值（标准差倍数），默认为2.0
}

// 性能异常信息
message PerformanceAnomaly {
  string name = 1; // 函数名称
  string package = 2; // 包名
  string anomaly_type = 3; // 异常类型: "time_variance"(时间波动), "depth_anomaly"(调用深度异常), "frequency_anomaly"(调用频率异常)
  string description = 4; // 异常描述
  double severity = 5; // 严重程度 (0.0-1.0)
  map<string, string> details = 6; // 详细信息
}

// 获取性能异常检测响应
message GetPerformanceAnomaliesReply {
  repeated PerformanceAnomaly anomalies = 1; // 性能异常列表
}
