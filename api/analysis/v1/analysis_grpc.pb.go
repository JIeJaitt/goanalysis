// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: analysis/v1/analysis.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Analysis_GetAnalysis_FullMethodName             = "/analysis.v1.Analysis/GetAnalysis"
	Analysis_GetAnalysisByGID_FullMethodName        = "/analysis.v1.Analysis/GetAnalysisByGID"
	Analysis_GetAllGIDs_FullMethodName              = "/analysis.v1.Analysis/GetAllGIDs"
	Analysis_GetParamsByID_FullMethodName           = "/analysis.v1.Analysis/GetParamsByID"
	Analysis_GetAllFunctionName_FullMethodName      = "/analysis.v1.Analysis/GetAllFunctionName"
	Analysis_GetGidsByFunctionName_FullMethodName   = "/analysis.v1.Analysis/GetGidsByFunctionName"
	Analysis_VerifyProjectPath_FullMethodName       = "/analysis.v1.Analysis/VerifyProjectPath"
	Analysis_GetTraceGraph_FullMethodName           = "/analysis.v1.Analysis/GetTraceGraph"
	Analysis_GetTracesByParentFunc_FullMethodName   = "/analysis.v1.Analysis/GetTracesByParentFunc"
	Analysis_GetAllParentIds_FullMethodName         = "/analysis.v1.Analysis/GetAllParentIds"
	Analysis_GetChildFunctions_FullMethodName       = "/analysis.v1.Analysis/GetChildFunctions"
	Analysis_GetHotFunctions_FullMethodName         = "/analysis.v1.Analysis/GetHotFunctions"
	Analysis_GetGoroutineStats_FullMethodName       = "/analysis.v1.Analysis/GetGoroutineStats"
	Analysis_GetFunctionAnalysis_FullMethodName     = "/analysis.v1.Analysis/GetFunctionAnalysis"
	Analysis_GetFunctionCallGraph_FullMethodName    = "/analysis.v1.Analysis/GetFunctionCallGraph"
	Analysis_InstrumentProject_FullMethodName       = "/analysis.v1.Analysis/InstrumentProject"
	Analysis_GetUnfinishedFunctions_FullMethodName  = "/analysis.v1.Analysis/GetUnfinishedFunctions"
	Analysis_GetTreeGraph_FullMethodName            = "/analysis.v1.Analysis/GetTreeGraph"
	Analysis_GetTreeGraphByGID_FullMethodName       = "/analysis.v1.Analysis/GetTreeGraphByGID"
	Analysis_GetFunctionHotPaths_FullMethodName     = "/analysis.v1.Analysis/GetFunctionHotPaths"
	Analysis_GetFunctionCallStats_FullMethodName    = "/analysis.v1.Analysis/GetFunctionCallStats"
	Analysis_GetPerformanceAnomalies_FullMethodName = "/analysis.v1.Analysis/GetPerformanceAnomalies"
)

// AnalysisClient is the client API for Analysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type AnalysisClient interface {
	// Sends a greeting
	GetAnalysis(ctx context.Context, in *AnalysisRequest, opts ...grpc.CallOption) (*AnalysisReply, error)
	GetAnalysisByGID(ctx context.Context, in *AnalysisByGIDRequest, opts ...grpc.CallOption) (*AnalysisByGIDReply, error)
	GetAllGIDs(ctx context.Context, in *GetAllGIDsReq, opts ...grpc.CallOption) (*GetAllGIDsReply, error)
	GetParamsByID(ctx context.Context, in *GetParamsByIDReq, opts ...grpc.CallOption) (*GetParamsByIDReply, error)
	GetAllFunctionName(ctx context.Context, in *GetAllFunctionNameReq, opts ...grpc.CallOption) (*GetAllFunctionNameReply, error)
	GetGidsByFunctionName(ctx context.Context, in *GetGidsByFunctionNameReq, opts ...grpc.CallOption) (*GetGidsByFunctionNameReply, error)
	// 将VerifyProjectPath重定向到CheckDatabase
	VerifyProjectPath(ctx context.Context, in *VerifyProjectPathReq, opts ...grpc.CallOption) (*VerifyProjectPathReply, error)
	GetTraceGraph(ctx context.Context, in *GetTraceGraphReq, opts ...grpc.CallOption) (*GetTraceGraphReply, error)
	// GetTracesByParentFunc 根据父函数ID获取函数调用
	GetTracesByParentFunc(ctx context.Context, in *GetTracesByParentFuncReq, opts ...grpc.CallOption) (*GetTracesByParentFuncReply, error)
	// GetAllParentIds 获取所有的父函数ID
	GetAllParentIds(ctx context.Context, in *GetAllParentIdsReq, opts ...grpc.CallOption) (*GetAllParentIdsReply, error)
	// GetChildFunctions 获取函数的子函数
	GetChildFunctions(ctx context.Context, in *GetChildFunctionsReq, opts ...grpc.CallOption) (*GetChildFunctionsReply, error)
	// GetHotFunctions 获取热点函数分析数据
	GetHotFunctions(ctx context.Context, in *GetHotFunctionsReq, opts ...grpc.CallOption) (*GetHotFunctionsReply, error)
	// GetGoroutineStats 获取Goroutine统计信息
	GetGoroutineStats(ctx context.Context, in *GetGoroutineStatsReq, opts ...grpc.CallOption) (*GetGoroutineStatsReply, error)
	// GetFunctionAnalysis 获取函数调用关系分析
	GetFunctionAnalysis(ctx context.Context, in *GetFunctionAnalysisReq, opts ...grpc.CallOption) (*GetFunctionAnalysisReply, error)
	// GetFunctionCallGraph 获取函数调用关系图
	GetFunctionCallGraph(ctx context.Context, in *GetFunctionCallGraphReq, opts ...grpc.CallOption) (*GetFunctionCallGraphReply, error)
	// InstrumentProject 对项目进行插桩
	InstrumentProject(ctx context.Context, in *InstrumentProjectReq, opts ...grpc.CallOption) (*InstrumentProjectReply, error)
	// GetUnfinishedFunctions 获取未完成的函数列表
	GetUnfinishedFunctions(ctx context.Context, in *GetUnfinishedFunctionsReq, opts ...grpc.CallOption) (*GetUnfinishedFunctionsReply, error)
	// 获取运行时树状图数据
	GetTreeGraph(ctx context.Context, in *GetTreeGraphReq, opts ...grpc.CallOption) (*GetTreeGraphReply, error)
	// 根据GID获取多棵树状图数据
	GetTreeGraphByGID(ctx context.Context, in *GetTreeGraphByGIDReq, opts ...grpc.CallOption) (*GetTreeGraphByGIDReply, error)
	// GetFunctionHotPaths 获取函数热点路径分析
	GetFunctionHotPaths(ctx context.Context, in *GetFunctionHotPathsReq, opts ...grpc.CallOption) (*GetFunctionHotPathsReply, error)
	// GetFunctionCallStats 获取函数调用统计分析
	GetFunctionCallStats(ctx context.Context, in *GetFunctionCallStatsReq, opts ...grpc.CallOption) (*GetFunctionCallStatsReply, error)
	// GetPerformanceAnomalies 获取性能异常检测结果
	GetPerformanceAnomalies(ctx context.Context, in *GetPerformanceAnomaliesReq, opts ...grpc.CallOption) (*GetPerformanceAnomaliesReply, error)
}

type analysisClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysisClient(cc grpc.ClientConnInterface) AnalysisClient {
	return &analysisClient{cc}
}

func (c *analysisClient) GetAnalysis(ctx context.Context, in *AnalysisRequest, opts ...grpc.CallOption) (*AnalysisReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalysisReply)
	err := c.cc.Invoke(ctx, Analysis_GetAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetAnalysisByGID(ctx context.Context, in *AnalysisByGIDRequest, opts ...grpc.CallOption) (*AnalysisByGIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalysisByGIDReply)
	err := c.cc.Invoke(ctx, Analysis_GetAnalysisByGID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetAllGIDs(ctx context.Context, in *GetAllGIDsReq, opts ...grpc.CallOption) (*GetAllGIDsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGIDsReply)
	err := c.cc.Invoke(ctx, Analysis_GetAllGIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetParamsByID(ctx context.Context, in *GetParamsByIDReq, opts ...grpc.CallOption) (*GetParamsByIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParamsByIDReply)
	err := c.cc.Invoke(ctx, Analysis_GetParamsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetAllFunctionName(ctx context.Context, in *GetAllFunctionNameReq, opts ...grpc.CallOption) (*GetAllFunctionNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllFunctionNameReply)
	err := c.cc.Invoke(ctx, Analysis_GetAllFunctionName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetGidsByFunctionName(ctx context.Context, in *GetGidsByFunctionNameReq, opts ...grpc.CallOption) (*GetGidsByFunctionNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGidsByFunctionNameReply)
	err := c.cc.Invoke(ctx, Analysis_GetGidsByFunctionName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) VerifyProjectPath(ctx context.Context, in *VerifyProjectPathReq, opts ...grpc.CallOption) (*VerifyProjectPathReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyProjectPathReply)
	err := c.cc.Invoke(ctx, Analysis_VerifyProjectPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetTraceGraph(ctx context.Context, in *GetTraceGraphReq, opts ...grpc.CallOption) (*GetTraceGraphReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTraceGraphReply)
	err := c.cc.Invoke(ctx, Analysis_GetTraceGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetTracesByParentFunc(ctx context.Context, in *GetTracesByParentFuncReq, opts ...grpc.CallOption) (*GetTracesByParentFuncReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTracesByParentFuncReply)
	err := c.cc.Invoke(ctx, Analysis_GetTracesByParentFunc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetAllParentIds(ctx context.Context, in *GetAllParentIdsReq, opts ...grpc.CallOption) (*GetAllParentIdsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllParentIdsReply)
	err := c.cc.Invoke(ctx, Analysis_GetAllParentIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetChildFunctions(ctx context.Context, in *GetChildFunctionsReq, opts ...grpc.CallOption) (*GetChildFunctionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildFunctionsReply)
	err := c.cc.Invoke(ctx, Analysis_GetChildFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetHotFunctions(ctx context.Context, in *GetHotFunctionsReq, opts ...grpc.CallOption) (*GetHotFunctionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotFunctionsReply)
	err := c.cc.Invoke(ctx, Analysis_GetHotFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetGoroutineStats(ctx context.Context, in *GetGoroutineStatsReq, opts ...grpc.CallOption) (*GetGoroutineStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoroutineStatsReply)
	err := c.cc.Invoke(ctx, Analysis_GetGoroutineStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetFunctionAnalysis(ctx context.Context, in *GetFunctionAnalysisReq, opts ...grpc.CallOption) (*GetFunctionAnalysisReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionAnalysisReply)
	err := c.cc.Invoke(ctx, Analysis_GetFunctionAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetFunctionCallGraph(ctx context.Context, in *GetFunctionCallGraphReq, opts ...grpc.CallOption) (*GetFunctionCallGraphReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionCallGraphReply)
	err := c.cc.Invoke(ctx, Analysis_GetFunctionCallGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) InstrumentProject(ctx context.Context, in *InstrumentProjectReq, opts ...grpc.CallOption) (*InstrumentProjectReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstrumentProjectReply)
	err := c.cc.Invoke(ctx, Analysis_InstrumentProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetUnfinishedFunctions(ctx context.Context, in *GetUnfinishedFunctionsReq, opts ...grpc.CallOption) (*GetUnfinishedFunctionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnfinishedFunctionsReply)
	err := c.cc.Invoke(ctx, Analysis_GetUnfinishedFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetTreeGraph(ctx context.Context, in *GetTreeGraphReq, opts ...grpc.CallOption) (*GetTreeGraphReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreeGraphReply)
	err := c.cc.Invoke(ctx, Analysis_GetTreeGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetTreeGraphByGID(ctx context.Context, in *GetTreeGraphByGIDReq, opts ...grpc.CallOption) (*GetTreeGraphByGIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreeGraphByGIDReply)
	err := c.cc.Invoke(ctx, Analysis_GetTreeGraphByGID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetFunctionHotPaths(ctx context.Context, in *GetFunctionHotPathsReq, opts ...grpc.CallOption) (*GetFunctionHotPathsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionHotPathsReply)
	err := c.cc.Invoke(ctx, Analysis_GetFunctionHotPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetFunctionCallStats(ctx context.Context, in *GetFunctionCallStatsReq, opts ...grpc.CallOption) (*GetFunctionCallStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionCallStatsReply)
	err := c.cc.Invoke(ctx, Analysis_GetFunctionCallStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisClient) GetPerformanceAnomalies(ctx context.Context, in *GetPerformanceAnomaliesReq, opts ...grpc.CallOption) (*GetPerformanceAnomaliesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPerformanceAnomaliesReply)
	err := c.cc.Invoke(ctx, Analysis_GetPerformanceAnomalies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysisServer is the server API for Analysis service.
// All implementations must embed UnimplementedAnalysisServer
// for forward compatibility.
//
// The greeting service definition.
type AnalysisServer interface {
	// Sends a greeting
	GetAnalysis(context.Context, *AnalysisRequest) (*AnalysisReply, error)
	GetAnalysisByGID(context.Context, *AnalysisByGIDRequest) (*AnalysisByGIDReply, error)
	GetAllGIDs(context.Context, *GetAllGIDsReq) (*GetAllGIDsReply, error)
	GetParamsByID(context.Context, *GetParamsByIDReq) (*GetParamsByIDReply, error)
	GetAllFunctionName(context.Context, *GetAllFunctionNameReq) (*GetAllFunctionNameReply, error)
	GetGidsByFunctionName(context.Context, *GetGidsByFunctionNameReq) (*GetGidsByFunctionNameReply, error)
	// 将VerifyProjectPath重定向到CheckDatabase
	VerifyProjectPath(context.Context, *VerifyProjectPathReq) (*VerifyProjectPathReply, error)
	GetTraceGraph(context.Context, *GetTraceGraphReq) (*GetTraceGraphReply, error)
	// GetTracesByParentFunc 根据父函数ID获取函数调用
	GetTracesByParentFunc(context.Context, *GetTracesByParentFuncReq) (*GetTracesByParentFuncReply, error)
	// GetAllParentIds 获取所有的父函数ID
	GetAllParentIds(context.Context, *GetAllParentIdsReq) (*GetAllParentIdsReply, error)
	// GetChildFunctions 获取函数的子函数
	GetChildFunctions(context.Context, *GetChildFunctionsReq) (*GetChildFunctionsReply, error)
	// GetHotFunctions 获取热点函数分析数据
	GetHotFunctions(context.Context, *GetHotFunctionsReq) (*GetHotFunctionsReply, error)
	// GetGoroutineStats 获取Goroutine统计信息
	GetGoroutineStats(context.Context, *GetGoroutineStatsReq) (*GetGoroutineStatsReply, error)
	// GetFunctionAnalysis 获取函数调用关系分析
	GetFunctionAnalysis(context.Context, *GetFunctionAnalysisReq) (*GetFunctionAnalysisReply, error)
	// GetFunctionCallGraph 获取函数调用关系图
	GetFunctionCallGraph(context.Context, *GetFunctionCallGraphReq) (*GetFunctionCallGraphReply, error)
	// InstrumentProject 对项目进行插桩
	InstrumentProject(context.Context, *InstrumentProjectReq) (*InstrumentProjectReply, error)
	// GetUnfinishedFunctions 获取未完成的函数列表
	GetUnfinishedFunctions(context.Context, *GetUnfinishedFunctionsReq) (*GetUnfinishedFunctionsReply, error)
	// 获取运行时树状图数据
	GetTreeGraph(context.Context, *GetTreeGraphReq) (*GetTreeGraphReply, error)
	// 根据GID获取多棵树状图数据
	GetTreeGraphByGID(context.Context, *GetTreeGraphByGIDReq) (*GetTreeGraphByGIDReply, error)
	// GetFunctionHotPaths 获取函数热点路径分析
	GetFunctionHotPaths(context.Context, *GetFunctionHotPathsReq) (*GetFunctionHotPathsReply, error)
	// GetFunctionCallStats 获取函数调用统计分析
	GetFunctionCallStats(context.Context, *GetFunctionCallStatsReq) (*GetFunctionCallStatsReply, error)
	// GetPerformanceAnomalies 获取性能异常检测结果
	GetPerformanceAnomalies(context.Context, *GetPerformanceAnomaliesReq) (*GetPerformanceAnomaliesReply, error)
	mustEmbedUnimplementedAnalysisServer()
}

// UnimplementedAnalysisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalysisServer struct{}

func (UnimplementedAnalysisServer) GetAnalysis(context.Context, *AnalysisRequest) (*AnalysisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (UnimplementedAnalysisServer) GetAnalysisByGID(context.Context, *AnalysisByGIDRequest) (*AnalysisByGIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysisByGID not implemented")
}
func (UnimplementedAnalysisServer) GetAllGIDs(context.Context, *GetAllGIDsReq) (*GetAllGIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGIDs not implemented")
}
func (UnimplementedAnalysisServer) GetParamsByID(context.Context, *GetParamsByIDReq) (*GetParamsByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParamsByID not implemented")
}
func (UnimplementedAnalysisServer) GetAllFunctionName(context.Context, *GetAllFunctionNameReq) (*GetAllFunctionNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFunctionName not implemented")
}
func (UnimplementedAnalysisServer) GetGidsByFunctionName(context.Context, *GetGidsByFunctionNameReq) (*GetGidsByFunctionNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGidsByFunctionName not implemented")
}
func (UnimplementedAnalysisServer) VerifyProjectPath(context.Context, *VerifyProjectPathReq) (*VerifyProjectPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProjectPath not implemented")
}
func (UnimplementedAnalysisServer) GetTraceGraph(context.Context, *GetTraceGraphReq) (*GetTraceGraphReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraceGraph not implemented")
}
func (UnimplementedAnalysisServer) GetTracesByParentFunc(context.Context, *GetTracesByParentFuncReq) (*GetTracesByParentFuncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracesByParentFunc not implemented")
}
func (UnimplementedAnalysisServer) GetAllParentIds(context.Context, *GetAllParentIdsReq) (*GetAllParentIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParentIds not implemented")
}
func (UnimplementedAnalysisServer) GetChildFunctions(context.Context, *GetChildFunctionsReq) (*GetChildFunctionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildFunctions not implemented")
}
func (UnimplementedAnalysisServer) GetHotFunctions(context.Context, *GetHotFunctionsReq) (*GetHotFunctionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotFunctions not implemented")
}
func (UnimplementedAnalysisServer) GetGoroutineStats(context.Context, *GetGoroutineStatsReq) (*GetGoroutineStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoroutineStats not implemented")
}
func (UnimplementedAnalysisServer) GetFunctionAnalysis(context.Context, *GetFunctionAnalysisReq) (*GetFunctionAnalysisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionAnalysis not implemented")
}
func (UnimplementedAnalysisServer) GetFunctionCallGraph(context.Context, *GetFunctionCallGraphReq) (*GetFunctionCallGraphReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionCallGraph not implemented")
}
func (UnimplementedAnalysisServer) InstrumentProject(context.Context, *InstrumentProjectReq) (*InstrumentProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstrumentProject not implemented")
}
func (UnimplementedAnalysisServer) GetUnfinishedFunctions(context.Context, *GetUnfinishedFunctionsReq) (*GetUnfinishedFunctionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfinishedFunctions not implemented")
}
func (UnimplementedAnalysisServer) GetTreeGraph(context.Context, *GetTreeGraphReq) (*GetTreeGraphReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeGraph not implemented")
}
func (UnimplementedAnalysisServer) GetTreeGraphByGID(context.Context, *GetTreeGraphByGIDReq) (*GetTreeGraphByGIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeGraphByGID not implemented")
}
func (UnimplementedAnalysisServer) GetFunctionHotPaths(context.Context, *GetFunctionHotPathsReq) (*GetFunctionHotPathsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionHotPaths not implemented")
}
func (UnimplementedAnalysisServer) GetFunctionCallStats(context.Context, *GetFunctionCallStatsReq) (*GetFunctionCallStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionCallStats not implemented")
}
func (UnimplementedAnalysisServer) GetPerformanceAnomalies(context.Context, *GetPerformanceAnomaliesReq) (*GetPerformanceAnomaliesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceAnomalies not implemented")
}
func (UnimplementedAnalysisServer) mustEmbedUnimplementedAnalysisServer() {}
func (UnimplementedAnalysisServer) testEmbeddedByValue()                  {}

// UnsafeAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysisServer will
// result in compilation errors.
type UnsafeAnalysisServer interface {
	mustEmbedUnimplementedAnalysisServer()
}

func RegisterAnalysisServer(s grpc.ServiceRegistrar, srv AnalysisServer) {
	// If the following call pancis, it indicates UnimplementedAnalysisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Analysis_ServiceDesc, srv)
}

func _Analysis_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetAnalysis(ctx, req.(*AnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetAnalysisByGID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisByGIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetAnalysisByGID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetAnalysisByGID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetAnalysisByGID(ctx, req.(*AnalysisByGIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetAllGIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetAllGIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetAllGIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetAllGIDs(ctx, req.(*GetAllGIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetParamsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamsByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetParamsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetParamsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetParamsByID(ctx, req.(*GetParamsByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetAllFunctionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFunctionNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetAllFunctionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetAllFunctionName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetAllFunctionName(ctx, req.(*GetAllFunctionNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetGidsByFunctionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGidsByFunctionNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetGidsByFunctionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetGidsByFunctionName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetGidsByFunctionName(ctx, req.(*GetGidsByFunctionNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_VerifyProjectPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProjectPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).VerifyProjectPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_VerifyProjectPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).VerifyProjectPath(ctx, req.(*VerifyProjectPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetTraceGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetTraceGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetTraceGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetTraceGraph(ctx, req.(*GetTraceGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetTracesByParentFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracesByParentFuncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetTracesByParentFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetTracesByParentFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetTracesByParentFunc(ctx, req.(*GetTracesByParentFuncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetAllParentIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllParentIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetAllParentIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetAllParentIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetAllParentIds(ctx, req.(*GetAllParentIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetChildFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildFunctionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetChildFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetChildFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetChildFunctions(ctx, req.(*GetChildFunctionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetHotFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotFunctionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetHotFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetHotFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetHotFunctions(ctx, req.(*GetHotFunctionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetGoroutineStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoroutineStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetGoroutineStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetGoroutineStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetGoroutineStats(ctx, req.(*GetGoroutineStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetFunctionAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetFunctionAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetFunctionAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetFunctionAnalysis(ctx, req.(*GetFunctionAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetFunctionCallGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionCallGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetFunctionCallGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetFunctionCallGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetFunctionCallGraph(ctx, req.(*GetFunctionCallGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_InstrumentProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).InstrumentProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_InstrumentProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).InstrumentProject(ctx, req.(*InstrumentProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetUnfinishedFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfinishedFunctionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetUnfinishedFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetUnfinishedFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetUnfinishedFunctions(ctx, req.(*GetUnfinishedFunctionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetTreeGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetTreeGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetTreeGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetTreeGraph(ctx, req.(*GetTreeGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetTreeGraphByGID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeGraphByGIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetTreeGraphByGID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetTreeGraphByGID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetTreeGraphByGID(ctx, req.(*GetTreeGraphByGIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetFunctionHotPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionHotPathsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetFunctionHotPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetFunctionHotPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetFunctionHotPaths(ctx, req.(*GetFunctionHotPathsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetFunctionCallStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionCallStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetFunctionCallStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetFunctionCallStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetFunctionCallStats(ctx, req.(*GetFunctionCallStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analysis_GetPerformanceAnomalies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceAnomaliesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServer).GetPerformanceAnomalies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analysis_GetPerformanceAnomalies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServer).GetPerformanceAnomalies(ctx, req.(*GetPerformanceAnomaliesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Analysis_ServiceDesc is the grpc.ServiceDesc for Analysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analysis.v1.Analysis",
	HandlerType: (*AnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalysis",
			Handler:    _Analysis_GetAnalysis_Handler,
		},
		{
			MethodName: "GetAnalysisByGID",
			Handler:    _Analysis_GetAnalysisByGID_Handler,
		},
		{
			MethodName: "GetAllGIDs",
			Handler:    _Analysis_GetAllGIDs_Handler,
		},
		{
			MethodName: "GetParamsByID",
			Handler:    _Analysis_GetParamsByID_Handler,
		},
		{
			MethodName: "GetAllFunctionName",
			Handler:    _Analysis_GetAllFunctionName_Handler,
		},
		{
			MethodName: "GetGidsByFunctionName",
			Handler:    _Analysis_GetGidsByFunctionName_Handler,
		},
		{
			MethodName: "VerifyProjectPath",
			Handler:    _Analysis_VerifyProjectPath_Handler,
		},
		{
			MethodName: "GetTraceGraph",
			Handler:    _Analysis_GetTraceGraph_Handler,
		},
		{
			MethodName: "GetTracesByParentFunc",
			Handler:    _Analysis_GetTracesByParentFunc_Handler,
		},
		{
			MethodName: "GetAllParentIds",
			Handler:    _Analysis_GetAllParentIds_Handler,
		},
		{
			MethodName: "GetChildFunctions",
			Handler:    _Analysis_GetChildFunctions_Handler,
		},
		{
			MethodName: "GetHotFunctions",
			Handler:    _Analysis_GetHotFunctions_Handler,
		},
		{
			MethodName: "GetGoroutineStats",
			Handler:    _Analysis_GetGoroutineStats_Handler,
		},
		{
			MethodName: "GetFunctionAnalysis",
			Handler:    _Analysis_GetFunctionAnalysis_Handler,
		},
		{
			MethodName: "GetFunctionCallGraph",
			Handler:    _Analysis_GetFunctionCallGraph_Handler,
		},
		{
			MethodName: "InstrumentProject",
			Handler:    _Analysis_InstrumentProject_Handler,
		},
		{
			MethodName: "GetUnfinishedFunctions",
			Handler:    _Analysis_GetUnfinishedFunctions_Handler,
		},
		{
			MethodName: "GetTreeGraph",
			Handler:    _Analysis_GetTreeGraph_Handler,
		},
		{
			MethodName: "GetTreeGraphByGID",
			Handler:    _Analysis_GetTreeGraphByGID_Handler,
		},
		{
			MethodName: "GetFunctionHotPaths",
			Handler:    _Analysis_GetFunctionHotPaths_Handler,
		},
		{
			MethodName: "GetFunctionCallStats",
			Handler:    _Analysis_GetFunctionCallStats_Handler,
		},
		{
			MethodName: "GetPerformanceAnomalies",
			Handler:    _Analysis_GetPerformanceAnomalies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analysis/v1/analysis.proto",
}
