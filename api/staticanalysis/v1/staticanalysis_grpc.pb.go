// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: staticanalysis/v1/staticanalysis.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StaticAnalysis_GetStaticDbFiles_FullMethodName       = "/staticanalysis.v1.StaticAnalysis/GetStaticDbFiles"
	StaticAnalysis_GetAnalysisTaskStatus_FullMethodName  = "/staticanalysis.v1.StaticAnalysis/GetAnalysisTaskStatus"
	StaticAnalysis_AnalyzeProjectPath_FullMethodName     = "/staticanalysis.v1.StaticAnalysis/AnalyzeProjectPath"
	StaticAnalysis_AnalyzeDbFile_FullMethodName          = "/staticanalysis.v1.StaticAnalysis/AnalyzeDbFile"
	StaticAnalysis_GetFunctionAnalysis_FullMethodName    = "/staticanalysis.v1.StaticAnalysis/GetFunctionAnalysis"
	StaticAnalysis_GetFunctionCallGraph_FullMethodName   = "/staticanalysis.v1.StaticAnalysis/GetFunctionCallGraph"
	StaticAnalysis_ListGitLabRepositories_FullMethodName = "/staticanalysis.v1.StaticAnalysis/ListGitLabRepositories"
	StaticAnalysis_CloneGitLabRepository_FullMethodName  = "/staticanalysis.v1.StaticAnalysis/CloneGitLabRepository"
	StaticAnalysis_GetPackageDependencies_FullMethodName = "/staticanalysis.v1.StaticAnalysis/GetPackageDependencies"
	StaticAnalysis_GetHotFunctions_FullMethodName        = "/staticanalysis.v1.StaticAnalysis/GetHotFunctions"
	StaticAnalysis_SearchFunctions_FullMethodName        = "/staticanalysis.v1.StaticAnalysis/SearchFunctions"
	StaticAnalysis_GetFunctionUpstream_FullMethodName    = "/staticanalysis.v1.StaticAnalysis/GetFunctionUpstream"
	StaticAnalysis_GetFunctionDownstream_FullMethodName  = "/staticanalysis.v1.StaticAnalysis/GetFunctionDownstream"
	StaticAnalysis_GetFunctionFullChain_FullMethodName   = "/staticanalysis.v1.StaticAnalysis/GetFunctionFullChain"
	StaticAnalysis_GetTreeGraph_FullMethodName           = "/staticanalysis.v1.StaticAnalysis/GetTreeGraph"
)

// StaticAnalysisClient is the client API for StaticAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 静态分析服务定义
type StaticAnalysisClient interface {
	// 获取静态分析数据库文件列表
	GetStaticDbFiles(ctx context.Context, in *GetStaticDbFilesRequest, opts ...grpc.CallOption) (*GetStaticDbFilesResponse, error)
	// 获取分析任务状态
	GetAnalysisTaskStatus(ctx context.Context, in *GetAnalysisTaskStatusRequest, opts ...grpc.CallOption) (*GetAnalysisTaskStatusResponse, error)
	// 分析项目路径
	AnalyzeProjectPath(ctx context.Context, in *AnalyzeProjectPathRequest, opts ...grpc.CallOption) (*AnalyzeProjectPathResponse, error)
	// 分析数据库文件
	AnalyzeDbFile(ctx context.Context, in *AnalyzeDbFileRequest, opts ...grpc.CallOption) (*AnalyzeDbFileResponse, error)
	// 获取函数调用关系分析
	GetFunctionAnalysis(ctx context.Context, in *GetFunctionAnalysisReq, opts ...grpc.CallOption) (*GetFunctionAnalysisReply, error)
	// 获取函数调用关系图
	GetFunctionCallGraph(ctx context.Context, in *GetFunctionCallGraphReq, opts ...grpc.CallOption) (*GetFunctionCallGraphReply, error)
	// 获取GitLab仓库列表
	ListGitLabRepositories(ctx context.Context, in *ListGitLabRepositoriesRequest, opts ...grpc.CallOption) (*ListGitLabRepositoriesResponse, error)
	// 克隆GitLab仓库
	CloneGitLabRepository(ctx context.Context, in *CloneGitLabRepositoryRequest, opts ...grpc.CallOption) (*CloneGitLabRepositoryResponse, error)
	// 分页获取包依赖关系
	GetPackageDependencies(ctx context.Context, in *GetPackageDependenciesRequest, opts ...grpc.CallOption) (*GetPackageDependenciesResponse, error)
	// 分页获取热点函数
	GetHotFunctions(ctx context.Context, in *GetHotFunctionsRequest, opts ...grpc.CallOption) (*GetHotFunctionsResponse, error)
	// 模糊搜索函数
	SearchFunctions(ctx context.Context, in *SearchFunctionsRequest, opts ...grpc.CallOption) (*SearchFunctionsResponse, error)
	// 获取函数上游调用关系
	GetFunctionUpstream(ctx context.Context, in *GetFunctionUpstreamRequest, opts ...grpc.CallOption) (*GetFunctionUpstreamResponse, error)
	// 获取函数下游调用关系
	GetFunctionDownstream(ctx context.Context, in *GetFunctionDownstreamRequest, opts ...grpc.CallOption) (*GetFunctionDownstreamResponse, error)
	// 获取函数全链路调用关系
	GetFunctionFullChain(ctx context.Context, in *GetFunctionFullChainRequest, opts ...grpc.CallOption) (*GetFunctionFullChainResponse, error)
	// 获取静态分析树状图数据
	GetTreeGraph(ctx context.Context, in *GetTreeGraphReq, opts ...grpc.CallOption) (*GetTreeGraphReply, error)
}

type staticAnalysisClient struct {
	cc grpc.ClientConnInterface
}

func NewStaticAnalysisClient(cc grpc.ClientConnInterface) StaticAnalysisClient {
	return &staticAnalysisClient{cc}
}

func (c *staticAnalysisClient) GetStaticDbFiles(ctx context.Context, in *GetStaticDbFilesRequest, opts ...grpc.CallOption) (*GetStaticDbFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaticDbFilesResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetStaticDbFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetAnalysisTaskStatus(ctx context.Context, in *GetAnalysisTaskStatusRequest, opts ...grpc.CallOption) (*GetAnalysisTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnalysisTaskStatusResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetAnalysisTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) AnalyzeProjectPath(ctx context.Context, in *AnalyzeProjectPathRequest, opts ...grpc.CallOption) (*AnalyzeProjectPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeProjectPathResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_AnalyzeProjectPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) AnalyzeDbFile(ctx context.Context, in *AnalyzeDbFileRequest, opts ...grpc.CallOption) (*AnalyzeDbFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeDbFileResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_AnalyzeDbFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetFunctionAnalysis(ctx context.Context, in *GetFunctionAnalysisReq, opts ...grpc.CallOption) (*GetFunctionAnalysisReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionAnalysisReply)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetFunctionAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetFunctionCallGraph(ctx context.Context, in *GetFunctionCallGraphReq, opts ...grpc.CallOption) (*GetFunctionCallGraphReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionCallGraphReply)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetFunctionCallGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) ListGitLabRepositories(ctx context.Context, in *ListGitLabRepositoriesRequest, opts ...grpc.CallOption) (*ListGitLabRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGitLabRepositoriesResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_ListGitLabRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) CloneGitLabRepository(ctx context.Context, in *CloneGitLabRepositoryRequest, opts ...grpc.CallOption) (*CloneGitLabRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneGitLabRepositoryResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_CloneGitLabRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetPackageDependencies(ctx context.Context, in *GetPackageDependenciesRequest, opts ...grpc.CallOption) (*GetPackageDependenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageDependenciesResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetPackageDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetHotFunctions(ctx context.Context, in *GetHotFunctionsRequest, opts ...grpc.CallOption) (*GetHotFunctionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotFunctionsResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetHotFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) SearchFunctions(ctx context.Context, in *SearchFunctionsRequest, opts ...grpc.CallOption) (*SearchFunctionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFunctionsResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_SearchFunctions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetFunctionUpstream(ctx context.Context, in *GetFunctionUpstreamRequest, opts ...grpc.CallOption) (*GetFunctionUpstreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionUpstreamResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetFunctionUpstream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetFunctionDownstream(ctx context.Context, in *GetFunctionDownstreamRequest, opts ...grpc.CallOption) (*GetFunctionDownstreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionDownstreamResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetFunctionDownstream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetFunctionFullChain(ctx context.Context, in *GetFunctionFullChainRequest, opts ...grpc.CallOption) (*GetFunctionFullChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionFullChainResponse)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetFunctionFullChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticAnalysisClient) GetTreeGraph(ctx context.Context, in *GetTreeGraphReq, opts ...grpc.CallOption) (*GetTreeGraphReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreeGraphReply)
	err := c.cc.Invoke(ctx, StaticAnalysis_GetTreeGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaticAnalysisServer is the server API for StaticAnalysis service.
// All implementations must embed UnimplementedStaticAnalysisServer
// for forward compatibility.
//
// 静态分析服务定义
type StaticAnalysisServer interface {
	// 获取静态分析数据库文件列表
	GetStaticDbFiles(context.Context, *GetStaticDbFilesRequest) (*GetStaticDbFilesResponse, error)
	// 获取分析任务状态
	GetAnalysisTaskStatus(context.Context, *GetAnalysisTaskStatusRequest) (*GetAnalysisTaskStatusResponse, error)
	// 分析项目路径
	AnalyzeProjectPath(context.Context, *AnalyzeProjectPathRequest) (*AnalyzeProjectPathResponse, error)
	// 分析数据库文件
	AnalyzeDbFile(context.Context, *AnalyzeDbFileRequest) (*AnalyzeDbFileResponse, error)
	// 获取函数调用关系分析
	GetFunctionAnalysis(context.Context, *GetFunctionAnalysisReq) (*GetFunctionAnalysisReply, error)
	// 获取函数调用关系图
	GetFunctionCallGraph(context.Context, *GetFunctionCallGraphReq) (*GetFunctionCallGraphReply, error)
	// 获取GitLab仓库列表
	ListGitLabRepositories(context.Context, *ListGitLabRepositoriesRequest) (*ListGitLabRepositoriesResponse, error)
	// 克隆GitLab仓库
	CloneGitLabRepository(context.Context, *CloneGitLabRepositoryRequest) (*CloneGitLabRepositoryResponse, error)
	// 分页获取包依赖关系
	GetPackageDependencies(context.Context, *GetPackageDependenciesRequest) (*GetPackageDependenciesResponse, error)
	// 分页获取热点函数
	GetHotFunctions(context.Context, *GetHotFunctionsRequest) (*GetHotFunctionsResponse, error)
	// 模糊搜索函数
	SearchFunctions(context.Context, *SearchFunctionsRequest) (*SearchFunctionsResponse, error)
	// 获取函数上游调用关系
	GetFunctionUpstream(context.Context, *GetFunctionUpstreamRequest) (*GetFunctionUpstreamResponse, error)
	// 获取函数下游调用关系
	GetFunctionDownstream(context.Context, *GetFunctionDownstreamRequest) (*GetFunctionDownstreamResponse, error)
	// 获取函数全链路调用关系
	GetFunctionFullChain(context.Context, *GetFunctionFullChainRequest) (*GetFunctionFullChainResponse, error)
	// 获取静态分析树状图数据
	GetTreeGraph(context.Context, *GetTreeGraphReq) (*GetTreeGraphReply, error)
	mustEmbedUnimplementedStaticAnalysisServer()
}

// UnimplementedStaticAnalysisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStaticAnalysisServer struct{}

func (UnimplementedStaticAnalysisServer) GetStaticDbFiles(context.Context, *GetStaticDbFilesRequest) (*GetStaticDbFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaticDbFiles not implemented")
}
func (UnimplementedStaticAnalysisServer) GetAnalysisTaskStatus(context.Context, *GetAnalysisTaskStatusRequest) (*GetAnalysisTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysisTaskStatus not implemented")
}
func (UnimplementedStaticAnalysisServer) AnalyzeProjectPath(context.Context, *AnalyzeProjectPathRequest) (*AnalyzeProjectPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeProjectPath not implemented")
}
func (UnimplementedStaticAnalysisServer) AnalyzeDbFile(context.Context, *AnalyzeDbFileRequest) (*AnalyzeDbFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeDbFile not implemented")
}
func (UnimplementedStaticAnalysisServer) GetFunctionAnalysis(context.Context, *GetFunctionAnalysisReq) (*GetFunctionAnalysisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionAnalysis not implemented")
}
func (UnimplementedStaticAnalysisServer) GetFunctionCallGraph(context.Context, *GetFunctionCallGraphReq) (*GetFunctionCallGraphReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionCallGraph not implemented")
}
func (UnimplementedStaticAnalysisServer) ListGitLabRepositories(context.Context, *ListGitLabRepositoriesRequest) (*ListGitLabRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitLabRepositories not implemented")
}
func (UnimplementedStaticAnalysisServer) CloneGitLabRepository(context.Context, *CloneGitLabRepositoryRequest) (*CloneGitLabRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneGitLabRepository not implemented")
}
func (UnimplementedStaticAnalysisServer) GetPackageDependencies(context.Context, *GetPackageDependenciesRequest) (*GetPackageDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageDependencies not implemented")
}
func (UnimplementedStaticAnalysisServer) GetHotFunctions(context.Context, *GetHotFunctionsRequest) (*GetHotFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotFunctions not implemented")
}
func (UnimplementedStaticAnalysisServer) SearchFunctions(context.Context, *SearchFunctionsRequest) (*SearchFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFunctions not implemented")
}
func (UnimplementedStaticAnalysisServer) GetFunctionUpstream(context.Context, *GetFunctionUpstreamRequest) (*GetFunctionUpstreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionUpstream not implemented")
}
func (UnimplementedStaticAnalysisServer) GetFunctionDownstream(context.Context, *GetFunctionDownstreamRequest) (*GetFunctionDownstreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionDownstream not implemented")
}
func (UnimplementedStaticAnalysisServer) GetFunctionFullChain(context.Context, *GetFunctionFullChainRequest) (*GetFunctionFullChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionFullChain not implemented")
}
func (UnimplementedStaticAnalysisServer) GetTreeGraph(context.Context, *GetTreeGraphReq) (*GetTreeGraphReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeGraph not implemented")
}
func (UnimplementedStaticAnalysisServer) mustEmbedUnimplementedStaticAnalysisServer() {}
func (UnimplementedStaticAnalysisServer) testEmbeddedByValue()                        {}

// UnsafeStaticAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaticAnalysisServer will
// result in compilation errors.
type UnsafeStaticAnalysisServer interface {
	mustEmbedUnimplementedStaticAnalysisServer()
}

func RegisterStaticAnalysisServer(s grpc.ServiceRegistrar, srv StaticAnalysisServer) {
	// If the following call pancis, it indicates UnimplementedStaticAnalysisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StaticAnalysis_ServiceDesc, srv)
}

func _StaticAnalysis_GetStaticDbFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaticDbFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetStaticDbFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetStaticDbFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetStaticDbFiles(ctx, req.(*GetStaticDbFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetAnalysisTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetAnalysisTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetAnalysisTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetAnalysisTaskStatus(ctx, req.(*GetAnalysisTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_AnalyzeProjectPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeProjectPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).AnalyzeProjectPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_AnalyzeProjectPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).AnalyzeProjectPath(ctx, req.(*AnalyzeProjectPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_AnalyzeDbFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeDbFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).AnalyzeDbFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_AnalyzeDbFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).AnalyzeDbFile(ctx, req.(*AnalyzeDbFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetFunctionAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetFunctionAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetFunctionAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetFunctionAnalysis(ctx, req.(*GetFunctionAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetFunctionCallGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionCallGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetFunctionCallGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetFunctionCallGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetFunctionCallGraph(ctx, req.(*GetFunctionCallGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_ListGitLabRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitLabRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).ListGitLabRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_ListGitLabRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).ListGitLabRepositories(ctx, req.(*ListGitLabRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_CloneGitLabRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneGitLabRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).CloneGitLabRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_CloneGitLabRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).CloneGitLabRepository(ctx, req.(*CloneGitLabRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetPackageDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetPackageDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetPackageDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetPackageDependencies(ctx, req.(*GetPackageDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetHotFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetHotFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetHotFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetHotFunctions(ctx, req.(*GetHotFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_SearchFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).SearchFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_SearchFunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).SearchFunctions(ctx, req.(*SearchFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetFunctionUpstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionUpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetFunctionUpstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetFunctionUpstream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetFunctionUpstream(ctx, req.(*GetFunctionUpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetFunctionDownstream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionDownstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetFunctionDownstream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetFunctionDownstream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetFunctionDownstream(ctx, req.(*GetFunctionDownstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetFunctionFullChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionFullChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetFunctionFullChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetFunctionFullChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetFunctionFullChain(ctx, req.(*GetFunctionFullChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticAnalysis_GetTreeGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAnalysisServer).GetTreeGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticAnalysis_GetTreeGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAnalysisServer).GetTreeGraph(ctx, req.(*GetTreeGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StaticAnalysis_ServiceDesc is the grpc.ServiceDesc for StaticAnalysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaticAnalysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staticanalysis.v1.StaticAnalysis",
	HandlerType: (*StaticAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStaticDbFiles",
			Handler:    _StaticAnalysis_GetStaticDbFiles_Handler,
		},
		{
			MethodName: "GetAnalysisTaskStatus",
			Handler:    _StaticAnalysis_GetAnalysisTaskStatus_Handler,
		},
		{
			MethodName: "AnalyzeProjectPath",
			Handler:    _StaticAnalysis_AnalyzeProjectPath_Handler,
		},
		{
			MethodName: "AnalyzeDbFile",
			Handler:    _StaticAnalysis_AnalyzeDbFile_Handler,
		},
		{
			MethodName: "GetFunctionAnalysis",
			Handler:    _StaticAnalysis_GetFunctionAnalysis_Handler,
		},
		{
			MethodName: "GetFunctionCallGraph",
			Handler:    _StaticAnalysis_GetFunctionCallGraph_Handler,
		},
		{
			MethodName: "ListGitLabRepositories",
			Handler:    _StaticAnalysis_ListGitLabRepositories_Handler,
		},
		{
			MethodName: "CloneGitLabRepository",
			Handler:    _StaticAnalysis_CloneGitLabRepository_Handler,
		},
		{
			MethodName: "GetPackageDependencies",
			Handler:    _StaticAnalysis_GetPackageDependencies_Handler,
		},
		{
			MethodName: "GetHotFunctions",
			Handler:    _StaticAnalysis_GetHotFunctions_Handler,
		},
		{
			MethodName: "SearchFunctions",
			Handler:    _StaticAnalysis_SearchFunctions_Handler,
		},
		{
			MethodName: "GetFunctionUpstream",
			Handler:    _StaticAnalysis_GetFunctionUpstream_Handler,
		},
		{
			MethodName: "GetFunctionDownstream",
			Handler:    _StaticAnalysis_GetFunctionDownstream_Handler,
		},
		{
			MethodName: "GetFunctionFullChain",
			Handler:    _StaticAnalysis_GetFunctionFullChain_Handler,
		},
		{
			MethodName: "GetTreeGraph",
			Handler:    _StaticAnalysis_GetTreeGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staticanalysis/v1/staticanalysis.proto",
}
